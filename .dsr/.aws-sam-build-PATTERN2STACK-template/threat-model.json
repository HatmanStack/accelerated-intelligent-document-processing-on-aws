[
  {
    "id": "PATTERN2-SUBSET-THREAT-001",
    "stack": "Pattern2Subset",
    "stride_category": "Information Disclosure",
    "severity": "Medium",
    "resource_type": "AWS::Serverless::StateMachine",
    "resource_name": "DocumentProcessingStateMachine",
    "title": "Sensitive Document Data Exposure Through State Machine Execution History",
    "issue": "The DocumentProcessingStateMachine has logging configured with IncludeExecutionData set to true, which logs all input/output data. This may include sensitive information from processed documents.",
    "attack_vector": "An attacker with access to CloudWatch logs could view potentially sensitive document content that was passed between steps in the workflow.",
    "impact": "Unauthorized exposure of sensitive document data which could lead to data leakage, privacy violations, or regulatory non-compliance.",
    "remediation": "Set IncludeExecutionData to false for the state machine logging configuration, and implement specific, controlled logging at the individual Lambda function level with proper data filtering.",
    "priority": 1,
    "estimated_effort": "Low",
    "cwe_id": "CWE-200",
    "compliance_violations": ["GDPR Article 32", "PCI DSS 3.2.1"],
    "references": ["https://docs.aws.amazon.com/step-functions/latest/dg/cloudwatch-log-level.html"],
    "status": "Open"
  },
  {
    "id": "PATTERN2-SUBSET-THREAT-002",
    "stack": "Pattern2Subset",
    "stride_category": "Elevation of Privilege",
    "severity": "High",
    "resource_type": "AWS::Serverless::Function",
    "resource_name": "OCRFunction",
    "title": "Overly Permissive IAM Policies in OCR Lambda Function",
    "issue": "The OCRFunction has a policy statement that grants permissions to all Textract APIs with a wildcard resource ('*'). This violates the principle of least privilege.",
    "attack_vector": "If the Lambda function is compromised, an attacker could leverage these permissions to access Textract services across all regions and accounts where the credentials are valid.",
    "impact": "Potential for privilege escalation, allowing attackers to perform unauthorized Textract operations on any document in the account.",
    "remediation": "Restrict Textract permissions to only those APIs actually needed (DetectDocumentText and AnalyzeDocument) and implement resource-based constraints where possible.",
    "priority": 1,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-272",
    "compliance_violations": ["CIS AWS Foundations Benchmark 1.16"],
    "references": ["https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#grant-least-privilege"],
    "status": "Open"
  },
  {
    "id": "PATTERN2-SUBSET-THREAT-003",
    "stack": "Pattern2Subset",
    "stride_category": "Elevation of Privilege",
    "severity": "Medium",
    "resource_type": "AWS::Serverless::Function",
    "resource_name": "Multiple Lambda Functions",
    "title": "Excessive Bedrock Model Access Across Lambda Functions",
    "issue": "Multiple Lambda functions (OCRFunction, ClassificationFunction, ExtractionFunction, AssessmentFunction, SummarizationFunction) have broad access to all Bedrock foundation models and inference profiles through wildcard resources.",
    "attack_vector": "If any of these functions were compromised, an attacker could potentially use credentials to access any Bedrock model available in the account, possibly incurring high costs or accessing more powerful models than intended.",
    "impact": "Potential for unauthorized access to sensitive AI models, excessive cost generation, or using more powerful models for data extraction than intended.",
    "remediation": "Restrict Bedrock permissions to only the specific models needed by each function. Replace 'arn:aws:bedrock:*::foundation-model/*' with specific model ARNs.",
    "priority": 2,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-272",
    "compliance_violations": ["CIS AWS Foundations Benchmark 1.16"],
    "references": ["https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#grant-least-privilege"],
    "status": "Open"
  },
  {
    "id": "PATTERN2-SUBSET-THREAT-004",
    "stack": "Pattern2Subset",
    "stride_category": "Tampering",
    "severity": "Medium",
    "resource_type": "AWS::Serverless::Function",
    "resource_name": "Multiple Lambda Functions",
    "title": "Cross-Lambda Bucket Access Without Resource Isolation",
    "issue": "Multiple Lambda functions have full read/write access to the same S3 buckets (WorkingBucket, OutputBucket) without proper resource-level isolation, which could allow one compromised function to tamper with data from other functions.",
    "attack_vector": "A compromised Lambda could modify or delete files created by other Lambdas in the workflow, potentially corrupting document processing results.",
    "impact": "Data integrity issues, potential for denial of service by removing working files, or insertion of malicious content into the document processing pipeline.",
    "remediation": "Implement prefix-based access controls for S3 buckets, giving each Lambda function access only to the specific prefixes (folders) it needs to operate.",
    "priority": 2,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-284",
    "compliance_violations": ["CIS AWS Foundations Benchmark 1.16"],
    "references": ["https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_examples_s3_rw-bucket-prefix.html"],
    "status": "Open"
  },
  {
    "id": "PATTERN2-SUBSET-THREAT-005",
    "stack": "Pattern2Subset",
    "stride_category": "Repudiation",
    "severity": "Medium",
    "resource_type": "AWS::Logs::LogGroup",
    "resource_name": "Multiple Log Groups",
    "title": "Insufficient CloudWatch Logs Retention Configuration",
    "issue": "While CloudWatch log groups are configured with a retention period via the LogRetentionDays parameter, there's no validation or default setting to ensure compliance with data retention requirements.",
    "attack_vector": "An attacker who gains access to CloudFormation could set a very short retention period, causing logs to be deleted quickly and eliminating evidence of malicious activity.",
    "impact": "Potential loss of audit trails, hampering incident investigation and creating compliance violations for required log retention periods.",
    "remediation": "Add a constraint to the LogRetentionDays parameter with a minimum value that meets compliance requirements, and ensure a reasonable default value is set.",
    "priority": 3,
    "estimated_effort": "Low",
    "cwe_id": "CWE-778",
    "compliance_violations": ["PCI DSS 3.2.1 Requirement 10.7", "SOC 2 Common Criteria 7.1"],
    "references": ["https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Working-with-log-groups-and-streams.html"],
    "status": "Open"
  },
  {
    "id": "PATTERN2-SUBSET-THREAT-006",
    "stack": "Pattern2Subset",
    "stride_category": "Information Disclosure",
    "severity": "Medium",
    "resource_type": "AWS::CloudWatch::Dashboard",
    "resource_name": "Dashboard",
    "title": "Sensitive Information Exposure in CloudWatch Dashboard",
    "issue": "The CloudWatch Dashboard may display error logs containing sensitive information from document processing, and lacks access controls to restrict who can view this dashboard.",
    "attack_vector": "Users with CloudWatch access could view the dashboard and see potentially sensitive information from document errors or processing details.",
    "impact": "Unauthorized exposure of document content, processing metadata, or system configuration that could aid in further attacks.",
    "remediation": "Implement proper IAM restrictions for dashboard access and ensure error logs shown in the dashboard don't include sensitive document content.",
    "priority": 3,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-200",
    "compliance_violations": ["GDPR Article 32"],
    "references": ["https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch-dashboard-access-control.html"],
    "status": "Open"
  },
  {
    "id": "PATTERN2-SUBSET-THREAT-007",
    "stack": "Pattern2Subset",
    "stride_category": "Denial of Service",
    "severity": "Medium",
    "resource_type": "AWS::Serverless::Function",
    "resource_name": "Multiple Lambda Functions",
    "title": "Missing Concurrency Limits on Document Processing Lambda Functions",
    "issue": "Lambda functions in the document processing workflow don't have reserved or maximum concurrency settings, which could lead to resource exhaustion under high load.",
    "attack_vector": "An attacker could submit a large number of documents for processing simultaneously, causing the system to consume all available Lambda concurrency in the account.",
    "impact": "Potential denial of service for other applications sharing the same AWS account, or excessive costs from unbounded Lambda execution.",
    "remediation": "Set appropriate maximum concurrency limits for each Lambda function to prevent resource exhaustion, and consider implementing throttling at the workflow entry point.",
    "priority": 2,
    "estimated_effort": "Low",
    "cwe_id": "CWE-770",
    "compliance_violations": [],
    "references": ["https://docs.aws.amazon.com/lambda/latest/dg/configuration-concurrency.html"],
    "status": "Open"
  },
  {
    "id": "PATTERN2-SUBSET-THREAT-008",
    "stack": "Pattern2Subset",
    "stride_category": "Information Disclosure",
    "severity": "High",
    "resource_type": "AWS::Serverless::Function",
    "resource_name": "Multiple Lambda Functions",
    "title": "Potential Data Leakage in Lambda Environment Variables",
    "issue": "Multiple Lambda functions contain sensitive configuration parameters in environment variables, including API URLs and service configurations that could be exposed if the Lambda runtime is compromised.",
    "attack_vector": "An attacker who can execute code in the Lambda environment (through dependency injection or similar) could access environment variables containing sensitive configuration data.",
    "impact": "Exposure of internal system architecture, API endpoints, and configuration that could facilitate further attacks.",
    "remediation": "Store sensitive configuration in AWS Secrets Manager or Parameter Store with encryption, and retrieve them at runtime. Consider implementing environment variable encryption for Lambda.",
    "priority": 2,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-527",
    "compliance_violations": ["CIS AWS Foundations Benchmark"],
    "references": ["https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-encryption"],
    "status": "Open"
  },
  {
    "id": "PATTERN2-SUBSET-THREAT-009",
    "stack": "Pattern2Subset",
    "stride_category": "Elevation of Privilege",
    "severity": "Medium",
    "resource_type": "AWS::CloudFormation::CustomResource",
    "resource_name": "UpdateSchemaConfig",
    "title": "Potential Code Injection in Custom Resource Configuration",
    "issue": "The UpdateSchemaConfig custom resource contains complex JSON schema definitions that are processed by a custom resource. This could potentially be vulnerable to code injection if not properly validated.",
    "attack_vector": "An attacker with access to CloudFormation could attempt to inject malicious code or commands into the schema definitions that might be evaluated during template processing.",
    "impact": "Potential execution of unauthorized code within the context of the custom resource's Lambda function.",
    "remediation": "Ensure the UpdateConfigurationFunction implements strict input validation for all schema inputs and handles them as data, not executable code.",
    "priority": 2,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-94",
    "compliance_violations": [],
    "references": ["https://owasp.org/www-community/attacks/Code_Injection"],
    "status": "Open"
  },
  {
    "id": "PATTERN2-SUBSET-THREAT-010",
    "stack": "Pattern2Subset",
    "stride_category": "Tampering",
    "severity": "Low",
    "resource_type": "AWS::Serverless::Function",
    "resource_name": "ProcessResultsFunction",
    "title": "Missing Integrity Validation in Document Processing Results",
    "issue": "The ProcessResultsFunction doesn't appear to include mechanisms to validate the integrity of processed document data before storing final results.",
    "attack_vector": "An attacker who gains access to the working S3 bucket could potentially modify intermediate processing results before they're finalized.",
    "impact": "Tampering with document processing results could lead to incorrect data extraction, potentially impacting business decisions based on this data.",
    "remediation": "Implement checksums or digital signatures for intermediate processing artifacts and validate them before finalizing results.",
    "priority": 3,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-354",
    "compliance_violations": [],
    "references": ["https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html"],
    "status": "Open"
  }
]