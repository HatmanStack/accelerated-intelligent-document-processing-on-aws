[
  {
    "id": "PATTERN2-THREAT-001",
    "stack": "pattern2",
    "stride_category": "Information Disclosure",
    "severity": "Medium",
    "resource_type": "AWS::Logs::LogGroup",
    "resource_name": "OCRFunctionLogGroup, ClassificationFunctionLogGroup, ExtractionFunctionLogGroup, AssessmentFunctionLogGroup, ProcessResultsFunctionLogGroup, SummarizationFunctionLogGroup, StateMachineLogGroup",
    "title": "Sensitive data may be logged without proper sanitization",
    "issue": "Lambda functions processing document content may log sensitive information that gets stored in CloudWatch Logs. While logs are encrypted with a customer-managed KMS key, there's no explicit mechanism to sanitize or filter out PII or sensitive data before logging.",
    "attack_vector": "An attacker with access to CloudWatch Logs or the KMS key could potentially view sensitive document data that was inadvertently logged during processing.",
    "impact": "Unauthorized disclosure of PII or sensitive business data, potentially leading to regulatory compliance violations.",
    "remediation": "Implement log scrubbing/filtering mechanisms in Lambda functions to sanitize sensitive data before logging. Consider implementing a centralized logging middleware that handles sanitization consistently.",
    "priority": 2,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-532",
    "compliance_violations": ["GDPR Article 32", "HIPAA Security Rule"],
    "references": ["https://docs.aws.amazon.com/lambda/latest/dg/nodejs-logging.html"],
    "status": "Open"
  },
  {
    "id": "PATTERN2-THREAT-002",
    "stack": "pattern2",
    "stride_category": "Elevation of Privilege",
    "severity": "Medium",
    "resource_type": "AWS::IAM::Policy",
    "resource_name": "OCRFunction, ClassificationFunction, ExtractionFunction, AssessmentFunction, ProcessResultsFunction, SummarizationFunction",
    "title": "Overly permissive S3 permissions",
    "issue": "Several Lambda functions have full CRUD permissions (S3CrudPolicy) to buckets when they may only need read or write permissions. This violates the principle of least privilege.",
    "attack_vector": "If a Lambda function is compromised, an attacker could potentially delete or overwrite important data in S3 buckets.",
    "impact": "Unauthorized modification or deletion of document data, potentially leading to data loss or tampering.",
    "remediation": "Review each Lambda function and restrict S3 permissions to only those actions necessary for its operation (e.g., GetObject, PutObject). Avoid using S3CrudPolicy and create more granular policies.",
    "priority": 2,
    "estimated_effort": "Low",
    "cwe_id": "CWE-272",
    "compliance_violations": ["CIS AWS Foundations 1.22"],
    "references": ["https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html"],
    "status": "Open"
  },
  {
    "id": "PATTERN2-THREAT-003",
    "stack": "pattern2",
    "stride_category": "Elevation of Privilege",
    "severity": "Medium",
    "resource_type": "AWS::IAM::Policy",
    "resource_name": "OCRFunction, ClassificationFunction, ExtractionFunction, AssessmentFunction, SummarizationFunction",
    "title": "Overly permissive Bedrock model invocation permissions",
    "issue": "Lambda functions have permissions to invoke any foundation model in Amazon Bedrock across all regions (arn:aws:bedrock:*::foundation-model/*), rather than restricting to specific models needed.",
    "attack_vector": "If a Lambda function is compromised, an attacker could potentially use more expensive models or invoke models in different regions, leading to unexpected costs or data exfiltration.",
    "impact": "Potential for excessive usage costs, unexpected model behavior, or data processing in unintended regions.",
    "remediation": "Restrict Bedrock model invocation permissions to only the specific models and regions required for each function. Replace wildcard (*) resources with explicit ARNs for the required models.",
    "priority": 3,
    "estimated_effort": "Low",
    "cwe_id": "CWE-272",
    "compliance_violations": ["AWS Well-Architected Framework - Security Pillar"],
    "references": ["https://docs.aws.amazon.com/bedrock/latest/userguide/security-iam.html"],
    "status": "Open"
  },
  {
    "id": "PATTERN2-THREAT-004",
    "stack": "pattern2",
    "stride_category": "Information Disclosure",
    "severity": "Medium",
    "resource_type": "AWS::Lambda::Function",
    "resource_name": "OCRFunction, ClassificationFunction, ExtractionFunction, AssessmentFunction, ProcessResultsFunction, SummarizationFunction",
    "title": "Potential data exfiltration via third-party dependencies",
    "issue": "Lambda functions may use external dependencies that could be compromised or contain vulnerabilities. There's no explicit mechanism for scanning or validating dependencies before deployment.",
    "attack_vector": "An attacker could exploit a vulnerable third-party package used by one of the Lambda functions to exfiltrate document data or gain unauthorized access.",
    "impact": "Unauthorized access to sensitive document data or potential system compromise.",
    "remediation": "Implement dependency scanning in the CI/CD pipeline. Use Amazon CodeGuru or similar tools to scan Lambda code for vulnerabilities. Consider using Lambda layers for vetted, shared libraries.",
    "priority": 2,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-1104",
    "compliance_violations": ["OWASP Top 10 A9:2021 - Security Logging and Monitoring Failures"],
    "references": ["https://docs.aws.amazon.com/codeguru/latest/reviewer-ug/welcome.html"],
    "status": "Open"
  },
  {
    "id": "PATTERN2-THREAT-005",
    "stack": "pattern2",
    "stride_category": "Tampering",
    "severity": "Medium",
    "resource_type": "AWS::Lambda::Function",
    "resource_name": "OCRFunction, ClassificationFunction, ExtractionFunction, AssessmentFunction, ProcessResultsFunction, SummarizationFunction",
    "title": "No integrity validation for document processing pipeline",
    "issue": "The document processing workflow doesn't appear to implement integrity checks to ensure documents haven't been tampered with between processing stages.",
    "attack_vector": "An attacker with partial access to the system could potentially modify document content or metadata between processing stages, leading to incorrect extraction results or data manipulation.",
    "impact": "Incorrect document classification, extraction of manipulated data, or processing of unauthorized content.",
    "remediation": "Implement checksums or digital signatures for documents at each processing stage. Validate integrity before processing. Consider storing hash values in the tracking table to detect modifications.",
    "priority": 3,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-345",
    "compliance_violations": ["NIST SP 800-53 SI-7"],
    "references": ["https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingMetadata.html"],
    "status": "Open"
  },
  {
    "id": "PATTERN2-THREAT-006",
    "stack": "pattern2",
    "stride_category": "Repudiation",
    "severity": "Medium",
    "resource_type": "AWS::StepFunctions::StateMachine",
    "resource_name": "DocumentProcessingStateMachine",
    "title": "Insufficient audit trail for document processing lifecycle",
    "issue": "While the state machine logs execution data, there's no comprehensive audit trail that tracks who initiated document processing, what changes were made, and what extraction results were produced.",
    "attack_vector": "Without proper audit trails, an insider or attacker who gains access could process unauthorized documents or modify extraction results without accountability.",
    "impact": "Lack of accountability for document processing activities, difficulty in forensic analysis after a security incident.",
    "remediation": "Implement comprehensive audit logging that includes the identity of requesters, document metadata, and processing results. Store audit logs in a tamper-evident system. Consider implementing AWS CloudTrail for API activity logging.",
    "priority": 3,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-778",
    "compliance_violations": ["SOX Section 404", "GDPR Article 30"],
    "references": ["https://docs.aws.amazon.com/step-functions/latest/dg/cloudtrail.html"],
    "status": "Open"
  },
  {
    "id": "PATTERN2-THREAT-007",
    "stack": "pattern2",
    "stride_category": "Denial of Service",
    "severity": "Medium",
    "resource_type": "AWS::Lambda::Function",
    "resource_name": "OCRFunction, ClassificationFunction, ExtractionFunction, AssessmentFunction, ProcessResultsFunction, SummarizationFunction",
    "title": "No concurrency limits on Lambda functions",
    "issue": "Lambda functions don't have reserved or maximum concurrency limits configured, potentially allowing resource exhaustion or throttling during high load.",
    "attack_vector": "An attacker could trigger multiple large document processing jobs simultaneously, causing the system to exhaust resources or hit service quotas, resulting in denial of service for legitimate requests.",
    "impact": "Processing delays, failures due to throttling, or potential downstream resource exhaustion.",
    "remediation": "Configure appropriate reserved and maximum concurrency limits for each Lambda function based on expected usage patterns. Implement throttling or queuing mechanisms for document processing requests during high load.",
    "priority": 3,
    "estimated_effort": "Low",
    "cwe_id": "CWE-400",
    "compliance_violations": ["AWS Well-Architected Framework - Reliability Pillar"],
    "references": ["https://docs.aws.amazon.com/lambda/latest/dg/configuration-concurrency.html"],
    "status": "Open"
  },
  {
    "id": "PATTERN2-THREAT-008",
    "stack": "pattern2",
    "stride_category": "Information Disclosure",
    "severity": "High",
    "resource_type": "AWS::Lambda::Function",
    "resource_name": "OCRFunction, ClassificationFunction, ExtractionFunction, AssessmentFunction, SummarizationFunction",
    "title": "Potential data leakage through Bedrock model prompts",
    "issue": "Document content is sent to external AI models via Bedrock without clear controls on what data can be included in prompts. Sensitive information could be inadvertently included in prompts sent to foundation models.",
    "attack_vector": "Sensitive data from documents could be sent as part of prompts to external AI models, potentially being stored, used for model training, or leaked through model responses.",
    "impact": "Disclosure of sensitive business data, PII, or confidential information to third-party AI model providers.",
    "remediation": "Implement robust data filtering and sanitization before sending content to AI models. Use guardrails consistently across all Bedrock interactions (currently only conditionally applied). Consider implementing prompt templates that explicitly define what data can be included.",
    "priority": 1,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-200",
    "compliance_violations": ["GDPR Article 32", "HIPAA Security Rule"],
    "references": ["https://docs.aws.amazon.com/bedrock/latest/userguide/guardrails.html"],
    "status": "Open"
  },
  {
    "id": "PATTERN2-THREAT-009",
    "stack": "pattern2",
    "stride_category": "Tampering",
    "severity": "High",
    "resource_type": "AWS::CloudFormation::CustomResource",
    "resource_name": "UpdateSchemaConfig, UpdateDefaultConfig",
    "title": "Configuration tampering risk via custom resources",
    "issue": "Custom resources are used to update configuration, but there are no explicit validation controls to prevent malicious configuration changes that could alter system behavior.",
    "attack_vector": "An attacker with access to the configuration could inject malicious prompts, redirect data flow, or manipulate extraction logic by modifying configuration values.",
    "impact": "System compromise, data exfiltration, or manipulation of document processing results.",
    "remediation": "Implement strong input validation for all configuration updates. Create a configuration approval process. Consider implementing a change detection mechanism that alerts on suspicious configuration changes.",
    "priority": 1,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-642",
    "compliance_violations": ["NIST SP 800-53 CM-5"],
    "references": ["https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-lambda-function-code-cfnresponsemodule.html"],
    "status": "Open"
  },
  {
    "id": "PATTERN2-THREAT-010",
    "stack": "pattern2",
    "stride_category": "Elevation of Privilege",
    "severity": "Medium",
    "resource_type": "AWS::IAM::Policy",
    "resource_name": "OCRFunction",
    "title": "Overly permissive Textract permissions",
    "issue": "The OCRFunction has permissions to call Textract APIs (DetectDocumentText, AnalyzeDocument) on all resources without restrictions, violating the principle of least privilege.",
    "attack_vector": "If the Lambda function is compromised, an attacker could use Textract services to process unauthorized documents or perform actions at the expense of the account owner.",
    "impact": "Unauthorized use of AWS services, potential cost implications, and processing of unauthorized documents.",
    "remediation": "While Textract doesn't support resource-level permissions for these operations, implement additional controls such as request validation, monitoring unusual usage patterns, and setting up AWS Budgets alerts for unexpected costs.",
    "priority": 3,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-272",
    "compliance_violations": ["AWS Well-Architected Framework - Security Pillar"],
    "references": ["https://docs.aws.amazon.com/textract/latest/dg/security_iam_service-with-iam.html"],
    "status": "Open"
  }
]