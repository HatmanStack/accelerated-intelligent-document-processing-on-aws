[
  {
    "id": "PATTERN2-THREAT-001",
    "stack": "pattern2",
    "stride_category": "Information Disclosure",
    "severity": "Low",
    "resource_type": "AWS::Lambda::Function",
    "resource_name": "OCRFunction, ClassificationFunction, ExtractionFunction, AssessmentFunction, ProcessResultsFunction, SummarizationFunction",
    "title": "Lambda Function Environment Variables Not Encrypted",
    "issue": "Lambda function environment variables are not explicitly encrypted with AWS KMS, potentially exposing sensitive configuration information if function details are accessible.",
    "attack_vector": "An attacker with permissions to view Lambda function configuration could view environment variables that might contain sensitive configuration data.",
    "impact": "Exposure of configuration details that could aid in further attacks or reveal implementation details.",
    "remediation": "Enable environment variable encryption for Lambda functions using the KmsKeyArn property, referencing the existing CustomerManagedEncryptionKeyArn.",
    "priority": 3,
    "estimated_effort": "Low",
    "cwe_id": "CWE-256",
    "compliance_violations": ["CIS AWS Foundations Benchmark 2.4"],
    "references": ["https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-encryption"],
    "status": "Open"
  },
  {
    "id": "PATTERN2-THREAT-002",
    "stack": "pattern2",
    "stride_category": "Tampering",
    "severity": "Medium",
    "resource_type": "AWS::Lambda::Function",
    "resource_name": "OCRFunction, ClassificationFunction, ExtractionFunction, AssessmentFunction, ProcessResultsFunction, SummarizationFunction",
    "title": "Lambda Code Integrity Not Validated",
    "issue": "Lambda functions do not implement code signing or deployment validation, allowing potential code tampering during deployment.",
    "attack_vector": "An attacker with appropriate IAM permissions could replace Lambda function code with malicious versions.",
    "impact": "Execution of unauthorized code leading to potential data exfiltration, resource misuse, or further system compromise.",
    "remediation": "Implement AWS Signer and Code Signing for Lambda functions to ensure code integrity during deployment.",
    "priority": 2,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-494",
    "compliance_violations": ["CIS AWS Foundations Benchmark 2.0"],
    "references": ["https://docs.aws.amazon.com/lambda/latest/dg/configuration-codesigning.html"],
    "status": "Open"
  },
  {
    "id": "PATTERN2-THREAT-003",
    "stack": "pattern2",
    "stride_category": "Elevation of Privilege",
    "severity": "Medium",
    "resource_type": "AWS::IAM::Policy",
    "resource_name": "OCRFunction Policies, ExtractionFunction Policies, ClassificationFunction Policies",
    "title": "Overly Permissive Bedrock Model Invocation Permissions",
    "issue": "Lambda functions have permissions to invoke any foundation model in Bedrock with 'bedrock:InvokeModel' on 'arn:aws:bedrock:*::foundation-model/*' which is broader than necessary.",
    "attack_vector": "If a Lambda function is compromised, an attacker could leverage these broad permissions to access models they shouldn't, potentially causing unexpected costs or accessing sensitive capabilities.",
    "impact": "Potential for cost escalation, unauthorized model use, and violation of least privilege principles.",
    "remediation": "Restrict the 'bedrock:InvokeModel' permission to only the specific models required by each function, rather than using the wildcard pattern for all foundation models.",
    "priority": 2,
    "estimated_effort": "Low",
    "cwe_id": "CWE-272",
    "compliance_violations": ["CIS AWS Foundations Benchmark 1.16"],
    "references": ["https://docs.aws.amazon.com/bedrock/latest/userguide/security_iam_service-with-iam.html"],
    "status": "Open"
  },
  {
    "id": "PATTERN2-THREAT-004",
    "stack": "pattern2",
    "stride_category": "Information Disclosure",
    "severity": "Medium",
    "resource_type": "AWS::CloudWatch::Dashboard",
    "resource_name": "Dashboard",
    "title": "CloudWatch Dashboard Could Expose Sensitive Operational Data",
    "issue": "The CloudWatch Dashboard may display operational metrics and logs that contain sensitive information without access controls explicitly defined.",
    "attack_vector": "Users with CloudWatch dashboard access could view potentially sensitive operational data or error messages that might reveal implementation details.",
    "impact": "Unauthorized visibility into system operations, error patterns, and potentially sensitive data included in logs or metrics.",
    "remediation": "Implement IAM permissions that restrict dashboard access to only authorized personnel and ensure log groups filter sensitive information before display in dashboards.",
    "priority": 3,
    "estimated_effort": "Low",
    "cwe_id": "CWE-200",
    "compliance_violations": ["GDPR Article 32", "CIS AWS Foundations Benchmark 3.1"],
    "references": ["https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Dashboards_Permissions_Admin.html"],
    "status": "Open"
  },
  {
    "id": "PATTERN2-THREAT-005",
    "stack": "pattern2",
    "stride_category": "Repudiation",
    "severity": "Low",
    "resource_type": "AWS::Serverless::StateMachine",
    "resource_name": "DocumentProcessingStateMachine",
    "title": "State Machine Logging Could Be More Comprehensive",
    "issue": "While the state machine has logging enabled with 'Level: ALL', it may not be capturing full context for security auditing purposes.",
    "attack_vector": "An attacker performing malicious actions might not be fully traceable through the current logging configuration.",
    "impact": "Limited ability to perform forensic analysis in case of a security incident or to detect unusual patterns of behavior.",
    "remediation": "Enhance logging by adding additional context metadata and ensuring cross-reference capabilities with CloudTrail and other logging sources.",
    "priority": 4,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-778",
    "compliance_violations": ["CIS AWS Foundations Benchmark 3.1"],
    "references": ["https://docs.aws.amazon.com/step-functions/latest/dg/cw-logs.html"],
    "status": "Open"
  },
  {
    "id": "PATTERN2-THREAT-006",
    "stack": "pattern2",
    "stride_category": "Elevation of Privilege",
    "severity": "Medium",
    "resource_type": "AWS::IAM::Policy",
    "resource_name": "OCRFunction Policies",
    "title": "Overly Broad Textract API Permissions",
    "issue": "The OCRFunction has permissions to call textract:DetectDocumentText and textract:AnalyzeDocument on all resources ('*') which violates least privilege principle.",
    "attack_vector": "If the Lambda function is compromised, an attacker could use these permissions to analyze documents from any source within AWS Textract.",
    "impact": "Potential unauthorized access to document content from other sources, cost impact through excess API usage.",
    "remediation": "While Textract does not support resource-level permissions for these actions, implement additional controls such as strict input validation and request origin verification within the Lambda function code.",
    "priority": 2,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-272",
    "compliance_violations": ["CIS AWS Foundations Benchmark 1.16"],
    "references": ["https://docs.aws.amazon.com/textract/latest/dg/security_iam_service-with-iam.html"],
    "status": "Open"
  },
  {
    "id": "PATTERN2-THREAT-007",
    "stack": "pattern2",
    "stride_category": "Elevation of Privilege",
    "severity": "Medium",
    "resource_type": "AWS::IAM::Policy",
    "resource_name": "Multiple Lambda Function Policies",
    "title": "CloudWatch PutMetricData Permission Without Resource Constraints",
    "issue": "Multiple Lambda functions have the ability to put metrics to any CloudWatch namespace with 'cloudwatch:PutMetricData' on resource '*'.",
    "attack_vector": "If compromised, a Lambda function could be used to publish misleading metrics to any CloudWatch namespace, potentially triggering automated responses or confusing monitoring systems.",
    "impact": "Potential for metric pollution, false alarms, or masking of actual issues by publishing misleading operational data.",
    "remediation": "While CloudWatch does not support resource-level permissions for PutMetricData, implement additional controls like strict metric namespace prefixing in code and monitoring for unexpected metric publications.",
    "priority": 3,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-272",
    "compliance_violations": ["CIS AWS Foundations Benchmark 1.16"],
    "references": ["https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/iam-cw-condition-keys-namespace.html"],
    "status": "Open"
  },
  {
    "id": "PATTERN2-THREAT-008",
    "stack": "pattern2",
    "stride_category": "Denial of Service",
    "severity": "Medium",
    "resource_type": "AWS::Serverless::Function",
    "resource_name": "OCRFunction, ClassificationFunction, ExtractionFunction, AssessmentFunction, ProcessResultsFunction, SummarizationFunction",
    "title": "Missing Concurrent Execution Limits on Lambda Functions",
    "issue": "Lambda functions do not have reserved or maximum concurrent execution limits defined, which could lead to resource exhaustion or unexpected scaling behavior.",
    "attack_vector": "A flood of requests, either malicious or legitimate, could cause functions to scale excessively, potentially impacting other systems or incurring unexpected costs.",
    "impact": "Potential service disruption, resource exhaustion, or unexpected billing charges from uncontrolled scaling.",
    "remediation": "Set appropriate reserved and/or maximum concurrent execution limits for each Lambda function based on expected traffic patterns and criticality.",
    "priority": 2,
    "estimated_effort": "Low",
    "cwe_id": "CWE-400",
    "compliance_violations": ["CIS AWS Foundations Benchmark 2.8"],
    "references": ["https://docs.aws.amazon.com/lambda/latest/dg/configuration-concurrency.html"],
    "status": "Open"
  },
  {
    "id": "PATTERN2-THREAT-009",
    "stack": "pattern2",
    "stride_category": "Information Disclosure",
    "severity": "High",
    "resource_type": "AWS::CloudFormation::CustomResource",
    "resource_name": "UpdateDefaultConfig",
    "title": "Potential Sensitive Data Exposure in Configuration Default Values",
    "issue": "The UpdateDefaultConfig custom resource imports configuration from an S3 URI that could contain sensitive information such as prompts, API keys, or system configurations.",
    "attack_vector": "An attacker with access to the configuration bucket could exfiltrate sensitive configuration data or modify it to influence system behavior.",
    "impact": "Exposure of internal system design, prompt engineering, or other sensitive configurations that could facilitate further attacks.",
    "remediation": "Ensure the ConfigurationDefaultS3Uri points to a properly secured S3 bucket with appropriate access controls, encryption, and logging. Audit the configuration files to ensure they don't contain sensitive credentials or information.",
    "priority": 1,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-200",
    "compliance_violations": ["CIS AWS Foundations Benchmark 2.1.5", "GDPR Article 32"],
    "references": ["https://docs.aws.amazon.com/AmazonS3/latest/userguide/security-best-practices.html"],
    "status": "Open"
  },
  {
    "id": "PATTERN2-THREAT-010",
    "stack": "pattern2",
    "stride_category": "Tampering",
    "severity": "High",
    "resource_type": "AWS::Serverless::Function",
    "resource_name": "OCRFunction, ClassificationFunction, ExtractionFunction, AssessmentFunction, SummarizationFunction",
    "title": "LLM Prompt Injection Risk in Model Interactions",
    "issue": "Functions that interact with Bedrock LLMs may be susceptible to prompt injection attacks if input validation is insufficient, as they process documents from potentially untrusted sources.",
    "attack_vector": "An attacker could craft documents with content designed to manipulate the LLM prompts, potentially causing unexpected behavior, information leakage, or manipulated outputs.",
    "impact": "Potential for data leakage, system manipulation, or generation of misleading or harmful content through the LLM.",
    "remediation": "Implement robust input validation and sanitization, utilize Bedrock guardrails more broadly across all LLM interactions, and add content filtering before sending data to LLM models.",
    "priority": 1,
    "estimated_effort": "High",
    "cwe_id": "CWE-74",
    "compliance_violations": ["OWASP Top 10:2021-A3"],
    "references": ["https://owasp.org/www-project-top-10-for-large-language-model-applications/"],
    "status": "Open"
  }
]