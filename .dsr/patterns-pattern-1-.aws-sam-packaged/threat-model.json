[
  {
    "id": "AWS-GENAI-IDP-THREAT-001",
    "stack": "AWS GenAI IDP Accelerator",
    "stride_category": "Information Disclosure",
    "severity": "Low",
    "resource_type": "AWS::Serverless::StateMachine",
    "resource_name": "DocumentProcessingStateMachine",
    "title": "Excessive Logging for State Machine Executions",
    "issue": "The State Machine is configured with 'IncludeExecutionData' set to true and 'Level' set to ALL. This may log sensitive document data processed by the workflow, potentially exposing confidential information in CloudWatch logs.",
    "attack_vector": "An attacker with access to CloudWatch logs could view sensitive document data that was processed through the state machine.",
    "impact": "Potential exposure of sensitive information contained in processed documents to anyone with CloudWatch logs access permissions.",
    "remediation": "Consider reducing the logging level to ERROR or other appropriate level for production use. Set 'IncludeExecutionData' to false unless the full execution data is required for debugging.",
    "priority": 3,
    "estimated_effort": "Low",
    "cwe_id": "CWE-532",
    "compliance_violations": ["GDPR Article 32", "HIPAA 164.312(a)(1)"],
    "references": ["https://docs.aws.amazon.com/step-functions/latest/dg/cloudwatch-logs.html"],
    "status": "Open"
  },
  {
    "id": "AWS-GENAI-IDP-THREAT-002",
    "stack": "AWS GenAI IDP Accelerator",
    "stride_category": "Information Disclosure",
    "severity": "Medium",
    "resource_type": "AWS::CloudWatch::Dashboard",
    "resource_name": "Dashboard",
    "title": "Potential Sensitive Data Exposure in CloudWatch Dashboards",
    "issue": "The CloudWatch dashboard includes log widgets that display error messages and request data. These logs might contain sensitive information from processed documents that could be visible to anyone with dashboard access.",
    "attack_vector": "An attacker with access to the CloudWatch dashboard could view potentially sensitive document information in error logs or request data.",
    "impact": "Unauthorized exposure of document contents or metadata to users with dashboard access but who shouldn't have access to document content.",
    "remediation": "Review the log queries in the dashboard to ensure they filter out sensitive information. Consider implementing log field redaction for sensitive data using CloudWatch Logs pattern filtering.",
    "priority": 2,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-209",
    "compliance_violations": ["GDPR Article 32", "PCI DSS 3.2.1"],
    "references": ["https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/mask-sensitive-log-data.html"],
    "status": "Open"
  },
  {
    "id": "AWS-GENAI-IDP-THREAT-003",
    "stack": "AWS GenAI IDP Accelerator",
    "stride_category": "Elevation of Privilege",
    "severity": "Medium",
    "resource_type": "AWS::IAM::Role",
    "resource_name": "HITLProcessLambdaRole",
    "title": "Overly Permissive S3 Access",
    "issue": "The HITLProcessLambdaRole has GetObject permissions on the entire input and working buckets, which may provide excessive access beyond what's needed for the specific function.",
    "attack_vector": "If the Lambda function is compromised, an attacker could access all objects in the input and working buckets, potentially exposing sensitive documents beyond the scope of what the function needs.",
    "impact": "Unauthorized access to sensitive documents stored in S3 buckets, violating the principle of least privilege.",
    "remediation": "Restrict S3 access to specific prefixes or paths that the function needs, rather than granting access to the entire bucket. Use more specific resource ARNs in the IAM policy.",
    "priority": 2,
    "estimated_effort": "Low",
    "cwe_id": "CWE-272",
    "compliance_violations": ["CIS AWS Foundations Benchmark 1.16"],
    "references": ["https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#grant-least-privilege"],
    "status": "Open"
  },
  {
    "id": "AWS-GENAI-IDP-THREAT-004",
    "stack": "AWS GenAI IDP Accelerator",
    "stride_category": "Information Disclosure",
    "severity": "Medium",
    "resource_type": "AWS::Lambda::Function",
    "resource_name": "HITLStatusUpdateFunction",
    "title": "Missing Dead Letter Queue for Lambda Function",
    "issue": "The HITLStatusUpdateFunction does not have a Dead Letter Queue configured, which could lead to silent failures and loss of document processing events.",
    "attack_vector": "Not a direct attack vector, but could be exploited as part of a denial of service attack if an attacker can cause the function to fail repeatedly.",
    "impact": "Failed processing events would be lost without notification, potentially leading to documents being stalled in processing pipelines and business process disruption.",
    "remediation": "Add a Dead Letter Queue (SQS or SNS) to capture failed invocations and enable proper handling of failed document processing attempts.",
    "priority": 3,
    "estimated_effort": "Low",
    "cwe_id": "CWE-755",
    "compliance_violations": ["NIST SP 800-53 AU-4"],
    "references": ["https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq"],
    "status": "Open"
  },
  {
    "id": "AWS-GENAI-IDP-THREAT-005",
    "stack": "AWS GenAI IDP Accelerator",
    "stride_category": "Repudiation",
    "severity": "Medium",
    "resource_type": "AWS::Serverless::Function",
    "resource_name": "InvokeBDAFunction",
    "title": "Insufficient Monitoring for Critical Document Processing Function",
    "issue": "While logging is configured, there are no specific CloudWatch Alarms or monitoring for error rates, throttling, or critical failures in this core document processing function.",
    "attack_vector": "Attacks targeting the document processing pipeline might go undetected for extended periods without proper monitoring and alerting.",
    "impact": "Delayed detection of attacks or failures in the document processing workflow, potentially allowing data loss or corruption without timely intervention.",
    "remediation": "Add CloudWatch Alarms for critical metrics such as error rates, duration, throttling events, and invocation counts. Configure alerting to notify operations personnel of potential issues.",
    "priority": 2,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-778",
    "compliance_violations": ["SOC 2 CC5.1", "NIST SP 800-53 SI-4"],
    "references": ["https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html"],
    "status": "Open"
  },
  {
    "id": "AWS-GENAI-IDP-THREAT-006",
    "stack": "AWS GenAI IDP Accelerator",
    "stride_category": "Tampering",
    "severity": "Medium",
    "resource_type": "AWS::DynamoDB::Table",
    "resource_name": "BDAMetadataTable",
    "title": "Missing Condition Checks for DynamoDB Operations",
    "issue": "The functions that interact with BDAMetadataTable have full CRUD permissions without conditional checks or version controls, which could allow for unintended modifications or race conditions.",
    "attack_vector": "An attacker who compromises a Lambda function could modify metadata records without proper validation, potentially manipulating the document processing flow.",
    "impact": "Data integrity issues in the metadata table could lead to incorrect processing of documents, bypassing controls, or manipulation of processing results.",
    "remediation": "Implement DynamoDB condition expressions in application code to ensure proper version checking. Consider implementing a change history mechanism for critical metadata changes.",
    "priority": 2,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-367",
    "compliance_violations": ["NIST SP 800-53 SI-7"],
    "references": ["https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.ConditionExpressions.html"],
    "status": "Open"
  },
  {
    "id": "AWS-GENAI-IDP-THREAT-007",
    "stack": "AWS GenAI IDP Accelerator",
    "stride_category": "Spoofing",
    "severity": "High",
    "resource_type": "AWS::Serverless::Function",
    "resource_name": "ProcessResultsFunction",
    "title": "Potential LLM Prompt Injection Risk",
    "issue": "The ProcessResultsFunction appears to process input documents and send them to LLMs via Bedrock. Without proper input sanitization, this creates a risk of prompt injection attacks where malicious content in documents could manipulate the LLM behavior.",
    "attack_vector": "An attacker could submit documents with specially crafted content that overrides or manipulates prompt instructions, potentially causing the LLM to execute unwanted actions or expose information.",
    "impact": "Successful prompt injection could lead to data leakage, incorrect document processing, or manipulation of the document classification/extraction process.",
    "remediation": "Implement strict input validation and sanitization for all document content before sending to LLMs. Use guardrails and implement prompt engineering best practices to reduce the risk of injection attacks.",
    "priority": 1,
    "estimated_effort": "High",
    "cwe_id": "CWE-74",
    "compliance_violations": ["OWASP Top 10 for LLM Applications - LLM01"],
    "references": ["https://owasp.org/www-project-top-10-for-large-language-model-applications/"],
    "status": "Open"
  },
  {
    "id": "AWS-GENAI-IDP-THREAT-008",
    "stack": "AWS GenAI IDP Accelerator",
    "stride_category": "Denial of Service",
    "severity": "Medium",
    "resource_type": "AWS::Serverless::Function",
    "resource_name": "SummarizationFunction",
    "title": "Missing Throttling Controls for Bedrock API Calls",
    "issue": "The SummarizationFunction makes calls to Bedrock APIs without explicit throttling or rate limiting, potentially leading to API throttling and service disruption during high load scenarios.",
    "attack_vector": "An attacker could flood the system with document processing requests, causing Bedrock API throttling and disrupting the entire document processing pipeline.",
    "impact": "Service degradation or outage of document processing capabilities, leading to business process disruption and potential SLA violations.",
    "remediation": "Implement client-side throttling, backoff mechanisms, and concurrency controls for Bedrock API calls. Consider implementing a queue-based architecture to smooth out request spikes.",
    "priority": 2,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-770",
    "compliance_violations": ["NIST SP 800-53 SC-5"],
    "references": ["https://docs.aws.amazon.com/bedrock/latest/userguide/quotas.html"],
    "status": "Open"
  },
  {
    "id": "AWS-GENAI-IDP-THREAT-009",
    "stack": "AWS GenAI IDP Accelerator",
    "stride_category": "Information Disclosure",
    "severity": "High",
    "resource_type": "AWS::Serverless::Function",
    "resource_name": "SummarizationFunction",
    "title": "Optional Guardrail Configuration for LLM Interactions",
    "issue": "The BedrockGuardrailId and BedrockGuardrailVersion parameters are optional, allowing deployment without guardrails for LLM interactions. This could lead to data leakage or other LLM vulnerabilities if not properly configured.",
    "attack_vector": "Without guardrails, an attacker could craft documents with content designed to extract information, bypass restrictions, or cause other unintended behaviors from the LLM.",
    "impact": "Potential data leakage, PII exposure, or manipulation of the document processing workflow through crafted inputs.",
    "remediation": "Make guardrails mandatory for production deployments. Implement a default guardrail with appropriate security controls if custom guardrails aren't specified.",
    "priority": 1,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-284",
    "compliance_violations": ["OWASP Top 10 for LLM Applications - LLM03"],
    "references": ["https://docs.aws.amazon.com/bedrock/latest/userguide/guardrails.html"],
    "status": "Open"
  },
  {
    "id": "AWS-GENAI-IDP-THREAT-010",
    "stack": "AWS GenAI IDP Accelerator",
    "stride_category": "Tampering",
    "severity": "Medium",
    "resource_type": "AWS::Serverless::Function",
    "resource_name": "ProcessResultsFunction",
    "title": "Missing Input Validation for Document Processing",
    "issue": "The template doesn't show explicit input validation mechanisms for documents being processed, potentially allowing malformed or malicious documents to be processed by the system.",
    "attack_vector": "An attacker could submit specially crafted documents designed to exploit vulnerabilities in the document processing pipeline or downstream systems.",
    "impact": "Potential for code injection, system crashes, or other unexpected behaviors in the document processing pipeline.",
    "remediation": "Implement comprehensive input validation for all incoming documents, including file type validation, size limits, content scanning, and structural validation before processing.",
    "priority": 2,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-20",
    "compliance_violations": ["OWASP ASVS v4.0 5.1.1"],
    "references": ["https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html"],
    "status": "Open"
  }
]