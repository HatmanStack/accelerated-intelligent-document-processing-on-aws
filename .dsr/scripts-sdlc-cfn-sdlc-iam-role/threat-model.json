[
  {
    "id": "SDLC-ROLE-THREAT-001",
    "stack": "sdlc-role",
    "stride_category": "Elevation of Privilege",
    "severity": "High",
    "resource_type": "AWS::IAM::ManagedPolicy",
    "resource_name": "LimitedIAMAccessPolicy",
    "title": "Overly Permissive IAM Permissions",
    "issue": "The LimitedIAMAccessPolicy grants broad IAM permissions with wildcard resources (*), allowing actions that can be used to escalate privileges or create backdoor access paths.",
    "attack_vector": "An attacker who compromises the BuilderRole could create or modify IAM entities with elevated permissions, attach policies to users/groups/roles, or create service-linked roles that persist after the initial compromise.",
    "impact": "Complete account compromise, persistent backdoors, and ability to bypass existing security controls and detection mechanisms.",
    "remediation": "1. Scope down IAM permissions to specific resources using ARN patterns instead of wildcard resources.\n2. Implement condition keys to restrict permissions (e.g., aws:PrincipalArn, aws:SourceIp).\n3. Remove high-risk permissions like IAM user management that aren't needed for SDLC activities.\n4. Consider using AWS permission boundaries to limit maximum permissions.",
    "priority": 1,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-272",
    "compliance_violations": ["CIS AWS Foundations Benchmark 1.16", "AWS Well-Architected Framework - Security Pillar"],
    "references": ["https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html"],
    "status": "Open"
  },
  {
    "id": "SDLC-ROLE-THREAT-002",
    "stack": "sdlc-role",
    "stride_category": "Spoofing",
    "severity": "High",
    "resource_type": "AWS::IAM::Role",
    "resource_name": "BuilderRole",
    "title": "Excessive Service Principals in Trust Policy",
    "issue": "The BuilderRole trust policy allows multiple service principals (ec2, codebuild, cloudformation) to assume the role without conditions, increasing the attack surface for role assumption.",
    "attack_vector": "If any of these services are compromised or misconfigured, an attacker could assume the BuilderRole, gaining extensive permissions provided by PowerUserAccess and the LimitedIAMAccessPolicy.",
    "impact": "Unauthorized access to AWS resources with powerful permissions, allowing potential data exfiltration, resource manipulation, or further privilege escalation.",
    "remediation": "1. Apply strict conditions in the trust policy using aws:SourceArn and aws:SourceAccount.\n2. Separate roles by service for granular permission control.\n3. Use externalId requirements where applicable.\n4. Regularly audit and rotate credentials.",
    "priority": 1,
    "estimated_effort": "Low",
    "cwe_id": "CWE-284",
    "compliance_violations": ["CIS AWS Foundations Benchmark 1.16", "AWS Well-Architected Framework - Security Pillar"],
    "references": ["https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition.html"],
    "status": "Open"
  },
  {
    "id": "SDLC-ROLE-THREAT-003",
    "stack": "sdlc-role",
    "stride_category": "Elevation of Privilege",
    "severity": "High",
    "resource_type": "AWS::IAM::Role",
    "resource_name": "BuilderRole",
    "title": "PowerUserAccess Combined with IAM Permissions",
    "issue": "The BuilderRole combines PowerUserAccess with extensive IAM permissions, creating a role that has near-administrative capabilities without proper isolation or guardrails.",
    "attack_vector": "An attacker who gains access to this role could leverage the combined permissions to create persistent access, modify security controls, and access sensitive data across multiple AWS services.",
    "impact": "Potential for complete account takeover, data breaches, and deployment of malicious resources that could affect production environments.",
    "remediation": "1. Replace PowerUserAccess with more granular, service-specific policies.\n2. Implement permission boundaries to restrict maximum permissions.\n3. Create separate roles for different SDLC stages with decreasing privilege levels.\n4. Implement just-in-time access with temporary credential issuance.",
    "priority": 1,
    "estimated_effort": "High",
    "cwe_id": "CWE-269",
    "compliance_violations": ["CIS AWS Foundations Benchmark 1.22", "AWS Well-Architected Framework - Security Pillar"],
    "references": ["https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#grant-least-privilege"],
    "status": "Open"
  },
  {
    "id": "SDLC-ROLE-THREAT-004",
    "stack": "sdlc-role",
    "stride_category": "Repudiation",
    "severity": "Medium",
    "resource_type": "AWS::IAM::Role",
    "resource_name": "BuilderRole",
    "title": "Missing Logging and Monitoring Requirements",
    "issue": "The template does not include or enforce requirements for CloudTrail, CloudWatch, or other logging and monitoring mechanisms for tracking actions performed by the BuilderRole.",
    "attack_vector": "An attacker who compromises this role could perform malicious actions without being detected, making incident investigation difficult or impossible.",
    "impact": "Inability to detect security incidents, account compromise, or policy violations in a timely manner, and challenges in forensic investigation after a security incident.",
    "remediation": "1. Ensure CloudTrail is enabled with multi-region logging and log file validation.\n2. Set up CloudWatch alarms for critical IAM actions.\n3. Configure AWS Config to monitor policy changes.\n4. Consider integrating with Security Hub and GuardDuty.",
    "priority": 2,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-778",
    "compliance_violations": ["CIS AWS Foundations Benchmark 3.1", "PCI DSS 10.1"],
    "references": ["https://docs.aws.amazon.com/cloudtrail/latest/userguide/best-practices-security.html"],
    "status": "Open"
  },
  {
    "id": "SDLC-ROLE-THREAT-005",
    "stack": "sdlc-role",
    "stride_category": "Tampering",
    "severity": "Medium",
    "resource_type": "AWS::IAM::Role",
    "resource_name": "BuilderRole",
    "title": "Role Allows Self-Modification",
    "issue": "The BuilderRole permissions allow for modification of IAM policies and roles, potentially including itself, which could be used to expand permissions beyond intended scope.",
    "attack_vector": "An authorized user or compromised process could modify the role to grant additional permissions, remove restrictions, or create backdoor access paths.",
    "impact": "Security controls could be subverted, leading to privilege escalation, persistent unauthorized access, or removal of security guardrails.",
    "remediation": "1. Implement a separate admin role for IAM management functions.\n2. Use SCPs to prevent modification of security-critical roles and policies.\n3. Implement strong detective controls for IAM policy changes.\n4. Apply conditions to prevent self-modification of roles.",
    "priority": 2,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-281",
    "compliance_violations": ["CIS AWS Foundations Benchmark 1.16"],
    "references": ["https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scps.html"],
    "status": "Open"
  },
  {
    "id": "SDLC-ROLE-THREAT-006",
    "stack": "sdlc-role",
    "stride_category": "Denial of Service",
    "severity": "Medium",
    "resource_type": "AWS::IAM::ManagedPolicy",
    "resource_name": "LimitedIAMAccessPolicy",
    "title": "Missing Resource Access Controls",
    "issue": "The policy grants delete permissions for critical IAM resources without resource-specific constraints, which could lead to accidental or malicious removal of essential roles or policies.",
    "attack_vector": "An attacker or misconfigured automation tool could delete critical IAM roles, instance profiles, or policies, disrupting application services and CI/CD workflows.",
    "impact": "Service disruption, broken deployments, authentication failures, and significant operational downtime while IAM resources are recreated.",
    "remediation": "1. Implement resource-specific ARNs in policy statements.\n2. Add condition keys to protect critical resources.\n3. Consider implementing resource tagging strategies and tag-based conditions.\n4. Create separate policies for creation vs. deletion operations.",
    "priority": 2,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-732",
    "compliance_violations": ["AWS Well-Architected Framework - Reliability Pillar"],
    "references": ["https://docs.aws.amazon.com/IAM/latest/UserGuide/access_controlling.html"],
    "status": "Open"
  },
  {
    "id": "SDLC-ROLE-THREAT-007",
    "stack": "sdlc-role",
    "stride_category": "Information Disclosure",
    "severity": "Medium",
    "resource_type": "AWS::IAM::ManagedPolicy",
    "resource_name": "LimitedIAMAccessPolicy",
    "title": "Excessive List and Get Permissions",
    "issue": "The policy grants broad list and get permissions (iam:List*, iam:Get*) across all IAM resources, which could expose sensitive IAM configuration information.",
    "attack_vector": "An attacker with access to the role could enumerate all IAM users, roles, policies, and their relationships to map the security posture and identify privilege escalation paths.",
    "impact": "Exposure of security configuration and potential targeting of specific IAM entities for further attacks, including social engineering or targeted privilege escalation.",
    "remediation": "1. Limit list and get permissions to only necessary resources.\n2. Implement condition keys to restrict when these permissions can be used.\n3. Consider implementing session policies for temporary access.",
    "priority": 3,
    "estimated_effort": "Low",
    "cwe_id": "CWE-200",
    "compliance_violations": ["CIS AWS Foundations Benchmark 1.2"],
    "references": ["https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html"],
    "status": "Open"
  }
]