[
  {
    "id": "BEDROCK-KNOWLEDGE-BASE-THREAT-001",
    "stack": "bedrock-knowledge-base",
    "stride_category": "Elevation of Privilege",
    "severity": "High",
    "resource_type": "AWS::IAM::Role",
    "resource_name": "OpenSearchLambdaExecutionRole",
    "title": "Overly Permissive IAM Role Permissions",
    "issue": "The OpenSearchLambdaExecutionRole has overly broad S3 permissions (s3:PutObject*, s3:GetObject*, s3:DeleteObject*) on all S3 buckets (arn:aws:s3:::*)",
    "attack_vector": "An attacker who compromises the Lambda function could access or modify data in any S3 bucket in the account, beyond what's needed for the function's operation",
    "impact": "Unauthorized access to sensitive data across all S3 buckets in the account, potential data exfiltration or corruption",
    "remediation": "Scope S3 permissions to only the specific buckets required for function operation. Replace 'arn:aws:s3:::*' with specific bucket ARNs needed by the Lambda function",
    "priority": 1,
    "estimated_effort": "Low",
    "cwe_id": "CWE-272",
    "compliance_violations": ["CIS AWS Foundations Benchmark 1.16", "AWS Well-Architected Framework SEC02-BP02"],
    "references": ["https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#grant-least-privilege"],
    "status": "Open"
  },
  {
    "id": "BEDROCK-KNOWLEDGE-BASE-THREAT-002",
    "stack": "bedrock-knowledge-base",
    "stride_category": "Elevation of Privilege",
    "severity": "High",
    "resource_type": "AWS::IAM::Role",
    "resource_name": "OpenSearchLambdaExecutionRole",
    "title": "Wildcard Resource Permissions for AWS X-Ray",
    "issue": "The X-Ray permissions in the OpenSearchLambdaExecutionRole policy use a wildcard resource ('*') which grants excessive permissions",
    "attack_vector": "If the Lambda function is compromised, an attacker could leverage these permissions to gain broader access to AWS resources or perform reconnaissance activities",
    "impact": "Potential for privilege escalation and exploitation of compromised credentials across AWS services",
    "remediation": "Review and restrict the X-Ray permissions to only what is necessary for the function's operation. While X-Ray actions often require wildcard resources, ensure the policy follows least privilege principles",
    "priority": 2,
    "estimated_effort": "Low",
    "cwe_id": "CWE-272",
    "compliance_violations": ["CIS AWS Foundations Benchmark 1.16", "AWS Well-Architected Framework SEC02-BP02"],
    "references": ["https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#grant-least-privilege"],
    "status": "Open"
  },
  {
    "id": "BEDROCK-KNOWLEDGE-BASE-THREAT-003",
    "stack": "bedrock-knowledge-base",
    "stride_category": "Elevation of Privilege",
    "severity": "High",
    "resource_type": "AWS::IAM::Role",
    "resource_name": "OpenSearchLambdaExecutionRole",
    "title": "Excessive OpenSearch Serverless Permissions",
    "issue": "The OpenSearchLambdaExecutionRole has broad permissions on OpenSearch Serverless APIs with wildcard resources, exceeding what's likely needed for index management",
    "attack_vector": "An attacker who compromises the Lambda function could manipulate or access any OpenSearch Serverless collection in the account",
    "impact": "Unauthorized access to sensitive data in OpenSearch collections, potential for data exfiltration or tampering",
    "remediation": "Scope down OpenSearch Serverless permissions to only the specific collections needed and only the specific actions required by the function",
    "priority": 2,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-272",
    "compliance_violations": ["CIS AWS Foundations Benchmark 1.16", "AWS Well-Architected Framework SEC02-BP02"],
    "references": ["https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#grant-least-privilege"],
    "status": "Open"
  },
  {
    "id": "BEDROCK-KNOWLEDGE-BASE-THREAT-004",
    "stack": "bedrock-knowledge-base",
    "stride_category": "Information Disclosure",
    "severity": "High",
    "resource_type": "AWS::OpenSearchServerless::SecurityPolicy",
    "resource_name": "OSSNetworkPolicy",
    "title": "OpenSearch Serverless Dashboard Publicly Accessible",
    "issue": "The OpenSearch Serverless network policy is configured with 'AllowFromPublic: true', making the dashboard publicly accessible from the internet",
    "attack_vector": "Anyone on the internet can access the OpenSearch dashboard, which could expose sensitive data or administrative interfaces if authentication is compromised",
    "impact": "Potential unauthorized access to sensitive data, increased attack surface, and violation of security best practices for internal analytics services",
    "remediation": "Set 'AllowFromPublic: false' and implement more restrictive access controls such as VPC endpoints, IP-based restrictions, or IAM-based access",
    "priority": 1,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-284",
    "compliance_violations": ["CIS AWS Foundations Benchmark 2.4", "AWS Well-Architected Framework SEC02-BP03"],
    "references": ["https://docs.aws.amazon.com/opensearch-service/latest/developerguide/security-iam-serverless.html"],
    "status": "Open"
  },
  {
    "id": "BEDROCK-KNOWLEDGE-BASE-THREAT-005",
    "stack": "bedrock-knowledge-base",
    "stride_category": "Repudiation",
    "severity": "Medium",
    "resource_type": "AWS::Serverless::Function",
    "resource_name": "GetAdjustedStackNameFunction",
    "title": "Insufficient Logging Configuration",
    "issue": "Lambda functions have minimal logging configuration and don't implement comprehensive audit trails for actions performed by the functions",
    "attack_vector": "If a security incident occurs, there may be insufficient logs to identify the source, nature, and impact of the incident",
    "impact": "Inability to effectively investigate security incidents, potential compliance violations regarding audit trails",
    "remediation": "Enhance logging by implementing structured logging with AWS Lambda Powertools or similar frameworks, ensure all administrative actions are logged, and consider implementing centralized log management",
    "priority": 3,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-778",
    "compliance_violations": ["CIS AWS Foundations Benchmark 3.1", "AWS Well-Architected Framework SEC04-BP04"],
    "references": ["https://docs.aws.amazon.com/prescriptive-guidance/latest/lambda-powertools/introduction.html"],
    "status": "Open"
  },
  {
    "id": "BEDROCK-KNOWLEDGE-BASE-THREAT-006",
    "stack": "bedrock-knowledge-base",
    "stride_category": "Tampering",
    "severity": "Medium",
    "resource_type": "AWS::OpenSearchServerless::Collection",
    "resource_name": "OSSCollection",
    "title": "Default AWS Owned Encryption Key for OpenSearch Collection",
    "issue": "The OpenSearch Serverless collection uses AWS-owned keys (AWSOwnedKey: true) rather than customer-managed keys for encryption",
    "attack_vector": "If AWS account credentials are compromised, the attacker would have access to both the data and the encryption keys",
    "impact": "Reduced security control over encryption keys, inability to immediately revoke key access in case of compromise, and potential compliance issues for sensitive data",
    "remediation": "Use customer-managed KMS keys (CMK) for encryption by setting AWSOwnedKey to false and providing a KMS key ARN",
    "priority": 3,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-311",
    "compliance_violations": ["AWS Well-Architected Framework SEC07-BP05", "GDPR Article 32"],
    "references": ["https://docs.aws.amazon.com/opensearch-service/latest/developerguide/encryption-at-rest.html"],
    "status": "Open"
  },
  {
    "id": "BEDROCK-KNOWLEDGE-BASE-THREAT-007",
    "stack": "bedrock-knowledge-base",
    "stride_category": "Denial of Service",
    "severity": "Medium",
    "resource_type": "AWS::Serverless::Function",
    "resource_name": "CreateOSSIndexLambdaFunction",
    "title": "Missing Dead Letter Queue for Lambda Functions",
    "issue": "Lambda functions lack Dead Letter Queue (DLQ) configuration for handling failed function executions",
    "attack_vector": "In case of function failures, especially during critical operations like index creation, there is no mechanism to capture and recover from these failures",
    "impact": "Potential service disruptions, loss of operations data, and inability to diagnose and recover from failures",
    "remediation": "Configure a Dead Letter Queue (SQS or SNS) for each Lambda function to capture failed executions and implement proper error handling and recovery mechanisms",
    "priority": 3,
    "estimated_effort": "Low",
    "cwe_id": "CWE-755",
    "compliance_violations": ["AWS Well-Architected Framework REL11-BP04"],
    "references": ["https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq"],
    "status": "Open"
  },
  {
    "id": "BEDROCK-KNOWLEDGE-BASE-THREAT-008",
    "stack": "bedrock-knowledge-base",
    "stride_category": "Elevation of Privilege",
    "severity": "Medium",
    "resource_type": "AWS::IAM::Role",
    "resource_name": "KnowledgeBaseServiceRole",
    "title": "Broad BedrockInvokeModel Permissions",
    "issue": "The KnowledgeBaseServiceRole has permissions to invoke any foundation model in Bedrock (bedrock:InvokeModel on arn:aws:bedrock:${AWS::Region}::foundation-model/*)",
    "attack_vector": "If compromised, an attacker could potentially use any Bedrock model, including those with more capabilities or higher costs than required for the application",
    "impact": "Potential abuse of foundation model access, increased costs, and possible regulatory or compliance issues depending on model outputs",
    "remediation": "Restrict bedrock:InvokeModel permissions to only the specific models needed by specifying exact model ARNs rather than using wildcards",
    "priority": 3,
    "estimated_effort": "Low",
    "cwe_id": "CWE-272",
    "compliance_violations": ["AWS Well-Architected Framework SEC02-BP02"],
    "references": ["https://docs.aws.amazon.com/service-authorization/latest/reference/list_amazonbedrock.html"],
    "status": "Open"
  },
  {
    "id": "BEDROCK-KNOWLEDGE-BASE-THREAT-009",
    "stack": "bedrock-knowledge-base",
    "stride_category": "Tampering",
    "severity": "Low",
    "resource_type": "AWS::Lambda::Function",
    "resource_name": "StartIngestionJobFunction",
    "title": "Excessive Lambda Function Timeout",
    "issue": "The StartIngestionJobFunction has a timeout of 600 seconds (10 minutes), which is significantly higher than likely needed for its task",
    "attack_vector": "A compromised function could run for an extended period, potentially allowing an attacker more time to execute malicious activities or cause denial of service by consuming resources",
    "impact": "Increased resource consumption, higher AWS costs, and extended time window for potential exploitation",
    "remediation": "Set Lambda function timeout to the minimum required duration for its operation, typically starting with 30 seconds and increasing only if needed based on observed execution times",
    "priority": 4,
    "estimated_effort": "Low",
    "cwe_id": "CWE-770",
    "compliance_violations": ["AWS Well-Architected Framework COST03-BP01"],
    "references": ["https://docs.aws.amazon.com/lambda/latest/dg/best-practices.html"],
    "status": "Open"
  },
  {
    "id": "BEDROCK-KNOWLEDGE-BASE-THREAT-010",
    "stack": "bedrock-knowledge-base",
    "stride_category": "Denial of Service",
    "severity": "Low",
    "resource_type": "AWS::Scheduler::Schedule",
    "resource_name": "S3DataSourceScheduler",
    "title": "Missing Concurrency Controls for Scheduled Jobs",
    "issue": "The EventBridge schedulers for data sources lack concurrency controls, which could lead to multiple concurrent ingestion jobs being triggered",
    "attack_vector": "If multiple ingestion jobs run concurrently, they could consume excessive resources, leading to throttling, increased costs, or service degradation",
    "impact": "Potential service disruption, increased API rate limiting, and higher costs due to concurrent resource usage",
    "remediation": "Implement mechanisms to ensure only one ingestion job runs at a time, such as using DynamoDB for distributed locking or implementing state checks before starting new jobs",
    "priority": 4,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-770",
    "compliance_violations": ["AWS Well-Architected Framework REL06-BP03"],
    "references": ["https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html#rate-based"],
    "status": "Open"
  }
]