[
  {
    "id": "PATTERN3-THREAT-001",
    "stack": "pattern3",
    "stride_category": "Elevation of Privilege",
    "severity": "High",
    "resource_type": "AWS::IAM::Policy",
    "resource_name": "Multiple Lambda Policies",
    "title": "Overly Permissive Bedrock Model Access",
    "issue": "Lambda functions have permissions to invoke any Bedrock foundation model using a wildcard resource policy (`arn:aws:bedrock:*::foundation-model/*`). This creates an unnecessarily broad permission scope.",
    "attack_vector": "An attacker who compromises a Lambda function could invoke any Bedrock model, potentially bypassing intended restrictions and accessing more powerful or costly models than intended.",
    "impact": "Unauthorized model usage, potential cost implications, ability to bypass intended service restrictions.",
    "remediation": "Restrict Bedrock model access to only the specific models required by each function. Replace the wildcard with specific model ARNs like `arn:aws:bedrock:region::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0`.",
    "priority": 1,
    "estimated_effort": "Low",
    "cwe_id": "CWE-284",
    "compliance_violations": ["CIS AWS Foundations Benchmark 1.16"],
    "references": ["https://docs.aws.amazon.com/bedrock/latest/userguide/security_iam_service-with-iam.html"],
    "status": "Open"
  },
  {
    "id": "PATTERN3-THREAT-002",
    "stack": "pattern3",
    "stride_category": "Information Disclosure",
    "severity": "Medium",
    "resource_type": "AWS::S3::Bucket",
    "resource_name": "Multiple S3 Buckets",
    "title": "Missing S3 Bucket Encryption Configuration",
    "issue": "S3 buckets referenced as parameters (InputBucket, ConfigurationBucket, OutputBucket, WorkingBucket) do not have explicit server-side encryption defined in this template. While encryption keys are passed as parameters, the template doesn't enforce bucket encryption.",
    "attack_vector": "If the referenced buckets are not properly encrypted elsewhere, sensitive data stored in these buckets could be accessed in plaintext if the bucket is compromised.",
    "impact": "Potential exposure of sensitive document data, extraction results, or configuration information.",
    "remediation": "Ensure all S3 buckets have default encryption enabled with the KMS key referenced in CustomerManagedEncryptionKeyArn parameter. If buckets are created in another template, verify encryption is applied there.",
    "priority": 2,
    "estimated_effort": "Low",
    "cwe_id": "CWE-311",
    "compliance_violations": ["CIS AWS Foundations Benchmark 2.1.1", "GDPR Article 32", "PCI DSS 3.4"],
    "references": ["https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucket-encryption.html"],
    "status": "Open"
  },
  {
    "id": "PATTERN3-THREAT-003",
    "stack": "pattern3",
    "stride_category": "Repudiation",
    "severity": "Medium",
    "resource_type": "AWS::Serverless::Function",
    "resource_name": "OCRFunction, ClassificationFunction, ExtractionFunction, AssessmentFunction, ProcessResultsFunction, SummarizationFunction",
    "title": "Insufficient Request Tracing",
    "issue": "The Lambda functions handle document processing in a workflow, but there's no consistent request tracing mechanism implemented. While logging is configured, there's no distributed tracing solution to track requests across services.",
    "attack_vector": "Without proper tracing, it would be difficult to reconstruct attack paths or understand the sequence of events during a security incident investigation.",
    "impact": "Reduced ability to detect, investigate, and respond to security incidents. Difficulty in tracking document flow through the system.",
    "remediation": "Implement AWS X-Ray tracing for all Lambda functions and the Step Functions state machine. Add the X-Ray active tracing configuration to each Lambda function and include a tracing policy.",
    "priority": 3,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-778",
    "compliance_violations": ["SOC 2 CC5.2", "NIST SP 800-53 AU-12"],
    "references": ["https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html"],
    "status": "Open"
  },
  {
    "id": "PATTERN3-THREAT-004",
    "stack": "pattern3",
    "stride_category": "Tampering",
    "severity": "Medium",
    "resource_type": "AWS::Serverless::Function",
    "resource_name": "All Lambda Functions",
    "title": "Missing Input Validation",
    "issue": "The template creates Lambda functions for document processing but doesn't include any indication of input validation mechanisms. Without proper validation, the functions may process malicious or malformed inputs.",
    "attack_vector": "An attacker could submit specially crafted documents or manipulated inputs to trigger errors, cause unexpected behavior, or potentially execute code injection attacks.",
    "impact": "Potential for data corruption, system crashes, or bypass of processing controls.",
    "remediation": "Implement robust input validation in all Lambda functions. Validate document formats, sizes, content types, and parameters before processing. Consider using AWS Lambda Layers to share common validation libraries across functions.",
    "priority": 2,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-20",
    "compliance_violations": ["OWASP API Security Top 10 API1:2023"],
    "references": ["https://owasp.org/www-project-api-security/"],
    "status": "Open"
  },
  {
    "id": "PATTERN3-THREAT-005",
    "stack": "pattern3",
    "stride_category": "Denial of Service",
    "severity": "Medium",
    "resource_type": "AWS::Serverless::Function",
    "resource_name": "All Lambda Functions",
    "title": "Missing Lambda Concurrency Controls",
    "issue": "None of the Lambda functions have reserved concurrency limits defined, which could lead to resource exhaustion under heavy load or during a DoS attack.",
    "attack_vector": "An attacker could trigger many concurrent Lambda invocations, potentially exhausting account quotas and impacting other functions or services in the same AWS account.",
    "impact": "Service degradation, increased latency, potential system unavailability, or throttling of other critical services.",
    "remediation": "Implement reserved concurrency limits for all Lambda functions based on expected usage patterns. Consider setting provisioned concurrency for critical functions to ensure consistent performance.",
    "priority": 3,
    "estimated_effort": "Low",
    "cwe_id": "CWE-770",
    "compliance_violations": ["SOC 2 CC7.1"],
    "references": ["https://docs.aws.amazon.com/lambda/latest/dg/configuration-concurrency.html"],
    "status": "Open"
  },
  {
    "id": "PATTERN3-THREAT-006",
    "stack": "pattern3",
    "stride_category": "Information Disclosure",
    "severity": "Medium",
    "resource_type": "AWS::Serverless::Function",
    "resource_name": "All Lambda Functions",
    "title": "Sensitive Data in Environment Variables",
    "issue": "Lambda functions use environment variables for configuration, including API URLs and feature flags. While not directly exposing credentials, these values could provide attackers with information about the system architecture.",
    "attack_vector": "If a function is compromised, an attacker could access environment variables to gain information about the overall system configuration and other connected services.",
    "impact": "Information disclosure that could facilitate further attacks against the system.",
    "remediation": "Use AWS Systems Manager Parameter Store or AWS Secrets Manager for sensitive configuration values instead of environment variables. For any values that must remain in environment variables, ensure they are encrypted.",
    "priority": 3,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-527",
    "compliance_violations": ["NIST SP 800-53 SC-28"],
    "references": ["https://docs.aws.amazon.com/lambda/latest/dg/security-dataprotection.html"],
    "status": "Open"
  },
  {
    "id": "PATTERN3-THREAT-007",
    "stack": "pattern3",
    "stride_category": "Elevation of Privilege",
    "severity": "Medium",
    "resource_type": "AWS::Serverless::Function",
    "resource_name": "OCRFunction",
    "title": "Overly Permissive Textract Permissions",
    "issue": "The OCRFunction has permissions to use any Textract API on any resource ('*') which violates the principle of least privilege.",
    "attack_vector": "If the Lambda function is compromised, an attacker could leverage these broad Textract permissions to analyze documents outside the intended scope or use additional Textract features not required by the application.",
    "impact": "Potential unauthorized access to document data, increased AWS costs from unintended API usage.",
    "remediation": "Restrict Textract permissions to only the specific APIs needed (DetectDocumentText and AnalyzeDocument). While Textract doesn't support resource-level permissions, condition keys can be used to add constraints based on request parameters.",
    "priority": 2,
    "estimated_effort": "Low",
    "cwe_id": "CWE-272",
    "compliance_violations": ["CIS AWS Foundations Benchmark 1.16"],
    "references": ["https://docs.aws.amazon.com/textract/latest/dg/security_iam_service-with-iam.html"],
    "status": "Open"
  },
  {
    "id": "PATTERN3-THREAT-008",
    "stack": "pattern3",
    "stride_category": "Repudiation",
    "severity": "Low",
    "resource_type": "AWS::CloudWatch::Dashboard",
    "resource_name": "Dashboard",
    "title": "Missing Alarm Configuration for Security Events",
    "issue": "While a CloudWatch dashboard is created for monitoring system performance, there are no alarm configurations for security-related events or anomalies. This limits the ability to detect and respond to potential security incidents.",
    "attack_vector": "Security incidents might go undetected or be noticed too late if there are no automated alerts for suspicious patterns or events.",
    "impact": "Delayed incident response, increased dwell time for attackers, potentially larger impact from security incidents.",
    "remediation": "Create CloudWatch Alarms for security-relevant metrics such as access denied events, unusual API call patterns, high error rates, or unexpected spikes in resource usage. Configure notifications to appropriate security personnel.",
    "priority": 3,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-778",
    "compliance_violations": ["NIST SP 800-53 SI-4"],
    "references": ["https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html"],
    "status": "Open"
  },
  {
    "id": "PATTERN3-THREAT-009",
    "stack": "pattern3",
    "stride_category": "Tampering",
    "severity": "Low",
    "resource_type": "AWS::Serverless::StateMachine",
    "resource_name": "DocumentProcessingStateMachine",
    "title": "No State Machine Input Validation",
    "issue": "The State Machine workflow processes input documents but lacks input validation steps at the beginning of the workflow to verify input format and content.",
    "attack_vector": "An attacker could submit malformed or malicious input data to the state machine that might bypass application-level validations in downstream components.",
    "impact": "Potential processing of invalid or malicious documents, which could lead to unexpected behavior, errors, or security issues in downstream processing.",
    "remediation": "Add an initial validation step in the state machine workflow that performs basic validation of the input structure and format before proceeding with document processing.",
    "priority": 3,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-20",
    "compliance_violations": ["OWASP API Security Top 10 API1:2023"],
    "references": ["https://docs.aws.amazon.com/step-functions/latest/dg/concepts-input-output-filtering.html"],
    "status": "Open"
  },
  {
    "id": "PATTERN3-THREAT-010",
    "stack": "pattern3",
    "stride_category": "Denial of Service",
    "severity": "Medium",
    "resource_type": "AWS::Serverless::Function",
    "resource_name": "Multiple Lambda Functions",
    "title": "Missing Dead Letter Queue Configuration",
    "issue": "The Lambda functions do not have Dead Letter Queues (DLQs) configured to capture failed executions. Failed processing could lead to lost documents or incomplete workflows without proper notification.",
    "attack_vector": "An attacker could exploit input validation flaws to cause Lambda failures that go unnoticed, potentially leading to loss of document processing capabilities or incomplete processing of critical documents.",
    "impact": "Silent failures, lost documents, incomplete processing workflows, and reduced system reliability.",
    "remediation": "Configure DLQs (SQS or SNS) for all Lambda functions to capture and handle failed executions. Implement automated monitoring and alerting for DLQ messages.",
    "priority": 2,
    "estimated_effort": "Low",
    "cwe_id": "CWE-755",
    "compliance_violations": ["SOC 2 CC7.1"],
    "references": ["https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq"],
    "status": "Open"
  },
  {
    "id": "PATTERN3-THREAT-011",
    "stack": "pattern3",
    "stride_category": "Information Disclosure",
    "severity": "High",
    "resource_type": "AWS::Serverless::Function",
    "resource_name": "All Lambda Functions with Bedrock Access",
    "title": "Missing Data Protection Controls for LLM Prompts",
    "issue": "The Lambda functions that interact with Bedrock models don't implement proper prompt injection protections or data sanitization. This could lead to prompt injection attacks or unintended data disclosure to LLMs.",
    "attack_vector": "An attacker could craft documents with malicious content designed to manipulate LLM prompts, potentially extracting sensitive information from the system or causing the model to generate harmful outputs.",
    "impact": "Data leakage, prompt injection attacks, generation of misleading or harmful content, or manipulation of document processing results.",
    "remediation": "Implement robust input sanitization for all content sent to LLMs. Use Bedrock guardrails consistently across all functions that access LLMs. Add a prompt security layer that validates and sanitizes inputs before they reach the model.",
    "priority": 1,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-74",
    "compliance_violations": ["OWASP Top 10 for LLM Applications"],
    "references": ["https://owasp.org/www-project-top-10-for-large-language-model-applications/"],
    "status": "Open"
  }
]