[
  {
    "id": "GENAI-IDP-THREAT-001",
    "stack": "genai-idp",
    "stride_category": "Information Disclosure",
    "severity": "High",
    "resource_type": "AWS::CloudFront::Distribution",
    "resource_name": "CloudFrontDistribution",
    "title": "CloudFront Distribution Uses Default SSL Certificate",
    "issue": "The CloudFront distribution is configured with CloudFrontDefaultCertificate set to true, which means it's using the default *.cloudfront.net domain and certificate. This can make the application susceptible to phishing attacks as users have no way to verify the authenticity of the domain.",
    "attack_vector": "An attacker could create a similarly named domain with a valid SSL certificate to trick users into providing their credentials or sensitive information.",
    "impact": "Users may be more vulnerable to phishing attacks, potentially leading to credential theft and unauthorized access to the system.",
    "remediation": "Use a custom SSL certificate with AWS Certificate Manager (ACM) and configure a custom domain name for the CloudFront distribution. Update the ViewerCertificate configuration to use ACM certificate instead of the default certificate.",
    "priority": 2,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-295",
    "compliance_violations": ["PCI DSS 4.1", "HIPAA Technical Safeguards"],
    "references": ["https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-alternate-domain-names.html"],
    "status": "Open"
  },
  {
    "id": "GENAI-IDP-THREAT-002",
    "stack": "genai-idp",
    "stride_category": "Information Disclosure",
    "severity": "Medium",
    "resource_type": "AWS::AppSync::GraphQLApi",
    "resource_name": "GraphQLApi",
    "title": "AppSync API Accessible Without WAF When WAF Is Disabled",
    "issue": "The AppSync GraphQL API has conditional WAF protection based on the WAFAllowedIPv4Ranges parameter. When set to '0.0.0.0/0', WAF is disabled. This means the API could be accessible from anywhere on the internet without IP restrictions.",
    "attack_vector": "Without WAF protection, attackers can freely access and potentially exploit the GraphQL API from any source IP address, potentially leading to data exposure or unauthorized operations.",
    "impact": "Increased risk of API abuse, data scraping, or exploitation of any API vulnerabilities, which could lead to unauthorized access to sensitive document processing data.",
    "remediation": "Remove the condition that disables WAF when the IP range is set to '0.0.0.0/0'. Instead, always enable WAF with appropriate rule sets, and offer IP restriction as an additional layer of security rather than a replacement for WAF.",
    "priority": 2,
    "estimated_effort": "Low",
    "cwe_id": "CWE-306",
    "compliance_violations": ["NIST 800-53 SC-7", "CIS AWS Foundations 2.4"],
    "references": ["https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html"],
    "status": "Open"
  },
  {
    "id": "GENAI-IDP-THREAT-003",
    "stack": "genai-idp",
    "stride_category": "Tampering",
    "severity": "High",
    "resource_type": "AWS::Cognito::UserPool",
    "resource_name": "UserPool",
    "title": "Cognito User Pool MFA Not Enabled",
    "issue": "The Cognito UserPool is configured without Multi-Factor Authentication (MFA). MFA is not required or enforced for users, which significantly reduces the security of user authentication.",
    "attack_vector": "An attacker who compromises user credentials would be able to access the system without needing to bypass an additional authentication factor.",
    "impact": "Increased risk of unauthorized access to the system, potentially leading to data breaches or compromise of the IDP processing pipeline.",
    "remediation": "Enable MFA for the Cognito UserPool by adding MfaConfiguration set to 'ON' or 'OPTIONAL' and configuring appropriate MFA options. Consider enforcing MFA for all users, especially administrators.",
    "priority": 1,
    "estimated_effort": "Low",
    "cwe_id": "CWE-308",
    "compliance_violations": ["PCI DSS 8.3", "NIST 800-53 IA-2(1)", "CIS AWS Foundations 1.10"],
    "references": ["https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-mfa.html"],
    "status": "Open"
  },
  {
    "id": "GENAI-IDP-THREAT-004",
    "stack": "genai-idp",
    "stride_category": "Elevation of Privilege",
    "severity": "High",
    "resource_type": "AWS::IAM::Role",
    "resource_name": "AppSyncServiceRole",
    "title": "Over-Privileged AppSync Service Role",
    "issue": "The AppSyncServiceRole has broad permissions with wildcard resources for various actions, including access to KMS keys and Lambda functions. This violates the principle of least privilege and could allow unintended access across services.",
    "attack_vector": "If the AppSync service is compromised, an attacker could leverage the excessive permissions to access multiple resources or escalate privileges further within the AWS account.",
    "impact": "Potential for lateral movement within the AWS environment, accessing sensitive data or performing unauthorized operations across multiple services.",
    "remediation": "Refine IAM policies to scope down permissions to specific resources rather than using wildcards. For each Lambda function or resource, create specific permission statements with exact ARNs rather than using broader resource patterns.",
    "priority": 1,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-272",
    "compliance_violations": ["CIS AWS Foundations 1.16", "NIST 800-53 AC-6"],
    "references": ["https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#grant-least-privilege"],
    "status": "Open"
  },
  {
    "id": "GENAI-IDP-THREAT-005",
    "stack": "genai-idp",
    "stride_category": "Denial of Service",
    "severity": "Medium",
    "resource_type": "AWS::AppSync::GraphQLApi",
    "resource_name": "GraphQLApi",
    "title": "Missing Query Depth and Complexity Limits on GraphQL API",
    "issue": "The GraphQL API does not have defined query depth limits or complexity analysis, which could allow attackers to craft resource-intensive queries that could overwhelm the service.",
    "attack_vector": "An attacker could send deeply nested or highly complex GraphQL queries that consume excessive server resources, potentially causing service degradation or denial of service.",
    "impact": "Potential for API performance degradation or complete unavailability, affecting the entire document processing pipeline and user experience.",
    "remediation": "Implement query complexity analysis and depth limiting for the GraphQL API. Consider using AWS WAF rate limiting rules specifically for the AppSync endpoint to prevent abuse.",
    "priority": 2,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-400",
    "compliance_violations": ["NIST 800-53 SC-5"],
    "references": ["https://docs.aws.amazon.com/appsync/latest/devguide/security.html"],
    "status": "Open"
  },
  {
    "id": "GENAI-IDP-THREAT-006",
    "stack": "genai-idp",
    "stride_category": "Repudiation",
    "severity": "Medium",
    "resource_type": "AWS::AppSync::GraphQLApi",
    "resource_name": "GraphQLApi",
    "title": "GraphQL API Field-Level Logging Not Always Set to ALL",
    "issue": "The GraphQL API field-level logging is conditionally set based on the LogLevel parameter. When set to WARN, ERROR, or CRITICAL, the field-level logging is set to ERROR only, which means some operations may not be fully logged.",
    "attack_vector": "An attacker performing reconnaissance or initial probing might not generate ERROR-level logs, making their activities harder to detect when the system is configured with WARN or higher log levels.",
    "impact": "Reduced ability to detect, investigate, and respond to security incidents, potentially allowing malicious activities to go unnoticed.",
    "remediation": "Consider always setting field-level logging to ALL regardless of the general logging level to ensure comprehensive audit trails for security monitoring. Create separate log filters for operational purposes if log volume is a concern.",
    "priority": 2,
    "estimated_effort": "Low",
    "cwe_id": "CWE-778",
    "compliance_violations": ["PCI DSS 10.2", "NIST 800-53 AU-2"],
    "references": ["https://docs.aws.amazon.com/appsync/latest/devguide/monitoring.html"],
    "status": "Open"
  },
  {
    "id": "GENAI-IDP-THREAT-007",
    "stack": "genai-idp",
    "stride_category": "Information Disclosure",
    "severity": "Medium",
    "resource_type": "AWS::SQS::Queue",
    "resource_name": "DocumentQueue",
    "title": "SQS Queue Could Be More Restrictive",
    "issue": "The DocumentQueue and other SQS queues have policies that only enforce SSL/TLS connections but do not implement strict resource-based policies to limit which principals can interact with the queues.",
    "attack_vector": "If an IAM role or user has overly permissive SQS permissions, they could potentially read messages from or send messages to these queues, even if that wasn't intended.",
    "impact": "Potential unauthorized access to document processing pipeline, which could lead to information disclosure or pipeline manipulation.",
    "remediation": "Enhance SQS queue policies to explicitly limit access to only the specific IAM roles and services that require it. Add explicit Deny statements for principals not in the allowed list.",
    "priority": 3,
    "estimated_effort": "Low",
    "cwe_id": "CWE-732",
    "compliance_violations": ["CIS AWS Foundations 2.12"],
    "references": ["https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-security-best-practices.html"],
    "status": "Open"
  },
  {
    "id": "GENAI-IDP-THREAT-008",
    "stack": "genai-idp",
    "stride_category": "Elevation of Privilege",
    "severity": "High",
    "resource_type": "AWS::IAM::Role",
    "resource_name": "CognitoClientUpdaterRole",
    "title": "IAM Role with Broad Permissions and Resource Wildcards",
    "issue": "The CognitoClientUpdaterRole has permissions with wildcard resource specifiers for critical operations like 'cognito-idp:UpdateUserPoolClient' and 'sagemaker:DescribeWorkteam'. This violates the principle of least privilege by allowing access to all resources of these types.",
    "attack_vector": "If compromised, an attacker could use this role to modify any Cognito user pool client in the account or access information about any SageMaker workteam.",
    "impact": "Potential unauthorized modifications to authentication systems or access to sensitive workteam information across the entire AWS account.",
    "remediation": "Modify the IAM policy to restrict permissions to specific resources by replacing '*' wildcards with specific ARNs for the Cognito user pools and SageMaker workteams that this role needs to access.",
    "priority": 1,
    "estimated_effort": "Low",
    "cwe_id": "CWE-269",
    "compliance_violations": ["CIS AWS Foundations 1.16", "NIST 800-53 AC-6"],
    "references": ["https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#grant-least-privilege"],
    "status": "Open"
  },
  {
    "id": "GENAI-IDP-THREAT-009",
    "stack": "genai-idp",
    "stride_category": "Spoofing",
    "severity": "Medium",
    "resource_type": "AWS::Cognito::UserPoolClient",
    "resource_name": "UserPoolClient",
    "title": "Short-lived Cognito Token Refresh Window",
    "issue": "The Cognito UserPoolClient has RefreshTokenValidity set to 30 days, but AccessTokenValidity and IdTokenValidity are both set to only 1 hour. This short validity window could lead to frequent re-authentication needs and potential session handling issues.",
    "attack_vector": "If the application doesn't properly handle token refresh, users might be prompted to re-authenticate frequently, potentially leading to authentication fatigue where users choose weaker passwords or become more susceptible to phishing.",
    "impact": "Increased user frustration and potential for phishing attacks targeting users who are frequently asked to re-authenticate.",
    "remediation": "Consider increasing the AccessTokenValidity and IdTokenValidity to a more reasonable duration (e.g., 1 day) while ensuring the application properly handles token refresh before expiration.",
    "priority": 3,
    "estimated_effort": "Low",
    "cwe_id": "CWE-613",
    "compliance_violations": [],
    "references": ["https://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-user-pools-using-tokens-with-identity-providers.html"],
    "status": "Open"
  },
  {
    "id": "GENAI-IDP-THREAT-010",
    "stack": "genai-idp",
    "stride_category": "Elevation of Privilege",
    "severity": "Medium",
    "resource_type": "AWS::IAM::Role",
    "resource_name": "StartUICodeBuildExecutionRole",
    "title": "Lambda Role with Permissions to Modify Event Rules and Lambda Permissions",
    "issue": "The StartUICodeBuildExecutionRole has permissions to create and delete EventBridge rules and add/remove Lambda permissions for any Lambda function. These powerful permissions could be abused for privilege escalation.",
    "attack_vector": "If this Lambda function is compromised, an attacker could create event rules that trigger other functions or add permissions allowing external services to invoke Lambda functions.",
    "impact": "Potential for privilege escalation and unauthorized configuration changes that could lead to persistent access or service disruption.",
    "remediation": "Scope down the permissions to specific resource ARNs rather than using wildcards. Limit the lambda:AddPermission and lambda:RemovePermission actions to only the specific Lambda functions that need these permissions modified.",
    "priority": 2,
    "estimated_effort": "Low",
    "cwe_id": "CWE-269",
    "compliance_violations": ["CIS AWS Foundations 1.16"],
    "references": ["https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#grant-least-privilege"],
    "status": "Open"
  },
  {
    "id": "GENAI-IDP-THREAT-011",
    "stack": "genai-idp",
    "stride_category": "Information Disclosure",
    "severity": "Medium",
    "resource_type": "AWS::S3::Bucket",
    "resource_name": "InputBucket, OutputBucket, ConfigurationBucket",
    "title": "CORs Configuration Allows localhost Development Access",
    "issue": "The CORS configuration for several S3 buckets includes 'http://localhost:3000' as an allowed origin. While useful for development, this should not be present in production deployments as it may facilitate cross-origin attacks.",
    "attack_vector": "An attacker who can trick a user into accessing a malicious site on their localhost could potentially access resources from these buckets through the browser, bypassing same-origin policies.",
    "impact": "Potential for cross-origin attacks that could expose sensitive data from S3 buckets when users have local applications running.",
    "remediation": "Remove 'http://localhost:3000' from the AllowedOrigins list in production deployments. Consider using a parameter to conditionally include this only in development environments.",
    "priority": 3,
    "estimated_effort": "Low",
    "cwe_id": "CWE-346",
    "compliance_violations": ["OWASP Top 10 A5:2017"],
    "references": ["https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html"],
    "status": "Open"
  },
  {
    "id": "GENAI-IDP-THREAT-012",
    "stack": "genai-idp",
    "stride_category": "Repudiation",
    "severity": "Medium",
    "resource_type": "AWS::Logs::LogGroup",
    "resource_name": "Multiple LogGroups",
    "title": "Log Retention Period May Be Too Short for Compliance",
    "issue": "The LogRetentionDays parameter allows setting log retention as low as 1 day, which may be insufficient for security investigation and compliance requirements. Many regulatory frameworks require logs to be kept for much longer periods.",
    "attack_vector": "Attackers who compromise the system could evade detection if logs are rotated quickly, as evidence of their activities would be deleted.",
    "impact": "Reduced ability to investigate security incidents after they occur and potential non-compliance with regulatory requirements for log retention.",
    "remediation": "Set a higher minimum value for the LogRetentionDays parameter (e.g., at least 90 days) to ensure sufficient time for security investigations. Consider archiving logs to more cost-effective storage for longer retention.",
    "priority": 2,
    "estimated_effort": "Low",
    "cwe_id": "CWE-778",
    "compliance_violations": ["PCI DSS 10.7", "NIST 800-53 AU-11", "HIPAA 164.312(b)"],
    "references": ["https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/WhatIsCloudWatchLogs.html"],
    "status": "Open"
  },
  {
    "id": "GENAI-IDP-THREAT-013",
    "stack": "genai-idp",
    "stride_category": "Denial of Service",
    "severity": "Medium",
    "resource_type": "AWS::SQS::Queue",
    "resource_name": "DocumentQueue",
    "title": "SQS Queue Vulnerable to Message Flooding",
    "issue": "The DocumentQueue has no specific protection against message flooding. While SQS has built-in throttling, additional safeguards like queue quotas or throttling at the application level are not implemented.",
    "attack_vector": "An attacker with permissions to send messages to SQS could flood the queue with messages, potentially causing processing delays, increased costs, or resource exhaustion.",
    "impact": "Potential degradation of document processing service, delayed processing, and increased AWS costs.",
    "remediation": "Implement a throttling mechanism before messages are sent to SQS, such as a Lambda concurrency limit or API Gateway throttling. Consider adding CloudWatch alarms for queue metrics to detect unusual patterns.",
    "priority": 3,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-400",
    "compliance_violations": ["NIST 800-53 SC-5"],
    "references": ["https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/quotas-messages.html"],
    "status": "Open"
  },
  {
    "id": "GENAI-IDP-THREAT-014",
    "stack": "genai-idp",
    "stride_category": "Tampering",
    "severity": "High",
    "resource_type": "AWS::Cognito::UserPool",
    "resource_name": "UserPool",
    "title": "Default Email Configuration May Use Unverified Sender Addresses",
    "issue": "The UserPool uses the default Cognito email configuration (EmailSendingAccount: COGNITO_DEFAULT) without specifying custom verified email addresses. This can lead to emails being sent from generic AWS addresses, which may look suspicious and increase phishing risks.",
    "attack_vector": "Attackers could send phishing emails that mimic the generic AWS Cognito emails, making it harder for users to distinguish legitimate communications from phishing attempts.",
    "impact": "Increased risk of successful phishing attacks against users, potentially leading to credential theft and unauthorized system access.",
    "remediation": "Configure a custom email sender with SES by setting EmailSendingAccount to DEVELOPER and providing verified SES email configuration, including customized FROM and REPLY-TO addresses that match your organization's domain.",
    "priority": 2,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-290",
    "compliance_violations": ["NIST 800-53 IA-8"],
    "references": ["https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-email.html"],
    "status": "Open"
  },
  {
    "id": "GENAI-IDP-THREAT-015",
    "stack": "genai-idp",
    "stride_category": "Information Disclosure",
    "severity": "Medium",
    "resource_type": "AWS::AppSync::GraphQLSchema",
    "resource_name": "GraphQLSchema",
    "title": "GraphQL Schema Introspection Enabled",
    "issue": "While IntrospectionConfig is set to DISABLED, which is good, the template references an external schema file that may not have proper field-level authorization controls. Without examining the actual schema, there's a risk that certain fields might be accessible without proper authorization.",
    "attack_vector": "An attacker with limited permissions could potentially query fields or mutations they shouldn't have access to if the schema doesn't implement proper authorization directives.",
    "impact": "Potential exposure of sensitive data or operations to users who shouldn't have access to them.",
    "remediation": "Review the GraphQL schema to ensure all sensitive fields and operations have proper @auth directives or resolver-level authorization checks. Consider implementing a security review process for schema changes.",
    "priority": 2,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-306",
    "compliance_violations": ["OWASP API Security 5:2019"],
    "references": ["https://docs.aws.amazon.com/appsync/latest/devguide/security.html"],
    "status": "Open"
  },
  {
    "id": "GENAI-IDP-THREAT-016",
    "stack": "genai-idp",
    "stride_category": "Tampering",
    "severity": "Critical",
    "resource_type": "Multiple Lambda Functions",
    "resource_name": "Pattern1STACK, Pattern2STACK, Pattern3STACK",
    "title": "Potential Code Injection in Nested CloudFormation Templates",
    "issue": "The template uses multiple nested CloudFormation stacks (PATTERN1STACK, PATTERN2STACK, PATTERN3STACK) without validating the integrity of these templates. If these template sources are compromised, they could contain malicious code that would be executed with the permissions of the IAM roles created.",
    "attack_vector": "If an attacker can modify the source of the nested templates or if the source repository is compromised, they could inject malicious code that would be executed with the permissions granted to the various IAM roles.",
    "impact": "Potential for complete compromise of the AWS account, unauthorized data access, and persistent backdoor installation.",
    "remediation": "Implement template validation using AWS CloudFormation Guard or similar tools. Add integrity checks for nested templates. Consider using AWS CloudFormation registry for storing validated templates. Ensure all template sources are from trusted, secure locations with appropriate access controls.",
    "priority": 1,
    "estimated_effort": "High",
    "cwe_id": "CWE-94",
    "compliance_violations": ["CIS AWS Foundations 1.20", "NIST 800-53 SI-3"],
    "references": ["https://docs.aws.amazon.com/cloudformation-cli/latest/userguide/resource-type-schema.html"],
    "status": "Open"
  },
  {
    "id": "GENAI-IDP-THREAT-017",
    "stack": "genai-idp",
    "stride_category": "Tampering",
    "severity": "High",
    "resource_type": "AWS::Lambda::Function",
    "resource_name": "AnalyticsProcessorFunction",
    "title": "AI Model Access Without Guardrails",
    "issue": "The AnalyticsProcessorFunction and several other functions have permissions to invoke any foundation model in Amazon Bedrock with 'bedrock:InvokeModel' permissions on 'arn:aws:bedrock:*::foundation-model/*'. This broad access could lead to prompt injection vulnerabilities or uncontrolled AI outputs.",
    "attack_vector": "An attacker who can control input to these functions could potentially craft prompts that bypass intended guardrails or extract sensitive information through carefully crafted prompts.",
    "impact": "Potential for data exfiltration, generation of harmful content, or bypassing of business logic through AI model manipulation.",
    "remediation": "Restrict bedrock:InvokeModel permissions to specific models that are required. Always implement guardrails for AI model access, particularly when user input may influence prompts. Add Bedrock guardrails to all model invocations and restrict output handling.",
    "priority": 1,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-20",
    "compliance_violations": ["NIST AI Risk Management Framework"],
    "references": ["https://docs.aws.amazon.com/bedrock/latest/userguide/security_iam_id-based-policy-examples.html"],
    "status": "Open"
  },
  {
    "id": "GENAI-IDP-THREAT-018",
    "stack": "genai-idp",
    "stride_category": "Information Disclosure",
    "severity": "Low",
    "resource_type": "AWS::CloudFormation::CustomResource",
    "resource_name": "CognitoClientCustomResource",
    "title": "Potential Secret Exposure in Logs",
    "issue": "The CognitoClientUpdaterFunction and other custom resource handlers may log sensitive information during execution. The template doesn't explicitly implement log filtering or sanitization for these custom resources.",
    "attack_vector": "An attacker with access to CloudWatch logs could potentially extract sensitive information like Cognito client secrets or other credentials that may be logged during function execution.",
    "impact": "Potential exposure of credentials or sensitive configuration data that could be used for unauthorized access.",
    "remediation": "Ensure all custom resource handlers implement proper log filtering to prevent logging of sensitive values. Consider implementing a centralized logging solution with automated sensitive data detection and redaction.",
    "priority": 3,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-532",
    "compliance_violations": ["PCI DSS 3.5"],
    "references": ["https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/mask-sensitive-log-data.html"],
    "status": "Open"
  },
  {
    "id": "GENAI-IDP-THREAT-019",
    "stack": "genai-idp",
    "stride_category": "Elevation of Privilege",
    "severity": "Medium",
    "resource_type": "AWS::Lambda::Function",
    "resource_name": "AnalyticsProcessorFunction",
    "title": "Extensive Permissions for Code Interpreter",
    "issue": "The AnalyticsProcessorFunction is granted extensive permissions to start and use Bedrock's code interpreter functionality with minimal restrictions. This could be abused if the function's input is compromised.",
    "attack_vector": "If an attacker can control the input to the analytics processor function, they might be able to execute arbitrary code through the code interpreter, potentially accessing or modifying resources beyond intended boundaries.",
    "impact": "Potential for code execution that could lead to data access, policy manipulation, or other unauthorized actions within the boundaries of the function's IAM permissions.",
    "remediation": "Implement strict input validation for all user-provided content that might influence code interpreter execution. Consider implementing additional sandboxing or approval workflows for code interpreter operations.",
    "priority": 2,
    "estimated_effort": "Medium",
    "cwe_id": "CWE-94",
    "compliance_violations": ["NIST 800-53 AC-3"],
    "references": ["https://docs.aws.amazon.com/bedrock/latest/userguide/model-parameters.html"],
    "status": "Open"
  },
  {
    "id": "GENAI-IDP-THREAT-020",
    "stack": "genai-idp",
    "stride_category": "Tampering",
    "severity": "Medium",
    "resource_type": "AWS::CloudFormation::CustomResource",
    "resource_name": "UpdateSettingsValues",
    "title": "Unprotected Settings Storage in SSM Parameter Store",
    "issue": "The template stores application settings in an SSM Parameter Store parameter that is readable by the CognitoAuthorizedRole. This means any authenticated user could potentially read these settings, which might contain sensitive configuration values.",
    "attack_vector": "Any authenticated user with the CognitoAuthorizedRole could read the SSM parameter and potentially discover sensitive configuration details that might aid in further attacks.",
    "impact": "Exposure of internal configuration details that could assist attackers in understanding the system architecture and identifying additional attack vectors.",
    "remediation": "Store sensitive configuration in SecureString parameters and restrict access to only the services that require them. Consider separating configuration values based on sensitivity and implementing different access controls for each category.",
    "priority": 3,
    "estimated_effort": "Low",
    "cwe_id": "CWE-732",
    "compliance_violations": ["CIS AWS Foundations 2.4"],
    "references": ["https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-securing-parameters.html"],
    "status": "Open"
  }
]