AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Document processing pipeline with Textract and Bedrock

Parameters:
  ErrorThreshold:
    Type: Number
    Default: 1
    Description: Number of workflow errors that triggers an alert (per 5 minutes)
    MinValue: 1

  ExecutionTimeThresholdMs:
    Type: Number
    Default: 30000
    Description: Maximum acceptable execution time in milliseconds before alerting (default 30000 = 30 seconds)
    MinValue: 1000

  LogRetentionDays:
    Type: Number
    Default: 30
    Description: Number of days to retain CloudWatch logs
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]

  ExtractionModel:
    Type: String
    Default: 'us.anthropic.claude-3-5-sonnet-20241022-v2:0'
    AllowedValues:
      - 'anthropic.claude-3-sonnet-20240229-v1:0'
      - 'us.anthropic.claude-3-5-sonnet-20241022-v2:0'
    Description: Bedrock Model ID to use for Extraction

Resources:
  InputBucket:
    Type: AWS::S3::Bucket
    Properties:
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  OutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  ExecutionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: object_key
          AttributeType: S
      KeySchema:
        - AttributeName: object_key
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  ProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      ContentBasedDeduplication: true
      DeduplicationScope: messageGroup
      FifoThroughputLimit: perMessageGroupId
      VisibilityTimeout: 3600
      MessageRetentionPeriod: 1209600

  QueueProcessor:
   Type: AWS::Serverless::Function
   Properties:
     CodeUri: src/queue_processor/
     Handler: index.handler
     Runtime: python3.11
     Timeout: 30
     ReservedConcurrentExecutions: 5
     LoggingConfig:
       LogGroup: !Ref QueueProcessorLogGroup
     Environment:
       Variables:
         STATE_MACHINE_ARN: !Ref DocumentProcessingStateMachine
         TRACKING_TABLE: !Ref ExecutionTable
     Policies:
       - SQSPollerPolicy:
           QueueName: !GetAtt ProcessingQueue.QueueName
       - StatesExecutePolicy:
           StateMachineName: !GetAtt DocumentProcessingStateMachine.Name
       - DynamoDBCrudPolicy:
           TableName: !Ref ExecutionTable

  QueueProcessorLogGroup:
   Type: AWS::Logs::LogGroup
   Properties:
     LogGroupName: !Sub "/${AWS::StackName}/lambda/queue-processor"
     RetentionInDays: !Ref LogRetentionDays

  QueueSender:
   Type: AWS::Serverless::Function 
   Properties:
     CodeUri: src/queue_sender/
     Handler: index.handler
     Runtime: python3.11
     Timeout: 30
     LoggingConfig:
       LogGroup: !Ref QueueSenderLogGroup
     Environment:
       Variables:
         QUEUE_URL: !Ref ProcessingQueue
         TRACKING_TABLE: !Ref ExecutionTable
     Policies:
       - SQSSendMessagePolicy:
           QueueName: !GetAtt ProcessingQueue.QueueName
       - DynamoDBCrudPolicy:
           TableName: !Ref ExecutionTable

  QueueSenderLogGroup:
   Type: AWS::Logs::LogGroup
   Properties:
     LogGroupName: !Sub "/${AWS::StackName}/lambda/queue-sender" 
     RetentionInDays: !Ref LogRetentionDays

  TrackerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/tracker_function/
      Handler: index.handler
      Runtime: python3.11
      Timeout: 30
      LoggingConfig:
        LogGroup: !Ref TrackerFunctionLogGroup
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ExecutionTable
  
  TrackerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/${AWS::StackName}/lambda/tracker"
      RetentionInDays: !Ref LogRetentionDays

  TextractFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/textract_function/
      Handler: index.handler
      Runtime: python3.11
      Timeout: 900
      MemorySize: 512
      LoggingConfig:
        LogGroup: !Ref TextractFunctionLogGroup
      Policies:
        - AWSLambdaBasicExecutionRole
        - TextractPolicy:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: textract:DetectDocumentText
                Resource: '*'
        - S3ReadPolicy:
            BucketName: !Ref InputBucket
  
  TextractFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/${AWS::StackName}/lambda/textract"
      RetentionInDays: !Ref LogRetentionDays
  
  BedrockFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/bedrock_function/
      Handler: index.handler
      Runtime: python3.11
      Timeout: 900
      MemorySize: 512
      Environment:
        Variables:
          EXTRACTION_MODEL_ID: !Ref ExtractionModel
      LoggingConfig:
        LogGroup: !Ref BedrockFunctionLogGroup
      Policies:
      - AWSLambdaBasicExecutionRole
      - Statement:
        - Effect: Allow
          Action: bedrock:InvokeModel
          Resource: '*'
      - Statement:
        - Effect: Allow
          Action: cloudwatch:PutMetricData
          Resource: '*'
      - S3CrudPolicy:
          BucketName: !Ref OutputBucket
      - S3ReadPolicy:
          BucketName: !Ref InputBucket

  BedrockFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/${AWS::StackName}/lambda/bedrock"
      RetentionInDays: !Ref LogRetentionDays

  DocumentProcessingStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub "${AWS::StackName}-StateMachine"
      DefinitionUri: statemachine/workflow.asl.json
      DefinitionSubstitutions:
        TextractFunctionArn: !GetAtt TextractFunction.Arn
        BedrockFunctionArn: !GetAtt BedrockFunction.Arn
        OutputBucket: !Ref OutputBucket
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup: !GetAtt StateMachineLogGroup.Arn
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref TextractFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref BedrockFunction
        - CloudWatchLogsFullAccess

  StateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/vendedlogs/states/${AWS::StackName}/workflow"  # required prefix
      RetentionInDays: !Ref LogRetentionDays

  AlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Workflow Alerts

  WorkflowErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub "Alert when workflow errors exceed ${ErrorThreshold} in 5 minutes"
      MetricName: ExecutionsFailedCount
      Namespace: AWS/States
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: !Ref ErrorThreshold
      ComparisonOperator: GreaterThanOrEqualToThreshold 
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref DocumentProcessingStateMachine
      AlarmActions:
        - !Ref AlertsTopic

  SlowExecutionsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub "Alert when average execution time exceeds ${ExecutionTimeThresholdMs} milliseconds"
      MetricName: ExecutionTime
      Namespace: AWS/States
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: !Ref ExecutionTimeThresholdMs
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref DocumentProcessingStateMachine
      AlarmActions:
        - !Ref AlertsTopic

  DashboardWorkflow:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub "${AWS::StackName}-${AWS::Region}"
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/SQS", "NumberOfMessagesReceived", "QueueName", "${ProcessingQueue.QueueName}"],
                  [".", "NumberOfMessagesDeleted", ".", "."],
                  [".", "ApproximateAgeOfOldestMessage", ".", "."]
                ],
                "region": "${AWS::Region}",
                "title": "SQS Queue Metrics",
                "period": 300,
                "stat": "Sum",
                "view": "timeSeries"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/States", "ExecutionsStarted", "StateMachineArn", "${DocumentProcessingStateMachine}"],
                  [".", "ExecutionsSucceeded", ".", "."],
                  [".", "ExecutionsFailed", ".", "."]
                ],
                "region": "${AWS::Region}",
                "title": "Workflow Executions",
                "period": 300,
                "stat": "Sum",
                "view": "timeSeries"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/States", "ExecutionTime", "StateMachineArn", "${DocumentProcessingStateMachine}"]
                ],
                "region": "${AWS::Region}",
                "title": "Workflow Execution Duration",
                "period": 300,
                "annotations": {
                  "horizontal": [{
                    "value": ${ExecutionTimeThresholdMs},
                    "label": "Threshold (${ExecutionTimeThresholdMs}ms)",
                    "color": "#ff0000"
                  }]
                },
                "stat": "Average",
                "view": "timeSeries"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["Custom/Bedrock", "InputTokens", {"stat": "Sum", "period": 60}]
                ],
                "region": "${AWS::Region}",
                "title": "Input Tokens (per 5-Minute)",
                "period": 300,
                "view": "timeSeries",
                "stacked": false
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 12,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["Custom/Bedrock", "OutputTokens", {"stat": "Sum", "period": 60}]
                ],
                "region": "${AWS::Region}",
                "title": "Output Tokens (per 5-Minute)",
                "period": 300,
                "view": "timeSeries",
                "stacked": false
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 12,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Duration", "FunctionName", "${TextractFunction}"]
                ],
                "region": "${AWS::Region}",
                "title": "Textract Function Duration",
                "period": 300,
                "annotations": {
                  "horizontal": [{
                    "value": ${ExecutionTimeThresholdMs},
                    "label": "Threshold (${ExecutionTimeThresholdMs}ms)",
                    "color": "#ff0000"
                  }]
                },
                "stat": "Average",
                "view": "timeSeries"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 18,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Duration", "FunctionName", "${BedrockFunction}"]
                ],
                "region": "${AWS::Region}",
                "title": "Bedrock Function Duration",
                "period": 300,
                "annotations": {
                  "horizontal": [{
                    "value": ${ExecutionTimeThresholdMs},
                    "label": "Threshold (${ExecutionTimeThresholdMs}ms)",
                    "color": "#ff0000"
                  }]
                },
                "stat": "Average",
                "view": "timeSeries"
              }
            },
            {
              "type": "log",
              "x": 12,
              "y": 18,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${StateMachineLogGroup}' | fields @timestamp, @message | filter @message like /ExecutionFailed/ or @message like /TimedOut/ | parse @message /execution: (?<execution_arn>[^ ]*)/ | parse @message /error: (?<error>[^\"]*)/| sort @timestamp desc | limit 20",
                "region": "${AWS::Region}",
                "title": "Step Functions Executions Failed",
                "view": "table"
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 24,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${TextractFunctionLogGroup}' | fields @timestamp, @logStream, @message | filter @message like /ERROR/ or @message like /Task timed out/ | parse @message /RequestId: (?<requestId>[^ ]*)/ | sort @timestamp desc | limit 20",
                "region": "${AWS::Region}",
                "title": "Textract Lambda Errors",
                "view": "table"
              }
            },
            {
              "type": "log",
              "x": 12,
              "y": 24,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${BedrockFunctionLogGroup}' | fields @timestamp, @logStream, @message | filter @message like /ERROR/ or @message like /Task timed out/ | parse @message /RequestId: (?<requestId>[^ ]*)/ | sort @timestamp desc | limit 20",
                "region": "${AWS::Region}",
                "title": "Bedrock Lambda Errors",
                "view": "table"
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 30,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${TextractFunctionLogGroup}' | filter @type = \"REPORT\" | fields @timestamp, @logStream, @billedDuration, @maxMemoryUsed/1024/1024 as memoryUsedMB | filter @billedDuration > ${ExecutionTimeThresholdMs} | sort by @billedDuration desc | limit 20",
                "region": "${AWS::Region}",
                "title": "Textract Lambda Long Running Invocations",
                "view": "table"
              }
            },
            {
              "type": "log",
              "x": 12,
              "y": 30,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${BedrockFunctionLogGroup}' | filter @type = \"REPORT\" | fields @timestamp, @logStream, @billedDuration, @maxMemoryUsed/1024/1024 as memoryUsedMB | filter @billedDuration > ${ExecutionTimeThresholdMs} | sort by @billedDuration desc | limit 20",
                "region": "${AWS::Region}",
                "title": "Bedrock Lambda Long Running Invocations",
                "view": "table"
              }
            }
          ]
        }

  LookupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lookup_function/
      Handler: index.handler
      Runtime: python3.11
      Timeout: 30
      LoggingConfig:
        LogGroup: !Ref LookupFunctionLogGroup
      Environment:
        Variables:
          TABLE_NAME: !Ref ExecutionTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ExecutionTable
        - Statement:
            - Effect: Allow
              Action:
                - states:DescribeExecution
                - states:GetExecutionHistory
              Resource: 
                - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${DocumentProcessingStateMachine.Name}*"

  LookupFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/${AWS::StackName}/lambda/lookup"
      RetentionInDays: !Ref LogRetentionDays

Outputs:
  InputBucketName:
    Description: Input S3 bucket name
    Value: !Ref InputBucket
  InputBucketConsoleURL:
    Description: Input S3 bucket console URL
    Value: !Sub https://s3.console.aws.amazon.com/s3/buckets/${InputBucket}
  OutputBucketName:
    Description: Output S3 bucket name
    Value: !Ref OutputBucket
  OutputBucketConsoleURL:
    Description: Output S3 bucket console URL
    Value: !Sub https://s3.console.aws.amazon.com/s3/buckets/${OutputBucket}
  StateMachineArn:
    Description: State machine ARN
    Value: !Ref DocumentProcessingStateMachine
  StateMachineConsoleURL:
    Description: State machine console URL
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/states/home?region=${AWS::Region}#/statemachines/view/${DocumentProcessingStateMachine}
  DashboardName:
    Description: CloudWatch Dashboard Name
    Value: !Ref DashboardWorkflow
  DashboardConsoleURL:
    Description: CloudWatch Dashboard URL
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${DashboardWorkflow}
  AlertsTopicARN:
    Description: SNS Topic ARN for alerts
    Value: !Ref AlertsTopic
  AlertsTopicConsoleURL:
    Description: SNS Topic console URL
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/sns/v3/home?region=${AWS::Region}#/topic/${AlertsTopic}
  ExecutionTableName:
    Description: Name of the execution tracking table
    Value: !Ref ExecutionTable
  ExecutionTableConsoleURL:
    Description: DynamoDB table console URL
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/dynamodbv2/home?region=${AWS::Region}#table/${ExecutionTable}
  LookupFunctionName:
    Description: Name of the Lookup function
    Value: !Ref LookupFunction
  LookupFunctionConsoleURL:
    Description: Lambda function console URL
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/lambda/home?region=${AWS::Region}#/functions/${LookupFunction}
  QueueURL:
    Description: URL of the FIFO queue
    Value: !Ref ProcessingQueue
  QueueConsoleURL:
    Description: SQS Queue console URL
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/sqs/v2/home?region=${AWS::Region}#/queues/${ProcessingQueue}


