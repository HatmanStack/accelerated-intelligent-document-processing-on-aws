AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Document processing pipeline with Textract and Bedrock

Parameters:
  ErrorThreshold:
    Type: Number
    Default: 1
    Description: Number of workflow errors that triggers an alert (per 5 minutes)
    MinValue: 1

  ExecutionTimeThresholdMs:
    Type: Number
    Default: 30000
    Description: Maximum acceptable execution time in milliseconds before alerting (default 30000 = 30 seconds)
    MinValue: 1000

  LogRetentionDays:
    Type: Number
    Default: 30
    Description: Number of days to retain CloudWatch logs
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]

Resources:
  InputBucket:
    Type: AWS::S3::Bucket
    Properties:
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  OutputBucket:
    Type: AWS::S3::Bucket

  TextractFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/${AWS::StackName}/lambda/textract"
      RetentionInDays: !Ref LogRetentionDays

  BedrockFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/${AWS::StackName}/lambda/bedrock"
      RetentionInDays: !Ref LogRetentionDays

  StateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/vendedlogs/states/${AWS::StackName}/workflow"  # required prefix
      RetentionInDays: !Ref LogRetentionDays

  TextractFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/textract_function/
      Handler: index.handler
      Runtime: python3.11
      Timeout: 900
      LoggingConfig:
        LogGroup: !Ref TextractFunctionLogGroup
      Policies:
        - AWSLambdaBasicExecutionRole
        - TextractPolicy:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: textract:DetectDocumentText
                Resource: '*'
        - S3ReadPolicy:
            BucketName: !Ref InputBucket

  BedrockFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/bedrock_function/
      Handler: index.handler
      Runtime: python3.11
      Timeout: 900
      LoggingConfig:
        LogGroup: !Ref BedrockFunctionLogGroup
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action: bedrock:InvokeModel
              Resource: '*'
        - S3CrudPolicy:
            BucketName: !Ref OutputBucket
        - S3ReadPolicy:
            BucketName: !Ref InputBucket

  DocumentProcessingStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: statemachine/workflow.asl.json
      DefinitionSubstitutions:
        TextractFunctionArn: !GetAtt TextractFunction.Arn
        BedrockFunctionArn: !GetAtt BedrockFunction.Arn
        OutputBucket: !Ref OutputBucket
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup: !GetAtt StateMachineLogGroup.Arn
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref TextractFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref BedrockFunction
        - CloudWatchLogsFullAccess

  EventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - Object Created
        detail:
          bucket:
            name:
              - !Ref InputBucket
      State: ENABLED
      Targets:
        - Arn: !GetAtt DocumentProcessingStateMachine.Arn
          Id: ProcessDocument
          RoleArn: !GetAtt EventBridgeRole.Arn

  EventBridgeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: StepFunctionsStartExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: states:StartExecution
                Resource: !GetAtt DocumentProcessingStateMachine.Arn

  AlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Workflow Alerts

  WorkflowErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub "Alert when workflow errors exceed ${ErrorThreshold} in 5 minutes"
      MetricName: ExecutionsFailedCount
      Namespace: AWS/States
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: !Ref ErrorThreshold
      ComparisonOperator: GreaterThanOrEqualToThreshold 
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref DocumentProcessingStateMachine
      AlarmActions:
        - !Ref AlertsTopic

  SlowExecutionsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub "Alert when average execution time exceeds ${ExecutionTimeThresholdMs} milliseconds"
      MetricName: ExecutionTime
      Namespace: AWS/States
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: !Ref ExecutionTimeThresholdMs
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref DocumentProcessingStateMachine
      AlarmActions:
        - !Ref AlertsTopic

  DashboardWorkflow:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: DocumentProcessingDashboard
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/States", "ExecutionsStarted", "StateMachineArn", "${DocumentProcessingStateMachine}"],
                  [".", "ExecutionsSucceeded", ".", "."],
                  [".", "ExecutionsFailed", ".", "."]
                ],
                "region": "${AWS::Region}",
                "title": "Workflow Executions",
                "period": 300,
                "stat": "Sum",
                "view": "timeSeries"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/States", "ExecutionTime", "StateMachineArn", "${DocumentProcessingStateMachine}"]
                ],
                "region": "${AWS::Region}",
                "title": "Workflow Execution Duration",
                "period": 300,
                "annotations": {
                  "horizontal": [{
                    "value": ${ExecutionTimeThresholdMs},
                    "label": "Threshold (${ExecutionTimeThresholdMs}ms)",
                    "color": "#ff0000"
                  }]
                },
                "stat": "Average",
                "view": "timeSeries"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Duration", "FunctionName", "${TextractFunction}"]
                ],
                "region": "${AWS::Region}",
                "title": "Textract Function Duration",
                "period": 300,
                "annotations": {
                  "horizontal": [{
                    "value": ${ExecutionTimeThresholdMs},
                    "label": "Threshold (${ExecutionTimeThresholdMs}ms)",
                    "color": "#ff0000"
                  }]
                },
                "stat": "Average",
                "view": "timeSeries"
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Duration", "FunctionName", "${BedrockFunction}"]
                ],
                "region": "${AWS::Region}",
                "title": "Bedrock Function Duration",
                "period": 300,
                "annotations": {
                  "horizontal": [{
                    "value": ${ExecutionTimeThresholdMs},
                    "label": "Threshold (${ExecutionTimeThresholdMs}ms)",
                    "color": "#ff0000"
                  }]
                },
                "stat": "Average",
                "view": "timeSeries"
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 12,
              "width": 24,
              "height": 6,
              "properties": {
                "query": "SOURCE '${StateMachineLogGroup}' | fields @timestamp, @message | filter @message like /ExecutionFailed/ or @message like /TimedOut/ | parse @message /execution: (?<execution_arn>[^ ]*)/ | parse @message /error: (?<error>[^\"]*)/| sort @timestamp desc | limit 20",
                "region": "${AWS::Region}",
                "title": "Step Functions Executions Failed",
                "view": "table"
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 18,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${TextractFunctionLogGroup}' | fields @timestamp, @logStream, @message | filter @message like /ERROR/ or @message like /Task timed out/ | parse @message /RequestId: (?<requestId>[^ ]*)/ | sort @timestamp desc | limit 20",
                "region": "${AWS::Region}",
                "title": "Textract Lambda Errors",
                "view": "table"
              }
            },
            {
              "type": "log",
              "x": 12,
              "y": 18,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${BedrockFunctionLogGroup}' | fields @timestamp, @logStream, @message | filter @message like /ERROR/ or @message like /Task timed out/ | parse @message /RequestId: (?<requestId>[^ ]*)/ | sort @timestamp desc | limit 20",
                "region": "${AWS::Region}",
                "title": "Bedrock Lambda Errors",
                "view": "table"
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 24,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${TextractFunctionLogGroup}' | filter @type = \"REPORT\" | fields @timestamp, @logStream, @billedDuration, @maxMemoryUsed/1024/1024 as memoryUsedMB | filter @billedDuration > ${ExecutionTimeThresholdMs} | sort by @billedDuration desc | limit 20",
                "region": "${AWS::Region}",
                "title": "Textract Lambda Long Running Invocations",
                "view": "table"
              }
            },
            {
              "type": "log",
              "x": 12,
              "y": 24,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${BedrockFunctionLogGroup}' | filter @type = \"REPORT\" | fields @timestamp, @logStream, @billedDuration, @maxMemoryUsed/1024/1024 as memoryUsedMB | filter @billedDuration > ${ExecutionTimeThresholdMs} | sort by @billedDuration desc | limit 20",
                "region": "${AWS::Region}",
                "title": "Bedrock Lambda Long Running Invocations",
                "view": "table"
              }
            }
          ]
        }

Outputs:
  InputBucketName:
    Description: Input S3 bucket name
    Value: !Ref InputBucket
  OutputBucketName:
    Description: Output S3 bucket name
    Value: !Ref OutputBucket
  StateMachineArn:
    Description: State machine ARN
    Value: !GetAtt DocumentProcessingStateMachine.Arn
  DashboardURL:
    Description: CloudWatch Dashboard URL
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${DashboardWorkflow}
  AlertsTopicARN:
    Description: SNS Topic ARN for alerts
    Value: !Ref AlertsTopic
  LogGroupName:
    Description: CloudWatch Log Group for Step Functions
    Value: !Ref StateMachineLogGroup