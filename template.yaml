# Copyright Â© Amazon.com and Affiliates: This deliverable is considered Developed Content as defined in the AWS Service Terms and the SOW between the parties.

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS GenAI IDP Accelerator (uksb-r8evguc4p9) (v0.2.0)

Parameters:

  # Pipeline Configuration
  MaxConcurrentWorkflows:
    Type: Number
    Default: 800
    Description: Maximum number of concurrent workflow executions allowed
    MinValue: 1

  ErrorThreshold:
    Type: Number
    Default: 1
    Description: Number of workflow errors that triggers an alert (per 5 minutes)
    MinValue: 1

  ExecutionTimeThresholdMs:
    Type: Number
    Default: 30000
    Description: Maximum acceptable execution time in milliseconds before alerting (default 30000 = 30 seconds)
    MinValue: 1000

  LogRetentionDays:
    Type: Number
    Default: 30
    Description: Number of days to retain CloudWatch logs
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]

  # Classification and Packet Splitting Configuration
  IDPPattern:
    Type: String
    Default: Pattern1
    AllowedValues:
      - Pattern1
    Description: Choose from built-in IDP workflow patterns - see README for pattern descriptions

  UDOPModelArtifactPath:
    Type: String
    Default: ''
    AllowedPattern: "^(|s3://.*)$"
    Description: When IDPPattern is "Pattern1", provide S3 path to the UDOP model.tar.gz file (e.g., s3://bucket-name/path/to/model.tar.gz)


Rules:

  UDOPModelArtifactPath:
    RuleCondition:
      !Equals [
        !Ref IDPPattern,
        "Pattern1",
      ]
    Assertions:
      - Assert: !Not [!Equals [!Ref UDOPModelArtifactPath, ""]]
        AssertDescription:
          UDOPModelArtifactPath is required when IDPPattern
          is 'Pattern1'

Conditions:

  IsPattern1: !Equals [!Ref IDPPattern, "Pattern1"]


Resources:

  # Nested stack for selected pattern

  PATTERN1STACK:
    Type: AWS::CloudFormation::Stack
    Condition: IsPattern1
    Properties:
      # yamllint disable rule:line-length
      TemplateURL: ./idp-pattern-1/.aws-sam/idp-pattern-1.yaml
      Parameters:
        StackName: !Ref AWS::StackName
        InputBucket: !Ref InputBucket
        WorkingBucket: !Ref WorkingBucket
        OutputBucket: !Ref OutputBucket
        CustomerManagedEncryptionKeyArn: !GetAtt CustomerManagedEncryptionKey.Arn
        LogRetentionDays: !Ref LogRetentionDays
        ExecutionTimeThresholdMs: !Ref ExecutionTimeThresholdMs
        UDOPModelArtifactPath: !Ref UDOPModelArtifactPath

  # Main stack resources

  LoggingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldLogs
            Status: Enabled
            ExpirationInDays: 90
            Prefix: ''  # Applies to all objects in the bucket
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7

  LoggingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LoggingBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: S3ServerAccessLogsPolicy
            Effect: Allow
            Principal:
              Service: logging.s3.amazonaws.com
            Action:
              - s3:PutObject
            Resource: !Sub '${LoggingBucket.Arn}/*'
            Condition: 
              StringEquals:
                'aws:SourceAccount': !Ref 'AWS::AccountId'

  InputBucket:
    Type: AWS::S3::Bucket
    Properties:
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !Ref CustomerManagedEncryptionKey
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: input-bucket-logs/

  WorkingBucket:
    Type: AWS::S3::Bucket
    Properties:
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !Ref CustomerManagedEncryptionKey
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: working-bucket-logs/
      LifecycleConfiguration:
        Rules:
          - Id: DeleteAfterNDays
            Status: Enabled
            ExpirationInDays: 30
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1

  OutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !Ref CustomerManagedEncryptionKey
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: output-bucket-logs/

  CustomerManagedEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for DynamoDB encryption
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Allow lambda to access the Keys
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action:
              - kms:*
            Resource: '*'
          - Sid: Allow DynamoDB to use the key
            Effect: Allow
            Principal:
              Service: dynamodb.amazonaws.com
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: '*'

  CustomerManagedEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub 'alias/${AWS::StackName}-customer-encryption-key'
      TargetKeyId: !Ref CustomerManagedEncryptionKey

  ExecutionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: object_key
          AttributeType: S
      KeySchema:
        - AttributeName: object_key
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !Ref CustomerManagedEncryptionKey
  
  ConcurrencyTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: counter_id
          AttributeType: S
      KeySchema:
        - AttributeName: counter_id
          KeyType: HASH
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !Ref CustomerManagedEncryptionKey

  InitializeConcurrencyTableLambda:
   Type: AWS::Serverless::Function
   Properties:
     Handler: index.handler
     Runtime: python3.11
     Timeout: 30
     InlineCode: |
      import boto3
      import cfnresponse
      import logging
      from botocore.exceptions import ClientError
      import os

      # Initialize logging
      logger = logging.getLogger()
      logger.setLevel(logging.INFO)

      # DynamoDB resource
      dynamodb = boto3.resource('dynamodb')
      CONCURRENCY_TABLE = os.environ.get('CONCURRENCY_TABLE')
      concurrency_table = dynamodb.Table(CONCURRENCY_TABLE)

      COUNTER_ID = "workflow_counter"

      def handler(event, context):
          logger.info(f"Event received: {event}")
          try:
              # Handle CloudFormation CREATE events
              if event['RequestType'] == 'Create':
                  concurrency_table.put_item(
                      Item={
                          'counter_id': COUNTER_ID,
                          'active_count': 0
                      },
                      ConditionExpression='attribute_not_exists(counter_id)'
                  )
                  logger.info("Counter initialized")

              elif event['RequestType'] == 'Delete':
                  # Handle CloudFormation DELETE events
                  concurrency_table.delete_item(
                      Key={
                          'counter_id': COUNTER_ID
                      }
                  )
                  logger.info("Counter deleted")

              # Send a success response to CloudFormation
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})

          except ClientError as e:
              logger.error(f"Error in DynamoDB operation: {e}")
              # Send a failure response to CloudFormation
              cfnresponse.send(event, context, cfnresponse.FAILED, {"Error": str(e)})
              raise

          except Exception as e:
              logger.error(f"Unexpected error: {e}")
              # Send a failure response to CloudFormation
              cfnresponse.send(event, context, cfnresponse.FAILED, {"Error": str(e)})
              raise
     Environment:
      Variables:
        CONCURRENCY_TABLE: !Ref ConcurrencyTable
     Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref ConcurrencyTable
      - Statement:
          - Effect: Allow
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: !GetAtt CustomerManagedEncryptionKey.Arn

  InitializeConcurrencyTableCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt InitializeConcurrencyTableLambda.Arn
      TableName: !Ref ConcurrencyTable

  DocumentQueueDLQ:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref CustomerManagedEncryptionKey
      VisibilityTimeout: 30
      MessageRetentionPeriod: 345600 # 4 days

  DocumentQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref CustomerManagedEncryptionKey
      VisibilityTimeout: 30
      MessageRetentionPeriod: 86400  # 1 day 
      RedrivePolicy:
        maxReceiveCount: 1000  # should retry up to 8hrs (1000 * 30 sec visibility) before moving to DLQ
        deadLetterTargetArn: !GetAtt DocumentQueueDLQ.Arn

  QueueSenderDLQ:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref CustomerManagedEncryptionKey
      VisibilityTimeout: 30
      MessageRetentionPeriod: 345600 # 4 days

  QueueSender:
   Type: AWS::Serverless::Function 
   Properties:
     CodeUri: src/queue_sender/
     Handler: index.handler
     Runtime: python3.11
     Timeout: 30
     DeadLetterQueue:
       Type: SQS
       TargetArn: !GetAtt QueueSenderDLQ.Arn
     LoggingConfig:
       LogGroup: !Ref QueueSenderLogGroup
     Environment:
       Variables:
         QUEUE_URL: !Ref DocumentQueue
         TRACKING_TABLE: !Ref ExecutionTable
     Policies:
       - SQSSendMessagePolicy:
           QueueName: !GetAtt DocumentQueue.QueueName
       - DynamoDBCrudPolicy:
           TableName: !Ref ExecutionTable
       - Statement:
          - Effect: Allow
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: !GetAtt CustomerManagedEncryptionKey.Arn
     Events:
        S3Event:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
                - aws.s3
              detail-type:
                - "Object Created"
              detail:
                bucket:
                  name:
                    - !Ref InputBucket

  QueueSenderLogGroup:
   Type: AWS::Logs::LogGroup
   Properties:
     LogGroupName: !Sub "/${AWS::StackName}/lambda/queue-sender" 
     RetentionInDays: !Ref LogRetentionDays

  QueueProcessor:
   Type: AWS::Serverless::Function
   Properties:
     CodeUri: src/queue_processor/
     Handler: index.handler
     Runtime: python3.11
     Timeout: 30
     LoggingConfig:
       LogGroup: !Ref QueueProcessorLogGroup
     Environment:
       Variables:
         STATE_MACHINE_ARN: !GetAtt PATTERN1STACK.Outputs.StateMachineArn
         TRACKING_TABLE: !Ref ExecutionTable
         CONCURRENCY_TABLE: !Ref ConcurrencyTable
         MAX_CONCURRENT: !Ref MaxConcurrentWorkflows
     Policies:
       - SQSPollerPolicy:
           QueueName: !GetAtt DocumentQueue.QueueName
       - StepFunctionsExecutionPolicy:
           StateMachineName: !GetAtt PATTERN1STACK.Outputs.StateMachineName
       - DynamoDBCrudPolicy:
           TableName: !Ref ExecutionTable
       - DynamoDBCrudPolicy:
           TableName: !Ref ConcurrencyTable
       - Statement:
          - Effect: Allow
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: !GetAtt CustomerManagedEncryptionKey.Arn
     Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt DocumentQueue.Arn
            BatchSize: 50  # Process up to 50 messages at once
            MaximumBatchingWindowInSeconds: 1  # Wait max 1 second to fill batch
            FunctionResponseTypes: 
              - ReportBatchItemFailures

  QueueProcessorLogGroup:
   Type: AWS::Logs::LogGroup
   Properties:
     LogGroupName: !Sub "/${AWS::StackName}/lambda/queue-processor"
     RetentionInDays: !Ref LogRetentionDays

  WorkflowTrackerDLQ:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref CustomerManagedEncryptionKey
      VisibilityTimeout: 30
      MessageRetentionPeriod: 345600 # 4 days

  WorkflowTracker:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/workflow_tracker/
      Handler: index.handler
      Runtime: python3.11
      Timeout: 30
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt WorkflowTrackerDLQ.Arn
      LoggingConfig:
        LogGroup: !Ref WorkflowTrackerLogGroup
      Environment:
        Variables:
          TRACKING_TABLE: !Ref ExecutionTable
          CONCURRENCY_TABLE: !Ref ConcurrencyTable
          METRIC_NAMESPACE: !Ref AWS::StackName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ExecutionTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ConcurrencyTable
        - Statement:
            - Effect: Allow
              Action:
                - cloudwatch:PutMetricData
              Resource: "*"
            - Effect: Allow
              Action:
                - kms:Encrypt
                - kms:Decrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: !GetAtt CustomerManagedEncryptionKey.Arn

  WorkflowTrackerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/${AWS::StackName}/lambda/workflow-tracker"
      RetentionInDays: !Ref LogRetentionDays

  WorkflowStateChangeRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.states
        detail-type:
          - Step Functions Execution Status Change
        detail:
          stateMachineArn:
            - !GetAtt PATTERN1STACK.Outputs.StateMachineArn
          status:
            - FAILED
            - TIMED_OUT
            - ABORTED
            - SUCCEEDED
      State: ENABLED
      Targets:
        - Arn: !GetAtt WorkflowTracker.Arn
          Id: TrackWorkflowCompletion
          RetryPolicy:
            MaximumRetryAttempts: 3

  WorkflowTrackerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WorkflowTracker
      Principal: events.amazonaws.com
      SourceArn: !GetAtt WorkflowStateChangeRule.Arn

  AlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Workflow Alerts

  WorkflowErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub "Alert when workflow errors exceed ${ErrorThreshold} in 5 minutes"
      MetricName: ExecutionsFailedCount
      Namespace: AWS/States
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: !Ref ErrorThreshold
      ComparisonOperator: GreaterThanOrEqualToThreshold 
      Dimensions:
        - Name: StateMachineArn
          Value: !GetAtt PATTERN1STACK.Outputs.StateMachineArn
      AlarmActions:
        - !Ref AlertsTopic

  SlowExecutionsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub "Alert when average execution time exceeds ${ExecutionTimeThresholdMs} milliseconds"
      MetricName: ExecutionTime
      Namespace: AWS/States
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: !Ref ExecutionTimeThresholdMs
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: StateMachineArn
          Value: !GetAtt PATTERN1STACK.Outputs.StateMachineArn
      AlarmActions:
        - !Ref AlertsTopic

  MainTemplateSubsetDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub "${AWS::StackName}-${AWS::Region}-MainTemplate-Subset"
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["${AWS::StackName}", "QueueLatencyMilliseconds", {"stat": "Average"}],
                  [".", "QueueLatencyMilliseconds", {"stat": "p90"}],
                  [".", "QueueLatencyMilliseconds", {"stat": "Maximum"}]
                ],
                "region": "${AWS::Region}",
                "title": "Queue Latency",
                "period": 300,
                "view": "timeSeries",
                "annotations": {
                  "horizontal": [{
                    "value": ${ExecutionTimeThresholdMs},
                    "label": "Threshold (${ExecutionTimeThresholdMs}ms)",
                    "color": "#ff0000"
                  }]
                }
              }
            },
            {
              "type": "metric",
              "x": 8,
              "y": 0,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["${AWS::StackName}", "WorkflowLatencyMilliseconds", {"stat": "Average"}],
                  [".", "WorkflowLatencyMilliseconds", {"stat": "p90"}],
                  [".", "WorkflowLatencyMilliseconds", {"stat": "Maximum"}]
                ],
                "region": "${AWS::Region}",
                "title": "Workflow Latency",
                "period": 300,
                "view": "timeSeries",
                "annotations": {
                  "horizontal": [{
                    "value": ${ExecutionTimeThresholdMs},
                    "label": "Threshold (${ExecutionTimeThresholdMs}ms)",
                    "color": "#ff0000"
                  }]
                }
              }
            },
            {
              "type": "metric",
              "x": 16,
              "y": 0,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["${AWS::StackName}", "TotalLatencyMilliseconds", {"stat": "Average"}],
                  [".", "TotalLatencyMilliseconds", {"stat": "p90"}],
                  [".", "TotalLatencyMilliseconds", {"stat": "Maximum"}]
                ],
                "region": "${AWS::Region}",
                "title": "Total Processing Latency",
                "period": 300,
                "view": "timeSeries",
                "annotations": {
                  "horizontal": [{
                    "value": ${ExecutionTimeThresholdMs},
                    "label": "Threshold (${ExecutionTimeThresholdMs}ms)",
                    "color": "#ff0000"
                  }]
                }
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [{"expression": "m1/PERIOD(m1)*60", "label": "Messages Received per Minute", "id": "e1"}],
                  [{"expression": "m2/PERIOD(m2)*60", "label": "Messages Deleted per Minute", "id": "e2"}],
                  ["AWS/SQS", "NumberOfMessagesReceived", "QueueName", "${DocumentQueue.QueueName}", {"id": "m1", "stat": "Sum", "visible": false}],
                  [".", "NumberOfMessagesDeleted", ".", ".", {"id": "m2", "stat": "Sum", "visible": false}]
                ],
                "region": "${AWS::Region}",
                "title": "SQS Queue Metrics (per Minute)",
                "view": "timeSeries",
                "period": 60,
                "yAxis": {
                  "left": {
                    "label": "Count per Minute"
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 8,
              "y":6,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [{"expression": "m1/PERIOD(m1)*60", "label": "Started per Minute", "id": "e1"}],
                  [{"expression": "m2/PERIOD(m2)*60", "label": "Succeeded per Minute", "id": "e2"}],
                  [{"expression": "m3/PERIOD(m3)*60", "label": "Failed per Minute", "id": "e3"}],
                  ["AWS/States", "ExecutionsStarted", "StateMachineArn", "${PATTERN1STACK.Outputs.StateMachineArn}", {"id": "m1", "stat": "Sum", "visible": false}],
                  [".", "ExecutionsSucceeded", ".", ".", {"id": "m2", "stat": "Sum", "visible": false}],
                  [".", "ExecutionsFailed", ".", ".", {"id": "m3", "stat": "Sum", "visible": false}]
                ],
                "region": "${AWS::Region}",
                "title": "Workflow Executions (per Minute)",
                "view": "timeSeries",
                "period": 60,
                "yAxis": {
                  "left": {
                    "label": "Count per Minute"
                  }
                }
              }
            },
            {
              "type": "log",
              "x": 18,
              "y": 6,
              "width": 8,
              "height": 6,
              "properties": {
                "query": "SOURCE '${WorkflowTrackerLogGroup}' | fields @timestamp, @message | filter @message like /Publishing latency metrics/ | parse @message 'total: *ms' as totalTime |  filter totalTime > ${ExecutionTimeThresholdMs} |  stats count(*) as high_latency_count by bin(1m)",
                "region": "${AWS::Region}",
                "title": "Count of Workflow Executions over latency threshold (${ExecutionTimeThresholdMs}ms)",
                "stacked": false,
                "view": "timeSeries"
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 12,
              "width": 24,
              "height": 6,
              "properties": {
                "query": "SOURCE '${PATTERN1STACK.Outputs.StateMachineLogGroup}' | fields @timestamp, @message | filter @message like /ExecutionFailed/ or @message like /TimedOut/ | parse @message /execution: (?<execution_arn>[^ ]*)/ | parse @message /error: (?<error>[^\"]*)/| sort @timestamp desc | limit 20",
                "region": "${AWS::Region}",
                "title": "Step Functions Executions Failed",
                "view": "table"
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 18,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${QueueSenderLogGroup}' | fields @timestamp, @logStream, @message | filter @message like /ERROR/ | sort @timestamp desc | limit 20",
                "region": "${AWS::Region}",
                "title": "Queue Sender Lambda Errors",
                "view": "table"
              }
            },
            {
              "type": "log", 
              "x": 12,
              "y": 18,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${QueueProcessorLogGroup}' | fields @timestamp, @logStream, @message | filter @message like /ERROR/ | sort @timestamp desc | limit 20",
                "region": "${AWS::Region}",
                "title": "Queue Processor Lambda Errors",
                "view": "table"
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 24,
              "width": 12,
              "height": 6, 
              "properties": {
                "query": "SOURCE '${WorkflowTrackerLogGroup}' | fields @timestamp, @logStream, @message | filter @message like /ERROR/ | sort @timestamp desc | limit 20",
                "region": "${AWS::Region}",
                "title": "Workflow Tracker Lambda Errors",
                "view": "table"
              }
            },
            {
              "type": "log",
              "x": 12,
              "y": 24,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${LookupFunctionLogGroup}' | fields @timestamp, @logStream, @message | filter @message like /ERROR/ | sort @timestamp desc | limit 20",
                "region": "${AWS::Region}",
                "title": "Lookup Lambda Errors",
                "view": "table"
              }
            }
          ]
        }

  DashboardMergerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/dashboard_merger
      Handler: index.handler
      Runtime: python3.11
      Timeout: 60
      MemorySize: 128
      Environment:
        Variables:
          STACK_NAME: !Ref AWS::StackName
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cloudwatch:GetDashboard
                - cloudwatch:ListDashboards
                - cloudwatch:PutDashboard
                - cloudwatch:DeleteDashboards
              Resource: '*'

  MergedDashboard:
    Type: Custom::DashboardMerger
    Properties:
      ServiceToken: !GetAtt DashboardMergerFunction.Arn
      Dashboard1Name: !Ref MainTemplateSubsetDashboard
      Dashboard2Name: !GetAtt PATTERN1STACK.Outputs.DashboardName
      MergedDashboardName: !Sub "${AWS::StackName}-Integrated-${AWS::Region}"
      ChangeToForceMerge: 20012025-2  # Change this value when either of the two input dashboards have been changed

  LookupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lookup_function/
      Handler: index.handler
      Runtime: python3.11
      Timeout: 30
      LoggingConfig:
        LogGroup: !Ref LookupFunctionLogGroup
      Environment:
        Variables:
          TRACKING_TABLE: !Ref ExecutionTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ExecutionTable
        - Statement:
            - Effect: Allow
              Action:
                - states:DescribeExecution
                - states:GetExecutionHistory
              Resource: 
                - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${PATTERN1STACK.Outputs.StateMachineName}*"
            - Effect: Allow
              Action:
                - kms:Encrypt
                - kms:Decrypt
                - kms:ReEncrypt*
                - kms:GenerateDataKey*
                - kms:DescribeKey
              Resource: !GetAtt CustomerManagedEncryptionKey.Arn

  LookupFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/${AWS::StackName}/lambda/lookup"
      RetentionInDays: !Ref LogRetentionDays

Outputs:
  S3InputBucketName:
    Description: Input S3 bucket name
    Value: !Ref InputBucket
  S3InputBucketConsoleURL:
    Description: Input S3 bucket console URL
    Value: !Sub https://s3.console.aws.amazon.com/s3/buckets/${InputBucket}
  S3OutputBucketName:
    Description: Output S3 bucket name
    Value: !Ref OutputBucket
  S3OutputBucketConsoleURL:
    Description: Output S3 bucket console URL
    Value: !Sub https://s3.console.aws.amazon.com/s3/buckets/${OutputBucket}
  S3WorkingBucketName:
    Description: Output S3 bucket name
    Value: !Ref OutputBucket
  S3WorkingBucketConsoleURL:
    Description: Working S3 bucket console URL (stores intermediate files, images and OCR data)
    Value: !Sub https://s3.console.aws.amazon.com/s3/buckets/${WorkingBucket}
  StateMachineArn:
    Description: Step Functions State machine ARN
    Value: !GetAtt PATTERN1STACK.Outputs.StateMachineArn
  StateMachineConsoleURL:
    Description: Step Functions State machine console URL
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/states/home?region=${AWS::Region}#/statemachines/view/${PATTERN1STACK.Outputs.StateMachineArn}
  CWDashboardConsoleName:
    Description: Name of the merged CloudWatch dashboard
    Value: !GetAtt MergedDashboard.DashboardName
  CWDashboardConsoleURL:
    Description: URL of the merged CloudWatch dashboard
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${MergedDashboard.DashboardName}"
  SNSAlertsTopicARN:
    Description: SNS Topic ARN for alerts
    Value: !Ref AlertsTopic
  SNSAlertsTopicConsoleURL:
    Description: SNS Topic console URL
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/sns/v3/home?region=${AWS::Region}#/topic/${AlertsTopic}
  DynamoDBExecutionTableConsoleURL:
    Description: DynamoDB table console URL
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/dynamodbv2/home?region=${AWS::Region}#item-explorer?maximize=true&operation=QUERY&table=${ExecutionTable}
  DynamoDBConcurrencyTableConsoleURL:
    Description: DynamoDB table console URL
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/dynamodbv2/home?region=${AWS::Region}#item-explorer?maximize=true&operation=QUERY&table=${ConcurrencyTable}
  LambdaLookupFunctionName:
    Description: Name of the Lookup function
    Value: !Ref LookupFunction
  LambdaLookupFunctionConsoleURL:
    Description: Lambda function console URL
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/lambda/home?region=${AWS::Region}#/functions/${LookupFunction}
  SQSDocumentQueueUrl:
    Description: SQS Queue URL
    Value: !Ref DocumentQueue
  SQSDocumentQueueConsoleURL:
    Description: SQS Queue console URL
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/sqs/v2/home?region=${AWS::Region}#/queues/${DocumentQueue}


