This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-17T17:14:40.193Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
components/
  common/
    constants.js
    download-func.js
    generate-s3-presigned-url.js
    info-link.js
    labels.js
    local-storage.js
    map-document-attributes.js
    table.js
    utilities.js
  document-details/
    breadcrumbs.jsx
    DocumentDetails.js
    index.js
    tools-panel.jsx
  document-kb-query-layout/
    DocumentsQueryLayout.jsx
    index.js
  document-list/
    breadcrumbs.jsx
    DocumentList.jsx
    DocumentListSplitPanel.jsx
    documents-split-panel-config.js
    documents-table-config.js
    index.js
    tools-panel.jsx
  document-panel/
    DocumentPanel.css
    DocumentPanel.jsx
    index.js
  file-viewer/
    FileViewer.jsx
  genai-idp-top-navigation/
    GenAIIDPTopNavigation.jsx
    index.js
  genaidp-layout/
    breadcrumbs.jsx
    documents-split-panel.jsx
    GenAIDPLayout.jsx
    index.js
    navigation.jsx
    tools-panel.jsx
  pages-panel/
    index.js
    PagesPanel.jsx
  sections-panel/
    index.js
    SectionsPanel.jsx
  sentiment-icon/
    SentimentIcon.jsx
  sentiment-trend-icon/
    SentimentTrendIcon.jsx
contexts/
  app.js
  documents.js
  settings.js
graphql/
  queries/
    getDocument.js
    listDocuments.js
    listDocumentsDateHour.js
    listDocumentsDateShard.js
    onCreateDocument.js
    onUpdateDocument.js
    queryKnowledgeBase.js
hooks/
  use-aws-config.js
  use-current-session-creds.js
  use-graphql-api.js
  use-notifications.js
  use-parameter-store.js
  use-split-panel.js
  use-user-auth-state.js
routes/
  AuthRoutes.jsx
  constants.js
  DocumentsQueryRoutes.jsx
  DocumentsRoutes.jsx
  Routes.jsx
  UnauthRoutes.jsx
App.css
App.jsx
App.test.js
aws-exports.js
index.css
index.js
setupTests.js

================================================================
Repository Files
================================================================

================
File: components/common/constants.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// eslint-disable import/prefer-default-export

export const SYSTEM = 'System';

export const LANGUAGE_CODES = [
  { value: '', label: 'Choose a Language' },
  { value: 'af', label: 'Afrikaans' },
  { value: 'sq', label: 'Albanian' },
  { value: 'am', label: 'Amharic' },
  { value: 'ar', label: 'Arabic' },
  { value: 'hy', label: 'Armenian' },
  { value: 'az', label: 'Azerbaijani' },
  { value: 'bn', label: 'Bengali' },
  { value: 'bs', label: 'Bosnian' },
  { value: 'bg', label: 'Bulgarian' },
  { value: 'ca', label: 'Catalan' },
  { value: 'zh', label: 'Chinese (Simplified)' },
  { value: 'zh-TW', label: 'Chinese (Traditional)' },
  { value: 'hr', label: 'Croatian' },
  { value: 'cs', label: 'Czech' },
  { value: 'da', label: 'Danish' },
  { value: 'fa-AF', label: 'Dari' },
  { value: 'nl', label: 'Dutch' },
  { value: 'en', label: 'English' },
  { value: 'et', label: 'Estonian' },
  { value: 'fa', label: 'Farsi (Persian)' },
  { value: 'tl', label: 'Filipino, Tagalog' },
  { value: 'fi', label: 'Finnish' },
  { value: 'fr', label: 'French' },
  { value: 'fr-CA', label: 'French (Canada)' },
  { value: 'ka', label: 'Georgian' },
  { value: 'de', label: 'German' },
  { value: 'el', label: 'Greek' },
  { value: 'gu', label: 'Gujarati' },
  { value: 'ht', label: 'Haitian Creole' },
  { value: 'ha', label: 'Hausa' },
  { value: 'he', label: 'Hebrew' },
  { value: 'hi', label: 'Hindi' },
  { value: 'hu', label: 'Hungarian' },
  { value: 'is', label: 'Icelandic' },
  { value: 'id', label: 'Indonesian' },
  { value: 'ga', label: 'Irish' },
  { value: 'it', label: 'Italian' },
  { value: 'ja', label: 'Japanese' },
  { value: 'kn', label: 'Kannada' },
  { value: 'kk', label: 'Kazakh' },
  { value: 'ko', label: 'Korean' },
  { value: 'lv', label: 'Latvian' },
  { value: 'lt', label: 'Lithuanian' },
  { value: 'mk', label: 'Macedonian' },
  { value: 'ms', label: 'Malay' },
  { value: 'ml', label: 'Malayalam' },
  { value: 'mt', label: 'Maltese' },
  { value: 'mr', label: 'Marathi' },
  { value: 'mn', label: 'Mongolian' },
  { value: 'no', label: 'Norwegian (Bokmål)' },
  { value: 'ps', label: 'Pashto' },
  { value: 'pl', label: 'Polish' },
  { value: 'pt', label: 'Portuguese (Brazil)' },
  { value: 'pt-PT', label: 'Portuguese (Portugal)' },
  { value: 'pa', label: 'Punjabi' },
  { value: 'ro', label: 'Romanian' },
  { value: 'ru', label: 'Russian' },
  { value: 'sr', label: 'Serbian' },
  { value: 'si', label: 'Sinhala' },
  { value: 'sk', label: 'Slovak' },
  { value: 'sl', label: 'Slovenian' },
  { value: 'so', label: 'Somali' },
  { value: 'es', label: 'Spanish' },
  { value: 'es-MX', label: 'Spanish (Mexico)' },
  { value: 'sw', label: 'Swahili' },
  { value: 'sv', label: 'Swedish' },
  { value: 'ta', label: 'Tamil' },
  { value: 'te', label: 'Telugu' },
  { value: 'th', label: 'Thai' },
  { value: 'tr', label: 'Turkish' },
  { value: 'uk', label: 'Ukrainian' },
  { value: 'ur', label: 'Urdu' },
  { value: 'uz', label: 'Uzbek' },
  { value: 'vi', label: 'Vietnamese' },
  { value: 'cy', label: 'Welsh' },
];

================
File: components/common/download-func.js
================
/* eslint-disable indent */
import * as XLSX from 'xlsx';

// eslint-disable-next-line prettier/prettier
export const onImportExcelAsync = (file) => new Promise((resolve, reject) => {
    // Obtener el objeto del archivo cargado
    const { files } = file.target;
    // Leer el archivo a través del objeto FileReader

    const fileReader = new FileReader();
    fileReader.onload = (event) => {
      const { result } = event.target;
      // Leer en secuencia binaria para obtener todo el objeto de tabla de Excel
      const workbook = XLSX.read(result, { type: 'binary' });
      let data = []; // almacena los datos obtenidos
      // recorre cada hoja de trabajo para leer (aquí solo se lee la primera tabla por defecto)
      // eslint-disable-next-line no-restricted-syntax
      for (const sheet in workbook.Sheets) {
        // eslint-disable-next-line no-prototype-builtins
        if (workbook.Sheets.hasOwnProperty(sheet)) {
          // usa el método sheet_to_json para convertir Excel a datos json
          data = data.concat(XLSX.utils.sheet_to_json(workbook.Sheets[sheet]));
          // break; // Si solo se toma la primera tabla, descomenta esta línea
        }
      }
      resolve(data);

      // Aquí puede lanzar una solicitud relacionada para un error de tipo de archivo incorrecto
    };
    fileReader.onerror = reject;
    // Abre el archivo en modo binario
    fileReader.readAsBinaryString(files[0]);
  });

export const exportToExcel = async (data, nameFile) => {
  if (data.length > 0) {
    const wb = XLSX.utils.book_new();

    const ws = XLSX.utils.json_to_sheet(data, { origin: 'A2' });
    XLSX.utils.sheet_add_aoa(ws, []); // heading: array of arrays

    XLSX.utils.book_append_sheet(wb, ws);

    XLSX.writeFile(wb, `${nameFile}.xlsx`);
  }
};

export const exportToTextFile = async (text, nameFile) => {
  const blob = new Blob([text], { type: 'text/plain' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = `${nameFile}.txt`;
  link.click();
  URL.revokeObjectURL(url);
};

================
File: components/common/generate-s3-presigned-url.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { HttpRequest } from '@aws-sdk/protocol-http';
import { S3RequestPresigner } from '@aws-sdk/s3-request-presigner';
import { parseUrl } from '@aws-sdk/url-parser';
import { Sha256 } from '@aws-crypto/sha256-browser';
import { formatUrl } from '@aws-sdk/util-format-url';
import { Logger } from 'aws-amplify';

const logger = new Logger('generate-s3-presigned-url');

const generateS3PresignedUrl = async (url, credentials) => {
  // If it's already a special URL (like detailType), return as is
  if (url.includes('detailType')) {
    return url;
  }

  try {
    logger.debug('Generating presigned URL for:', url);
    // Parse the URL into components
    const urlObj = new URL(url);

    // Extract bucket name from hostname
    const bucketName = urlObj.hostname.split('.')[0];

    // Extract region from env
    const region = process.env.REACT_APP_AWS_REGION;

    // Remove leading slash and get the full key path
    const key = urlObj.pathname.substring(1);

    // Construct the canonical S3 URL
    const newUrl = `https://${bucketName}.s3.${region}.amazonaws.com/${key}`;

    // Parse the URL for the presigner
    const s3ObjectUrl = parseUrl(newUrl);
    logger.debug('Canonical URL:', newUrl);

    // Create presigner instance
    const presigner = new S3RequestPresigner({
      credentials,
      region,
      sha256: Sha256,
    });

    // Generate presigned URL
    const presignedResponse = await presigner.presign(new HttpRequest(s3ObjectUrl));
    const presignedUrl = formatUrl(presignedResponse);

    return presignedUrl;
  } catch (error) {
    throw new Error(`Failed to generate presigned URL: ${error.message}`);
  }
};

export default generateS3PresignedUrl;

================
File: components/common/info-link.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React from 'react';
import { Link } from '@awsui/components-react';

/* eslint-disable react/prop-types, jsx-a11y/anchor-is-valid */
export const InfoLink = ({ id, onFollow }) => (
  <Link variant="info" id={id} onFollow={onFollow}>
    Info
  </Link>
);

export default InfoLink;

================
File: components/common/labels.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
export const appLayoutLabels = {
  navigation: 'Side navigation',
  navigationToggle: 'Open side navigation',
  navigationClose: 'Close side navigation',
  notifications: 'Notifications',
  tools: 'Help panel',
  toolsToggle: 'Open help panel',
  toolsClose: 'Close help panel',
};

export const paginationLabels = {
  nextPageLabel: 'Next page',
  previousPageLabel: 'Previous page',
  pageLabel: (pageNumber) => `Page ${pageNumber} of all pages`,
};

================
File: components/common/local-storage.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

import { useState } from 'react';

// Hook
const useLocalStorage = (key, initialValue) => {
  // State to store our value
  // Pass initial state function to useState so logic is only executed once
  const [storedValue, setStoredValue] = useState(() => {
    if (typeof window === 'undefined') {
      return initialValue;
    }
    try {
      // Get from local storage by key
      const item = window.localStorage.getItem(key);
      // Parse stored json or if none return initialValue
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      // If error also return initialValue
      // console.log(error);
      return initialValue;
    }
  });
  // Return a wrapped version of useState's setter function that ...
  // ... persists the new value to localStorage.
  const setValue = (value) => {
    try {
      // Allow value to be a function so we have same API as useState
      const valueToStore = value instanceof Function ? value(storedValue) : value;
      // Save state
      setStoredValue(valueToStore);
      // Save to local storage
      if (typeof window !== 'undefined') {
        window.localStorage.setItem(key, JSON.stringify(valueToStore));
      }
    } catch (error) {
      // A more advanced implementation would handle the error case
      // console.log(error);
    }
  };
  return [storedValue, setValue];
};

export default useLocalStorage;

================
File: components/common/map-document-attributes.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

/* Maps document attributes from API to a format that can be used in tables and panel */
// eslint-disable-next-line arrow-body-style
const mapDocumentsAttributes = (documents) => {
  return documents.map((item) => {
    const {
      ObjectKey: objectKey,
      ObjectStatus: objectStatus,
      InitialEventTime: initialEventTime,
      QueuedTime: queuedTime,
      WorkflowStartTime: workflowStartTime,
      CompletionTime: completionTime,
      WorkflowExecutionArn: workflowExecutionArn,
      WorkflowStatus: workflowStatus,
      Sections: sections,
      Pages: pages,
      PageCount: pageCount,
      ListPK: listPK,
      ListSK: listSK,
    } = item;

    const formatDate = (timestamp) => {
      return timestamp && timestamp !== '0' ? new Date(timestamp).toISOString() : '';
    };

    const getDuration = (end, start) => {
      if (!end || end === '0' || !start || start === '0') return '';
      const duration = new Date(end) - new Date(start);
      return `${Math.floor(duration / 60000)}:${String(Math.floor((duration / 1000) % 60)).padStart(2, '0')}`;
    };

    const mapping = {
      objectKey,
      objectStatus,
      initialEventTime: formatDate(initialEventTime),
      queuedTime: formatDate(queuedTime),
      workflowStartTime: formatDate(workflowStartTime),
      completionTime: formatDate(completionTime),
      workflowExecutionArn,
      workflowStatus,
      duration: getDuration(completionTime, initialEventTime),
      sections,
      pages,
      pageCount,
      listPK,
      listSK,
    };

    console.log('mapped-document-attributes', mapping);

    return mapping;
  });
};

export default mapDocumentsAttributes;

================
File: components/common/table.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React from 'react';
import { Box, Button, Header, SpaceBetween } from '@awsui/components-react';

import { InfoLink } from './info-link';

export const getFilterCounterText = (count) => `${count} ${count === 1 ? 'match' : 'matches'}`;
/* prettier-ignore */
const getHeaderCounterText = (items = [], selectedItems = []) => (
  selectedItems && selectedItems.length > 0
    ? `(${selectedItems.length}/${items.length})`
    : `(${items.length})`
);
const getCounter = (props) => {
  if (props.counter) {
    return props.counter;
  }
  if (!props.totalItems) {
    return null;
  }
  return getHeaderCounterText(props.totalItems, props.selectedItems);
};

/* eslint-disable react/prop-types, react/destructuring-assignment */
export const TableHeader = (props) => (
  <Header
    counter={getCounter(props)}
    info={props.updateTools && <InfoLink onFollow={props.updateTools} />}
    description={props.description}
    actions={props.actionButtons}
  >
    {props.title}
  </Header>
);

export const TableEmptyState = ({ resourceName }) => (
  <Box margin={{ vertical: 'xs' }} textAlign="center" color="inherit">
    <SpaceBetween size="xxs">
      <div>
        <b>{` No ${resourceName.toLowerCase()}s`}</b>
        <Box variant="p" color="inherit">
          {`No ${resourceName.toLowerCase()}s found.`}
        </Box>
      </div>
    </SpaceBetween>
  </Box>
);

export const TableNoMatchState = (props) => (
  <Box margin={{ vertical: 'xs' }} textAlign="center" color="inherit">
    <SpaceBetween size="xxs">
      <div>
        <b>No matches</b>
        <Box variant="p" color="inherit">
          We can&apos;t find a match.
        </Box>
      </div>
      <Button onClick={props.onClearFilter}>Clear filter</Button>
    </SpaceBetween>
  </Box>
);

================
File: components/common/utilities.js
================
/* eslint-disable import/prefer-default-export */

export const getTimestampStr = () => {
  const now = new Date();
  const year = now.getFullYear();
  const month = String(now.getMonth() + 1).padStart(2, '0');
  const day = String(now.getDate()).padStart(2, '0');
  const hour = String(now.getHours()).padStart(2, '0');
  const minute = String(now.getMinutes()).padStart(2, '0');
  const second = String(now.getSeconds()).padStart(2, '0');
  const millisecond = String(now.getMilliseconds()).padStart(3, '0');
  const formattedDate = `${year}-${month}-${day}-${hour}:${minute}:${second}.${millisecond}`;
  return formattedDate;
};

================
File: components/document-details/breadcrumbs.jsx
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React from 'react';
import { useParams } from 'react-router-dom';

import { BreadcrumbGroup } from '@awsui/components-react';

import { DOCUMENTS_PATH } from '../../routes/constants';
import { documentListBreadcrumbItems } from '../document-list/breadcrumbs';

const Breadcrumbs = () => {
  const { objectKey } = useParams();
  const decodedDocumentId = decodeURIComponent(objectKey);
  const documentDetailsBreadcrumbItems = [
    ...documentListBreadcrumbItems,
    { text: decodedDocumentId, href: `#${DOCUMENTS_PATH}/${objectKey}` },
  ];

  return <BreadcrumbGroup ariaLabel="Breadcrumbs" items={documentDetailsBreadcrumbItems} />;
};

export default Breadcrumbs;

================
File: components/document-details/DocumentDetails.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import { Logger } from 'aws-amplify';

import useDocumentsContext from '../../contexts/documents';
import useSettingsContext from '../../contexts/settings';

import mapDocumentsAttributes from '../common/map-document-attributes';

import '@awsui/global-styles/index.css';

import DocumentPanel from '../document-panel';

const logger = new Logger('documentDetails');

const DocumentDetails = () => {
  const params = useParams();
  let { objectKey } = params;
  objectKey = decodeURIComponent(objectKey);

  const { documents, getDocumentDetailsFromIds, setToolsOpen } = useDocumentsContext();
  const { settings } = useSettingsContext();

  const [document, setDocument] = useState(null);

  const sendInitDocumentRequests = async () => {
    const response = await getDocumentDetailsFromIds([objectKey]);
    logger.debug('document detail response', response);
    const documentsMap = mapDocumentsAttributes(response, settings);
    const documentDetails = documentsMap[0];
    if (documentDetails) {
      setDocument(documentDetails);
    }
  };

  useEffect(() => {
    if (!objectKey) {
      return () => {};
    }
    sendInitDocumentRequests();
    return () => {};
  }, [objectKey]);

  useEffect(async () => {
    if (!objectKey || !document || !documents?.length) {
      return;
    }
    const documentsFiltered = documents.filter((c) => c.ObjectKey === objectKey);
    if (documentsFiltered && documentsFiltered?.length) {
      const documentsMap = mapDocumentsAttributes([documentsFiltered[0]], settings);
      const documentDetails = documentsMap[0];
      if (documentDetails?.updatedAt && document.updatedAt < documentDetails.updatedAt) {
        logger.debug('Updating document', documentDetails);
        setDocument(documentDetails);
      }
    }
  }, [documents, objectKey]);

  logger.debug('useEffect for documentDetails', objectKey, document, documents);

  return (
    document && (
      <DocumentPanel
        item={document}
        setToolsOpen={setToolsOpen}
        getDocumentDetailsFromIds={getDocumentDetailsFromIds}
      />
    )
  );
};

export default DocumentDetails;

================
File: components/document-details/index.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import documentDetails from './DocumentDetails';

export default documentDetails;

================
File: components/document-details/tools-panel.jsx
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React from 'react';
import { HelpPanel } from '@awsui/components-react';

const header = <h2>Meeting Details</h2>;
const content = <p>View meeting details and transcriptions.</p>;

const ToolsPanel = () => <HelpPanel header={header}>{content}</HelpPanel>;

export default ToolsPanel;

================
File: components/document-kb-query-layout/DocumentsQueryLayout.jsx
================
/* eslint-disable max-len */
import React, { useState } from 'react';
import ReactMarkdown from 'react-markdown';
import rehypeRaw from 'rehype-raw';
import { Box, Button, Spinner, Header, Grid, Container, SpaceBetween, Input, Link } from '@awsui/components-react';
import PropTypes from 'prop-types';
import { API, Logger } from 'aws-amplify';
import queryKnowledgeBase from '../../graphql/queries/queryKnowledgeBase';
import { DOCUMENTS_PATH } from '../../routes/constants';
import useSettingsContext from '../../contexts/settings';

const logger = new Logger('queryKnowledgeBase');

const ValueWithLabel = ({ label, index, children }) => (
  <>
    <Box variant="awsui-key-label">
      <span tabIndex={index}>
        <ReactMarkdown>{label ? `**Q: ${label}**` : ''}</ReactMarkdown>
      </span>
    </Box>
    {children}
  </>
);

ValueWithLabel.propTypes = {
  label: PropTypes.string.isRequired,
  index: PropTypes.number.isRequired,
  children: PropTypes.node.isRequired,
};

const CustomLink = ({ href, children }) => {
  const handleClick = (e) => {
    e.preventDefault();
    // Handle the link click here
    console.log('Link clicked:', href);
    // You can add your custom navigation logic here
  };

  return (
    <Link href={`#${DOCUMENTS_PATH}/${href}`} onClick={handleClick}>
      {children}
    </Link>
  );
};
CustomLink.propTypes = {
  href: PropTypes.string.isRequired,
  children: PropTypes.node.isRequired,
};

export const DocumentsQueryLayout = () => {
  const [inputQuery, setInputQuery] = useState('');
  const [meetingKbQueries, setMeetingKbQueries] = useState([]);
  const [meetingKbQueryStatus, setMeetingKbQueryStatus] = useState(false);
  const [kbSessionId, setKbSessionId] = useState('');
  const { settings } = useSettingsContext();

  const getElementByIdAsync = (id) =>
    // eslint-disable-next-line
    new Promise((resolve) => {
      const getElement = () => {
        const element = document.getElementById(id);
        if (element) {
          resolve(element);
        } else {
          requestAnimationFrame(getElement);
        }
      };
      getElement();
    });

  const scrollToBottomOfChat = async () => {
    const chatDiv = await getElementByIdAsync('chatDiv');
    chatDiv.scrollTop = chatDiv.scrollHeight + 200;
  };

  const getDocumentsQueryResponseFromKB = async (input, sessionId) => {
    const response = await API.graphql({
      query: queryKnowledgeBase,
      variables: { input, sessionId },
    });
    return response;
  };

  const submitQuery = (query) => {
    if (meetingKbQueryStatus === true) {
      return;
    }

    setMeetingKbQueryStatus(true);

    const responseData = {
      label: query,
      value: '...',
    };
    const currentQueries = meetingKbQueries.concat(responseData);
    setMeetingKbQueries(currentQueries);
    scrollToBottomOfChat();

    logger.debug('Submitting GraphQL query:', query);
    const queryResponse = getDocumentsQueryResponseFromKB(query, kbSessionId);

    queryResponse.then((r) => {
      const kbResponse = JSON.parse(r.data.queryKnowledgeBase);
      const kbanswer = kbResponse.markdown;
      setKbSessionId(kbResponse.sessionId);
      const queries = currentQueries.map((q) => {
        if (q.value !== '...') {
          return q;
        }
        return {
          label: q.label,
          value: kbanswer,
        };
      });
      setMeetingKbQueries(queries);
      scrollToBottomOfChat();
    });
    setMeetingKbQueryStatus(false);
  };

  const onSubmit = (e) => {
    submitQuery(inputQuery);
    setInputQuery('');
    e.preventDefault();
    return true;
  };

  // eslint-disable-next-line
  const placeholder =
    settings.ShouldUseDocumentKnowledgeBase === 'true'
      ? 'Enter a question to query your meeting transcripts knowledge base.'
      : 'Document Knowledge Base is set to DISABLED for this GENAIDP deployment.';
  // eslint-disable-next-line
  const initialMsg =
    settings.ShouldUseDocumentKnowledgeBase === 'true'
      ? 'Ask a question below.'
      : 'Document Knowledge Base queries are not enabled. Document Knowledge Base is set to DISABLED for this GENAIDP deployment.';
  return (
    <Container
      fitHeight={false}
      header={<Header variant="h2">Documents Knowledge Base Query Tool</Header>}
      /* For future use. :) */
      footer={
        <form onSubmit={onSubmit}>
          <Grid gridDefinition={[{ colspan: { default: 12, xxs: 9 } }, { default: 12, xxs: 3 }]}>
            <Input
              placeholder={`${placeholder}`}
              onChange={({ detail }) => setInputQuery(detail.value)}
              value={inputQuery}
            />
            <Button type="submit">Submit</Button>
          </Grid>
        </form>
      }
    >
      <div id="chatDiv" style={{ overflow: 'hidden', overflowY: 'auto', height: '30em' }}>
        <SpaceBetween size="m">
          {meetingKbQueries.length > 0 ? (
            meetingKbQueries.map((entry, i) => (
              // eslint-disable-next-line react/no-array-index-key
              <ValueWithLabel key={i} index={i} label={entry.label}>
                {entry.value === '...' ? (
                  <div style={{ height: '30px' }}>
                    <Spinner />
                  </div>
                ) : (
                  <ReactMarkdown
                    rehypePlugins={[rehypeRaw]}
                    components={{
                      documentid: CustomLink,
                    }}
                  >
                    {entry.value}
                  </ReactMarkdown>
                )}
              </ValueWithLabel>
            ))
          ) : (
            <ValueWithLabel key="nosummary">{`${initialMsg}`}</ValueWithLabel>
          )}
        </SpaceBetween>
      </div>
    </Container>
  );
};

export default DocumentsQueryLayout;

================
File: components/document-kb-query-layout/index.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { DocumentsQueryLayout } from './DocumentsQueryLayout';

export default DocumentsQueryLayout;

================
File: components/document-list/breadcrumbs.jsx
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React from 'react';

import { BreadcrumbGroup } from '@awsui/components-react';

import { DOCUMENTS_PATH, DEFAULT_PATH } from '../../routes/constants';

export const documentListBreadcrumbItems = [
  { text: 'Document Processing', href: `#${DEFAULT_PATH}` },
  { text: 'Documents', href: `#${DOCUMENTS_PATH}` },
];

const Breadcrumbs = () => <BreadcrumbGroup ariaLabel="Breadcrumbs" items={documentListBreadcrumbItems} />;

export default Breadcrumbs;

================
File: components/document-list/DocumentList.jsx
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React, { useEffect, useState } from 'react';
import { Table, Pagination, TextFilter } from '@awsui/components-react';
import { useCollection } from '@awsui/collection-hooks';
import { Logger } from 'aws-amplify';

import useDocumentsContext from '../../contexts/documents';
import useSettingsContext from '../../contexts/settings';

import mapDocumentsAttributes from '../common/map-document-attributes';
import { paginationLabels } from '../common/labels';
import useLocalStorage from '../common/local-storage';
import { exportToExcel } from '../common/download-func';

import {
  DocumentsPreferences,
  DocumentsCommonHeader,
  COLUMN_DEFINITIONS_MAIN,
  KEY_COLUMN_ID,
  SELECTION_LABELS,
  DEFAULT_PREFERENCES,
  DEFAULT_SORT_COLUMN,
} from './documents-table-config';

import { getFilterCounterText, TableEmptyState, TableNoMatchState } from '../common/table';

import '@awsui/global-styles/index.css';

const logger = new Logger('DocumentList');

const DocumentList = () => {
  const [documentList, setDocumentList] = useState([]);
  const { settings } = useSettingsContext();

  const {
    documents,
    isDocumentsListLoading,
    setIsDocumentsListLoading,
    setPeriodsToLoad,
    setSelectedItems,
    setToolsOpen,
    periodsToLoad,
    getDocumentDetailsFromIds,
  } = useDocumentsContext();

  const [preferences, setPreferences] = useLocalStorage('documents-list-preferences', DEFAULT_PREFERENCES);

  // prettier-ignore
  const {
    items, actions, filteredItemsCount, collectionProps, filterProps, paginationProps,
  } = useCollection(documentList, {
    filtering: {
      empty: <TableEmptyState resourceName="Meeting" />,
      noMatch: <TableNoMatchState onClearFilter={() => actions.setFiltering('')} />,
    },
    pagination: { pageSize: preferences.pageSize },
    sorting: { defaultState: { sortingColumn: DEFAULT_SORT_COLUMN, isDescending: true } },
    selection: {
      keepSelection: false,
      trackBy: KEY_COLUMN_ID,
    },
  });

  useEffect(() => {
    if (!isDocumentsListLoading) {
      logger.debug('setting documents list', documents);
      setDocumentList(mapDocumentsAttributes(documents, settings));
    } else {
      logger.debug('documents list is loading');
    }
  }, [isDocumentsListLoading, documents]);

  useEffect(() => {
    logger.debug('setting selected items', collectionProps.selectedItems);
    setSelectedItems(collectionProps.selectedItems);
  }, [collectionProps.selectedItems]);

  /* eslint-disable react/jsx-props-no-spreading */
  return (
    <Table
      {...collectionProps}
      header={
        <DocumentsCommonHeader
          resourceName="Documents"
          documents={documents}
          selectedItems={collectionProps.selectedItems}
          totalItems={documentList}
          updateTools={() => setToolsOpen(true)}
          loading={isDocumentsListLoading}
          setIsLoading={setIsDocumentsListLoading}
          periodsToLoad={periodsToLoad}
          setPeriodsToLoad={setPeriodsToLoad}
          getDocumentDetailsFromIds={getDocumentDetailsFromIds}
          downloadToExcel={() => exportToExcel(documentList, 'Meeting-List')}
          // eslint-disable-next-line max-len, prettier/prettier
        />
      }
      columnDefinitions={COLUMN_DEFINITIONS_MAIN}
      items={items}
      loading={isDocumentsListLoading}
      loadingText="Loading meetings"
      selectionType="multi"
      ariaLabels={SELECTION_LABELS}
      filter={
        <TextFilter
          {...filterProps}
          filteringAriaLabel="Filter meetings"
          filteringPlaceholder="Find meetings"
          countText={getFilterCounterText(filteredItemsCount)}
        />
      }
      wrapLines={preferences.wrapLines}
      pagination={<Pagination {...paginationProps} ariaLabels={paginationLabels} />}
      preferences={<DocumentsPreferences preferences={preferences} setPreferences={setPreferences} />}
      trackBy={items.objectKey}
      visibleColumns={[KEY_COLUMN_ID, ...preferences.visibleContent]}
      resizableColumns
    />
  );
};

export default DocumentList;

================
File: components/document-list/DocumentListSplitPanel.jsx
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React from 'react';
import { SplitPanel } from '@awsui/components-react';

import useDocumentsContext from '../../contexts/documents';

import { getPanelContent, SPLIT_PANEL_I18NSTRINGS } from './documents-split-panel-config';

import '@awsui/global-styles/index.css';

const DocumentListSplitPanel = () => {
  const { selectedItems, setToolsOpen, getDocumentDetailsFromIds } = useDocumentsContext();

  const { header: panelHeader, body: panelBody } = getPanelContent(
    selectedItems,
    'multiple',
    setToolsOpen,
    getDocumentDetailsFromIds,
  );

  return (
    <SplitPanel header={panelHeader} i18nStrings={SPLIT_PANEL_I18NSTRINGS}>
      {panelBody}
    </SplitPanel>
  );
};

export default DocumentListSplitPanel;

================
File: components/document-list/documents-split-panel-config.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React from 'react';
import { Table, ColumnLayout, Box, Link } from '@awsui/components-react';
import { SELECTION_LABELS } from './documents-table-config';
import { DOCUMENTS_PATH } from '../../routes/constants';

import DocumentPanel from '../document-panel';

export const SPLIT_PANEL_I18NSTRINGS = {
  preferencesTitle: 'Split panel preferences',
  preferencesPositionLabel: 'Split panel position',
  preferencesPositionDescription: 'Choose the default split panel position for the service.',
  preferencesPositionSide: 'Side',
  preferencesPositionBottom: 'Bottom',
  preferencesConfirm: 'Confirm',
  preferencesCancel: 'Cancel',
  closeButtonAriaLabel: 'Close panel',
  openButtonAriaLabel: 'Open panel',
  resizeHandleAriaLabel: 'Resize split panel',
};

const EMPTY_PANEL_CONTENT = {
  header: '0 documents selected',
  body: 'Select a document to see its details.',
};

const getPanelContentSingle = ({ items, setToolsOpen, getDocumentDetailsFromIds }) => {
  if (!items.length) {
    return EMPTY_PANEL_CONTENT;
  }

  const item = items[0];

  return {
    header: 'Meeting Details',
    body: (
      <DocumentPanel item={item} setToolsOpen={setToolsOpen} getDocumentDetailsFromIds={getDocumentDetailsFromIds} />
    ),
  };
};

const getPanelContentMultiple = ({ items, setToolsOpen, getDocumentDetailsFromIds }) => {
  if (!items.length) {
    return EMPTY_PANEL_CONTENT;
  }

  if (items.length === 1) {
    return getPanelContentSingle({ items, setToolsOpen, getDocumentDetailsFromIds });
  }

  return {
    header: `${items.length} documents selected`,
    body: (
      <ColumnLayout columns="4" variant="text-grid">
        <div>
          <Box margin={{ bottom: 'xxxs' }} color="text-label">
            Documents
          </Box>
          <Link fontSize="display-l" href={`#${DOCUMENTS_PATH}`} />
        </div>
      </ColumnLayout>
    ),
  };
};

// XXX to be implemented - not sure if needed
const getPanelContentComparison = ({ items, getDocumentDetailsFromIds }) => {
  if (!items.length) {
    return {
      header: '0 documents selected',
      body: 'Select a document to see its details. Select multiple documents to compare.',
    };
  }

  if (items.length === 1) {
    return getPanelContentSingle({ items, getDocumentDetailsFromIds });
  }
  const keyHeaderMap = {
    objectKey: 'Document ID',
    initiationTimeStamp: 'Submission Timestramp',
  };
  const transformedData = ['objectKey', 'initiationTimeStamp'].map((key) => {
    const data = { comparisonType: keyHeaderMap[key] };

    items.forEach((item) => {
      data[item.id] = item[key];
    });

    return data;
  });

  const columnDefinitions = [
    {
      id: 'comparisonType',
      header: '',
      cell: ({ comparisonType }) => <b>{comparisonType}</b>,
    },
    ...items.map(({ id }) => ({
      id,
      header: id,
      cell: (item) => (Array.isArray(item[id]) ? item[id].join(', ') : item[id]),
    })),
  ];

  return {
    header: `${items.length} documents selected`,
    body: (
      <Box padding={{ bottom: 'l' }}>
        <Table
          ariaLabels={SELECTION_LABELS}
          header={<h2>Compare details</h2>}
          items={transformedData}
          columnDefinitions={columnDefinitions}
        />
      </Box>
    ),
  };
};

export const getPanelContent = (items, type, setToolsOpen, getDocumentDetailsFromIds) => {
  if (type === 'single') {
    return getPanelContentSingle({ items, setToolsOpen, getDocumentDetailsFromIds });
  }
  if (type === 'multiple') {
    return getPanelContentMultiple({ items, setToolsOpen, getDocumentDetailsFromIds });
  }
  return getPanelContentComparison({ items, getDocumentDetailsFromIds });
};

================
File: components/document-list/documents-table-config.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React from 'react';
import { Button, ButtonDropdown, CollectionPreferences, Link, SpaceBetween } from '@awsui/components-react';

import { TableHeader } from '../common/table';
import { DOCUMENTS_PATH } from '../../routes/constants';

export const KEY_COLUMN_ID = 'objectKey';

export const COLUMN_DEFINITIONS_MAIN = [
  {
    id: KEY_COLUMN_ID,
    header: 'Document ID',
    cell: (item) => <Link href={`#${DOCUMENTS_PATH}/${encodeURIComponent(item.objectKey)}`}>{item.objectKey}</Link>,
    sortingField: 'objectKey',
    width: 300,
  },
  {
    id: 'objectStatus',
    header: 'Status',
    cell: (item) => item.objectStatus,
    sortingField: 'objectStatus',
    width: 150,
  },
  {
    id: 'initialEventTime',
    header: 'Submitted',
    cell: (item) => item.initialEventTime,
    sortingField: 'initialEventTime',
    isDescending: false,
    width: 225,
  },
  {
    id: 'completionTime',
    header: 'Completed',
    cell: (item) => item.completionTime,
    sortingField: 'completionTime',
    width: 225,
  },
  {
    id: 'duration',
    header: 'Duration',
    cell: (item) => item.duration,
    sortingField: 'duration',
    width: 150,
  },
];

export const DEFAULT_SORT_COLUMN = COLUMN_DEFINITIONS_MAIN[2];

export const SELECTION_LABELS = {
  itemSelectionLabel: (data, row) => `select ${row.objectKey}`,
  allItemsSelectionLabel: () => 'select all',
  selectionGroupLabel: 'Document selection',
};

const PAGE_SIZE_OPTIONS = [
  { value: 10, label: '10 Documents' },
  { value: 30, label: '30 Documents' },
  { value: 50, label: '50 Documents' },
];

const VISIBLE_CONTENT_OPTIONS = [
  {
    label: 'Document list properties',
    options: [
      { id: 'objectKey', label: 'Document ID', editable: false },
      { id: 'objectStatus', label: 'Status' },
      { id: 'initialEventTime', label: 'Submitted' },
      { id: 'completionTime', label: 'Completed' },
      { id: 'duration', label: 'Duration' },
    ],
  },
];

const VISIBLE_CONTENT = ['objectKey', 'objectStatus', 'initialEventTime', 'completionTime', 'duration'];

export const DEFAULT_PREFERENCES = {
  pageSize: PAGE_SIZE_OPTIONS[0].value,
  visibleContent: VISIBLE_CONTENT,
  wraplines: false,
};

/* eslint-disable react/prop-types, react/jsx-props-no-spreading */
export const DocumentsPreferences = ({
  preferences,
  setPreferences,
  disabled,
  pageSizeOptions = PAGE_SIZE_OPTIONS,
  visibleContentOptions = VISIBLE_CONTENT_OPTIONS,
}) => (
  <CollectionPreferences
    title="Preferences"
    confirmLabel="Confirm"
    cancelLabel="Cancel"
    disabled={disabled}
    preferences={preferences}
    onConfirm={({ detail }) => setPreferences(detail)}
    pageSizePreference={{
      title: 'Page size',
      options: pageSizeOptions,
    }}
    wrapLinesPreference={{
      label: 'Wrap lines',
      description: 'Check to see all the text and wrap the lines',
    }}
    visibleContentPreference={{
      title: 'Select visible columns',
      options: visibleContentOptions,
    }}
  />
);

// number of shards per day used by the list documents API
export const DOCUMENT_LIST_SHARDS_PER_DAY = 6;
const TIME_PERIOD_DROPDOWN_CONFIG = {
  'refresh-2h': { count: 0.5, text: '2 hrs' },
  'refresh-4h': { count: 1, text: '4 hrs' },
  'refresh-8h': { count: DOCUMENT_LIST_SHARDS_PER_DAY / 3, text: '8 hrs' },
  'refresh-1d': { count: DOCUMENT_LIST_SHARDS_PER_DAY, text: '1 day' },
  'refresh-2d': { count: 2 * DOCUMENT_LIST_SHARDS_PER_DAY, text: '2 days' },
  'refresh-1w': { count: 7 * DOCUMENT_LIST_SHARDS_PER_DAY, text: '1 week' },
  'refresh-2w': { count: 14 * DOCUMENT_LIST_SHARDS_PER_DAY, text: '2 weeks' },
  'refresh-1m': { count: 30 * DOCUMENT_LIST_SHARDS_PER_DAY, text: '30 days' },
};
const TIME_PERIOD_DROPDOWN_ITEMS = Object.keys(TIME_PERIOD_DROPDOWN_CONFIG).map((k) => ({
  id: k,
  ...TIME_PERIOD_DROPDOWN_CONFIG[k],
}));

// local storage key to persist the last periods to load
export const PERIODS_TO_LOAD_STORAGE_KEY = 'periodsToLoad';

export const DocumentsCommonHeader = ({ resourceName = 'Documents', ...props }) => {
  const onPeriodToLoadChange = ({ detail }) => {
    const { id } = detail;
    const shardCount = TIME_PERIOD_DROPDOWN_CONFIG[id].count;
    props.setPeriodsToLoad(shardCount);
    localStorage.setItem(PERIODS_TO_LOAD_STORAGE_KEY, JSON.stringify(shardCount));
  };

  // eslint-disable-next-line
  const periodText =
    TIME_PERIOD_DROPDOWN_ITEMS.filter((i) => i.count === props.periodsToLoad)[0]?.text || '';

  return (
    <TableHeader
      title={resourceName}
      actionButtons={
        <SpaceBetween size="xxs" direction="horizontal">
          <ButtonDropdown loading={props.loading} onItemClick={onPeriodToLoadChange} items={TIME_PERIOD_DROPDOWN_ITEMS}>
            {`Load: ${periodText}`}
          </ButtonDropdown>
          <Button
            iconName="refresh"
            variant="normal"
            loading={props.loading}
            onClick={() => props.setIsLoading(true)}
          />
          <Button
            iconName="download"
            variant="normal"
            loading={props.loading}
            onClick={() => props.downloadToExcel()}
          />
        </SpaceBetween>
      }
      {...props}
    />
  );
};

================
File: components/document-list/index.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import DocumentList from './DocumentList';

export default DocumentList;

================
File: components/document-list/tools-panel.jsx
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React from 'react';
import { HelpPanel } from '@awsui/components-react';

const header = <h2>Documents</h2>;
const content = (
  <>
    <p>View a list of meetings and related information.</p>
    <p>Use the search bar to filter on any field.</p>
    <p>To drill down even further into the details, select an individual meeting.</p>
  </>
);

const ToolsPanel = () => <HelpPanel header={header}>{content}</HelpPanel>;

export default ToolsPanel;

================
File: components/document-panel/DocumentPanel.css
================
/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
   SPDX-License-Identifier: Apache-2.0 */
.transcript-box {
    overflow-y: auto;
}

.transcript-segment {
    display: flex;
    align-items: center;
}

.transcript-segment-agent-assist {
    background-color: #f1faff;
    padding: 2px;
}

.translated-text {
    color: dodgerblue;
}

.sentiment-image-popover {
    cursor: pointer;
}
.issue-detected {
    text-decoration: underline;
    text-decoration-color: red;
    text-decoration-thickness: 3px;
}
span.issue-span {
    text-decoration: underline;
    text-decoration-color: red;
    text-decoration-thickness: 2px;
}

span.issue-pill {
    background-color: red;
    border-radius: 2em;
    padding-left: 1em;
    padding-right: 1em;
    line-height: 2.5em;
    color: white;
    padding-bottom: 0.1em;
}

.transcript-segment-category-match  {
    background-color: lavender;
    border-radius: 2em;
    padding-left: 1em;
    padding-right: 1em;
    padding-bottom: 0.1em;
    line-height: 2.5em !important;
}

.transcript-segment-category-match p {
    height:1.5em;
    padding: 0px !important;
}

.transcript-segment-category-match-alert  {
    background-color: rgb(255, 147, 147);
    border-radius: 2em;
    padding-left: 1em;
    padding-right: 1em;
    padding-bottom: 0.1em;
    line-height: 2.5em !important;
}
.transcript-segment-category-match-alert p {
    height:1.5em;
    padding: 0px !important;
    color:white;
}

.hide-transcript {
    display:none;
}

================
File: components/document-panel/DocumentPanel.jsx
================
/* eslint-disable react/prop-types */
import React from 'react';
import { Box, ColumnLayout, Container, SpaceBetween } from '@awsui/components-react';
import { Logger } from 'aws-amplify';
import './DocumentPanel.css';
import FileViewer from '../file-viewer/FileViewer';
import SectionsPanel from '../sections-panel';
import PagesPanel from '../pages-panel';

const logger = new Logger('DocumentPanel');

const DocumentAttributes = ({ item }) => {
  return (
    <Container>
      <ColumnLayout columns={6} variant="text-grid">
        <SpaceBetween size="xs">
          <div>
            <Box margin={{ bottom: 'xxxs' }} color="text-label">
              <strong>Document ID</strong>
            </Box>
            <div>{item.objectKey}</div>
          </div>
        </SpaceBetween>

        <SpaceBetween size="xs">
          <div>
            <Box margin={{ bottom: 'xxxs' }} color="text-label">
              <strong>Submitted</strong>
            </Box>
            <div>{item.initialEventTime}</div>
          </div>
        </SpaceBetween>

        <SpaceBetween size="xs">
          <div>
            <Box margin={{ bottom: 'xxxs' }} color="text-label">
              <strong>Completed</strong>
            </Box>
            <div>{item.completionTime}</div>
          </div>
        </SpaceBetween>

        <SpaceBetween size="xs">
          <div>
            <Box margin={{ bottom: 'xxxs' }} color="text-label">
              <strong>Duration</strong>
            </Box>
            <div>{item.duration}</div>
          </div>
        </SpaceBetween>
      </ColumnLayout>
    </Container>
  );
};

export const DocumentPanel = ({ item, setToolsOpen, getDocumentDetailsFromIds }) => {
  logger.debug('DocumentPanel item', item);
  return (
    <SpaceBetween size="s">
      <DocumentAttributes
        item={item}
        setToolsOpen={setToolsOpen}
        getDocumentDetailsFromIds={getDocumentDetailsFromIds}
      />
      <FileViewer objectKey={item.objectKey} />
      <SectionsPanel sections={item.sections} />
      <PagesPanel pages={item.pages} />
    </SpaceBetween>
  );
};

export default DocumentPanel;

================
File: components/document-panel/index.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { DocumentPanel } from './DocumentPanel';

export default DocumentPanel;

================
File: components/file-viewer/FileViewer.jsx
================
/* eslint-disable react/prop-types */
import React, { useState } from 'react';
import { Box, SpaceBetween, Button } from '@awsui/components-react';
import { Logger } from 'aws-amplify';
import useSettingsContext from '../../contexts/settings';
import generateS3PresignedUrl from '../common/generate-s3-presigned-url';
import useAppContext from '../../contexts/app';

const logger = new Logger('FileViewer');

const FileViewer = ({ objectKey }) => {
  const [presignedUrl, setPresignedUrl] = useState(null);
  const { settings } = useSettingsContext();
  const { currentCredentials } = useAppContext();
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  const generateUrl = async () => {
    setIsLoading(true);
    setError(null);
    try {
      if (!settings.InputBucket) {
        throw new Error('Input bucket not configured');
      }
      const region = process.env.REACT_APP_AWS_REGION;
      logger.info('Generating presigned URL for bucket, key, region:', settings.InputBucket, objectKey, region);
      const s3Url = `https://${settings.InputBucket}.s3.${region}.amazonaws.com/${objectKey}`;
      logger.info('Generating presigned URL for:', s3Url);
      const url = await generateS3PresignedUrl(s3Url, currentCredentials);
      setPresignedUrl(url);
    } catch (err) {
      logger.error('Error generating presigned URL:', err);
      setError('Failed to load document. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const closeViewer = () => {
    setPresignedUrl(null);
  };

  return (
    <Box>
      {!presignedUrl && (
        <Button onClick={generateUrl} loading={isLoading} disabled={isLoading}>
          View Source Document
        </Button>
      )}

      {error && (
        <Box color="text-status-error" padding="s">
          {error}
        </Box>
      )}

      {presignedUrl && (
        <SpaceBetween size="s">
          <Button onClick={closeViewer}>Close Viewer</Button>
          <Box className="pdf-container" padding={{ top: 's' }}>
            <iframe src={presignedUrl} title="Document Viewer" width="100%" height="800px" className="h-full w-full" />
          </Box>
        </SpaceBetween>
      )}
    </Box>
  );
};

export default FileViewer;

================
File: components/genai-idp-top-navigation/GenAIIDPTopNavigation.jsx
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React, { useState } from 'react';
import { Box, Button, Modal, SpaceBetween, TopNavigation } from '@awsui/components-react';
import { Auth, Logger } from 'aws-amplify';

import useAppContext from '../../contexts/app';

const logger = new Logger('TopNavigation');

/* eslint-disable react/prop-types */
const SignOutModal = ({ visible, setVisible }) => {
  async function signOut() {
    try {
      await Auth.signOut();
      logger.debug('signed out');
      window.location.reload();
    } catch (error) {
      logger.error('error signing out: ', error);
    }
  }
  return (
    <Modal
      onDismiss={() => setVisible(false)}
      visible={visible}
      closeAriaLabel="Close modal"
      size="medium"
      footer={
        <Box float="right">
          <SpaceBetween direction="horizontal" size="xs">
            <Button variant="link" onClick={() => setVisible(false)}>
              Cancel
            </Button>
            <Button variant="primary" onClick={() => signOut()}>
              Sign Out
            </Button>
          </SpaceBetween>
        </Box>
      }
      header="Sign Out"
    >
      Sign out of the application?
    </Modal>
  );
};

const GenAIDPTopNavigation = () => {
  const { user } = useAppContext();
  const userId = user?.attributes?.email || 'user';
  const [isSignOutModalVisible, setIsSignOutModalVisiblesetVisible] = useState(false);
  return (
    <>
      <div id="top-navigation" style={{ position: 'sticky', top: 0, zIndex: 1002 }}>
        <TopNavigation
          identity={{ href: '#', title: 'GenAIDP Console' }}
          i18nStrings={{ overflowMenuTriggerText: 'More' }}
          utilities={[
            {
              type: 'menu-dropdown',
              text: userId,
              description: userId,
              iconName: 'user-profile',
              items: [
                {
                  id: 'signout',
                  type: 'button',
                  text: (
                    <Button variant="primary" onClick={() => setIsSignOutModalVisiblesetVisible(true)}>
                      Sign out
                    </Button>
                  ),
                },
                {
                  id: 'support-group',
                  text: 'Resources',
                  items: [
                    {
                      id: 'documentation',
                      text: 'Blog Post',
                      href: 'https://www.amazon.com/genaidp',
                      external: true,
                      externalIconAriaLabel: ' (opens in new tab)',
                    },
                    {
                      id: 'source',
                      text: 'Source Code',
                      href: 'https://gitlab.aws.dev/genaiic-reusable-assets/engagement-artifacts/genaiic-idp-accelerator',
                      external: true,
                      externalIconAriaLabel: ' (opens in new tab)',
                    },
                  ],
                },
              ],
            },
          ]}
        />
      </div>
      <SignOutModal visible={isSignOutModalVisible} setVisible={setIsSignOutModalVisiblesetVisible} />
    </>
  );
};

export default GenAIDPTopNavigation;

================
File: components/genai-idp-top-navigation/index.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import GenAIDPTopNavigation from './GenAIIDPTopNavigation';

export default GenAIDPTopNavigation;

================
File: components/genaidp-layout/breadcrumbs.jsx
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React from 'react';
import { Route, Switch, useRouteMatch } from 'react-router-dom';

import DocumentListBreadCrumbs from '../document-list/breadcrumbs';
import DocumentDetailsBreadCrumbs from '../document-details/breadcrumbs';

const Breadcrumbs = () => {
  const { path } = useRouteMatch();

  return (
    <Switch>
      <Route exact path={path}>
        <DocumentListBreadCrumbs />
      </Route>
      <Route path={`${path}/:objectKey`}>
        <DocumentDetailsBreadCrumbs />
      </Route>
    </Switch>
  );
};

export default Breadcrumbs;

================
File: components/genaidp-layout/documents-split-panel.jsx
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React from 'react';
import { Route, Switch, useRouteMatch } from 'react-router-dom';
import { Logger } from 'aws-amplify';

import { DOCUMENTS_PATH } from '../../routes/constants';

import DocumentListSplitPanel from '../document-list/DocumentListSplitPanel';

const logger = new Logger('CallsSplitPanel');

const CallsSplitPanel = () => {
  const { path } = useRouteMatch();
  logger.debug('path', path);
  return (
    <Switch>
      <Route exact path={DOCUMENTS_PATH}>
        <DocumentListSplitPanel />
      </Route>
    </Switch>
  );
};

export default CallsSplitPanel;

================
File: components/genaidp-layout/GenAIDPLayout.jsx
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React, { useState } from 'react';
import { Switch, Route, useRouteMatch } from 'react-router-dom';
import { AppLayout, Flashbar } from '@awsui/components-react';

import { Logger } from 'aws-amplify';

import { DocumentsContext } from '../../contexts/documents';

import useNotifications from '../../hooks/use-notifications';
import useSplitPanel from '../../hooks/use-split-panel';
import useGraphQlApi from '../../hooks/use-graphql-api';

import DocumentList from '../document-list';
import DocumentDetails from '../document-details';
import DocumentsQueryLayout from '../document-kb-query-layout';
import { appLayoutLabels } from '../common/labels';

import Navigation from './navigation';
import Breadcrumbs from './breadcrumbs';
import ToolsPanel from './tools-panel';
import SplitPanel from './documents-split-panel';

import { DOCUMENT_LIST_SHARDS_PER_DAY, PERIODS_TO_LOAD_STORAGE_KEY } from '../document-list/documents-table-config';

import useAppContext from '../../contexts/app';

const logger = new Logger('GenAIDPLayout');

const GenAIDPLayout = () => {
  const { navigationOpen, setNavigationOpen } = useAppContext();

  const { path } = useRouteMatch();
  logger.debug('path', path);

  const notifications = useNotifications();
  const [toolsOpen, setToolsOpen] = useState(false);
  const [selectedItems, setSelectedItems] = useState([]);

  const getInitialPeriodsToLoad = () => {
    // default to 2 hours - half of one (4hr) shard period
    let periods = 0.5;
    try {
      const periodsFromStorage = Math.abs(JSON.parse(localStorage.getItem(PERIODS_TO_LOAD_STORAGE_KEY)));
      // prettier-ignore
      if (
        !Number.isFinite(periodsFromStorage)
        // load max of to 30 days
        || periodsFromStorage > DOCUMENT_LIST_SHARDS_PER_DAY * 30
      ) {
        logger.warn('invalid initialPeriodsToLoad value from local storage');
      } else {
        periods = (periodsFromStorage > 0) ? periodsFromStorage : periods;
        localStorage.setItem(PERIODS_TO_LOAD_STORAGE_KEY, JSON.stringify(periods));
      }
    } catch {
      logger.warn('failed to parse initialPeriodsToLoad from local storage');
    }

    return periods;
  };
  const initialPeriodsToLoad = getInitialPeriodsToLoad();

  const {
    documents,
    getDocumentDetailsFromIds,
    isDocumentsListLoading,
    periodsToLoad,
    setIsDocumentsListLoading,
    setPeriodsToLoad,
  } = useGraphQlApi({ initialPeriodsToLoad });

  // eslint-disable-next-line prettier/prettier
  const {
    splitPanelOpen,
    onSplitPanelToggle,
    splitPanelSize,
    onSplitPanelResize,
  } = useSplitPanel(selectedItems);

  // eslint-disable-next-line react/jsx-no-constructed-context-values
  const documentsContextValue = {
    documents,
    getDocumentDetailsFromIds,
    isDocumentsListLoading,
    selectedItems,
    setIsDocumentsListLoading,
    setPeriodsToLoad,
    setToolsOpen,
    setSelectedItems,
    periodsToLoad,
    toolsOpen,
  };

  return (
    <DocumentsContext.Provider value={documentsContextValue}>
      <AppLayout
        headerSelector="#top-navigation"
        navigation={<Navigation />}
        navigationOpen={navigationOpen}
        onNavigationChange={({ detail }) => setNavigationOpen(detail.open)}
        breadcrumbs={<Breadcrumbs />}
        notifications={<Flashbar items={notifications} />}
        tools={<ToolsPanel />}
        toolsOpen={toolsOpen}
        onToolsChange={({ detail }) => setToolsOpen(detail.open)}
        splitPanelOpen={splitPanelOpen}
        onSplitPanelToggle={onSplitPanelToggle}
        splitPanelSize={splitPanelSize}
        onSplitPanelResize={onSplitPanelResize}
        splitPanel={<SplitPanel />}
        content={
          <Switch>
            <Route exact path={path}>
              <DocumentList />
            </Route>
            <Route path={`${path}/query`}>
              <DocumentsQueryLayout />
            </Route>
            <Route path={`${path}/:objectKey`}>
              <DocumentDetails />
            </Route>
          </Switch>
        }
        ariaLabels={appLayoutLabels}
      />
    </DocumentsContext.Provider>
  );
};

export default GenAIDPLayout;

================
File: components/genaidp-layout/index.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import GenAIDPLayout from './GenAIDPLayout';

export default GenAIDPLayout;

================
File: components/genaidp-layout/navigation.jsx
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { React } from 'react';
import { Route, Switch, useLocation } from 'react-router-dom';
import { SideNavigation } from '@awsui/components-react';

import { DOCUMENTS_PATH, DOCUMENTS_KB_QUERY_PATH, DEFAULT_PATH } from '../../routes/constants';

export const documentsNavHeader = { text: 'Tools', href: `#${DEFAULT_PATH}` };
export const documentsNavItems = [
  { type: 'link', text: 'Document List', href: `#${DOCUMENTS_PATH}` },
  { type: 'link', text: 'Document KB (coming)', href: `#${DOCUMENTS_KB_QUERY_PATH}` },
  {
    type: 'section',
    text: 'Resources',
    items: [
      {
        type: 'link',
        text: 'README',
        href: 'https://gitlab.aws.dev/genaiic-reusable-assets/engagement-artifacts/genaiic-idp-accelerator/-/blob/main/README.md',
        external: true,
      },
      {
        type: 'link',
        text: 'Source Code',
        href: 'https://gitlab.aws.dev/genaiic-reusable-assets/engagement-artifacts/genaiic-idp-accelerator',
        external: true,
      },
    ],
  },
];

const defaultOnFollowHandler = (ev) => {
  // XXX keep the locked href for our demo pages
  // ev.preventDefault();
  console.log(ev);
};

/* eslint-disable react/prop-types */
const Navigation = ({
  header = documentsNavHeader,
  items = documentsNavItems,
  onFollowHandler = defaultOnFollowHandler,
}) => {
  const location = useLocation();
  const path = location.pathname;
  let activeHref = `#${DEFAULT_PATH}`;
  if (path.includes(DOCUMENTS_KB_QUERY_PATH)) {
    activeHref = `#${DOCUMENTS_KB_QUERY_PATH}`;
  } else if (path.includes(DOCUMENTS_PATH)) {
    activeHref = `#${DOCUMENTS_PATH}`;
  }
  return (
    <Switch>
      <Route path={DOCUMENTS_PATH}>
        <SideNavigation
          items={items || documentsNavItems}
          header={header || documentsNavHeader}
          activeHref={activeHref}
          onFollow={onFollowHandler}
        />
      </Route>
    </Switch>
  );
};

export default Navigation;

================
File: components/genaidp-layout/tools-panel.jsx
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React from 'react';
import { Route, Switch, useRouteMatch } from 'react-router-dom';

import DocumentListToolsPanel from '../document-list/tools-panel';
import DocumentDetailsToolsPanel from '../document-details/tools-panel';

const ToolsPanel = () => {
  const { path } = useRouteMatch();

  return (
    <Switch>
      <Route exact path={path}>
        <DocumentListToolsPanel />
      </Route>
      <Route path={`${path}/:objectKey`}>
        <DocumentDetailsToolsPanel />
      </Route>
    </Switch>
  );
};

export default ToolsPanel;

================
File: components/pages-panel/index.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import PagesPanel from './PagesPanel';

export default PagesPanel;

================
File: components/pages-panel/PagesPanel.jsx
================
/* eslint-disable react/prop-types */
import React, { useState } from 'react';
import { Box, Button, Container, SpaceBetween, Table } from '@awsui/components-react';
import { Logger } from 'aws-amplify';
import useAppContext from '../../contexts/app';
import generateS3PresignedUrl from '../common/generate-s3-presigned-url';

const logger = new Logger('PagesPanel');

// Separate component for the ViewTextButton
const ViewTextButton = ({ page, onView, isLoading, selectedPageId }) => (
  <Button onClick={() => onView(page)} loading={isLoading && selectedPageId === page.Id}>
    View Text
  </Button>
);

// Cell renderer components
const IdCell = ({ item }) => <span>{item.Id}</span>;
const ClassCell = ({ item }) => <span>{item.Class || '-'}</span>;
const ThumbnailCell = ({ imageUrl }) => (
  <div style={{ width: '100px', height: '100px' }}>
    {imageUrl ? (
      <a href={imageUrl} target="_blank" rel="noopener noreferrer" style={{ cursor: 'pointer' }}>
        <img
          src={imageUrl}
          alt="Page thumbnail"
          style={{
            maxWidth: '100%',
            maxHeight: '100%',
            objectFit: 'contain',
            transition: 'transform 0.2s',
            ':hover': {
              transform: 'scale(1.05)',
            },
          }}
          title="Click to view full size image"
        />
      </a>
    ) : (
      <Box textAlign="center" color="inherit">
        No image
      </Box>
    )}
  </div>
);

const ActionsCell = ({ item, onView, isLoading, selectedPageId }) =>
  item.TextUri ? (
    <ViewTextButton page={item} onView={onView} isLoading={isLoading} selectedPageId={selectedPageId} />
  ) : (
    <Box color="text-status-inactive">No text available</Box>
  );

// Column definitions
const COLUMN_DEFINITIONS = [
  {
    id: 'id',
    header: 'Page ID',
    cell: (item) => <IdCell item={item} />,
    sortingField: 'Id',
  },
  {
    id: 'class',
    header: 'Class/Type',
    cell: (item) => <ClassCell item={item} />,
    sortingField: 'Class',
  },
  {
    id: 'thumbnail',
    header: 'Thumbnail',
    cell: (item, { thumbnailUrls }) => <ThumbnailCell imageUrl={thumbnailUrls[item.Id]} />,
  },
  {
    id: 'actions',
    header: 'Actions',
    cell: (item, { onView, isLoading, selectedPageId }) => (
      <ActionsCell item={item} onView={onView} isLoading={isLoading} selectedPageId={selectedPageId} />
    ),
  },
];

const PagesPanel = ({ pages }) => {
  const [selectedPageId, setSelectedPageId] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [textUrl, setTextUrl] = useState(null);
  const [thumbnailUrls, setThumbnailUrls] = useState({});
  const { currentCredentials } = useAppContext();

  const loadThumbnails = async () => {
    if (!pages) return;

    const urls = {};
    await Promise.all(
      pages.map(async (page) => {
        if (page.ImageUri) {
          try {
            const url = await generateS3PresignedUrl(page.ImageUri, currentCredentials);
            urls[page.Id] = url;
          } catch (err) {
            logger.error('Error generating presigned URL for thumbnail:', err);
            urls[page.Id] = null;
          }
        }
      }),
    );
    setThumbnailUrls(urls);
  };

  React.useEffect(() => {
    loadThumbnails();
  }, [pages]);

  const handleViewText = async (page) => {
    setIsLoading(true);
    setSelectedPageId(page.Id);
    try {
      const url = await generateS3PresignedUrl(page.TextUri, currentCredentials);
      setTextUrl(url);
    } catch (err) {
      logger.error('Error generating presigned URL:', err);
    } finally {
      setIsLoading(false);
    }
  };

  // Create column definitions with necessary context
  const columnDefinitions = COLUMN_DEFINITIONS.map((column) => ({
    ...column,
    cell: (item) =>
      column.cell(item, {
        onView: handleViewText,
        isLoading,
        selectedPageId,
        thumbnailUrls,
      }),
  }));

  return (
    <SpaceBetween size="l">
      <Container header={<h2>Document Pages</h2>}>
        <Table
          columnDefinitions={columnDefinitions}
          items={pages || []}
          sortingDisabled
          variant="embedded"
          empty={
            <Box textAlign="center" color="inherit">
              <b>No pages</b>
              <Box padding={{ bottom: 's' }} variant="p" color="inherit">
                This document has no pages.
              </Box>
            </Box>
          }
        />
      </Container>

      {textUrl && (
        <Container
          header={
            <SpaceBetween size="m" direction="horizontal">
              <h3>Page {selectedPageId} Text Content</h3>
              <Button
                onClick={() => {
                  setTextUrl(null);
                  setSelectedPageId(null);
                }}
              >
                Close
              </Button>
            </SpaceBetween>
          }
        >
          <iframe
            src={textUrl}
            title="Text Viewer"
            width="100%"
            height="400px"
            style={{
              border: '1px solid #eaeded',
              borderRadius: '4px',
            }}
          />
        </Container>
      )}
    </SpaceBetween>
  );
};

export default PagesPanel;

================
File: components/sections-panel/index.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import SectionsPanel from './SectionsPanel';

export default SectionsPanel;

================
File: components/sections-panel/SectionsPanel.jsx
================
/* eslint-disable react/prop-types */
import React, { useState } from 'react';
import { Box, Button, Container, SpaceBetween, Table } from '@awsui/components-react';
import { Logger } from 'aws-amplify';
import useAppContext from '../../contexts/app';
import generateS3PresignedUrl from '../common/generate-s3-presigned-url';

const logger = new Logger('SectionsPanel');

// Separate component for the ViewJsonButton
const ViewJsonButton = ({ section, onView, isLoading, selectedSectionId }) => (
  <Button onClick={() => onView(section)} loading={isLoading && selectedSectionId === section.Id}>
    View JSON
  </Button>
);

// Separate component for the cell renderers
const IdCell = ({ item }) => <span>{item.Id}</span>;
const ClassCell = ({ item }) => <span>{item.Class}</span>;
const PageIdsCell = ({ item }) => <span>{item.PageIds.join(', ')}</span>;
const ActionsCell = ({ item, onView, isLoading, selectedSectionId }) => (
  <ViewJsonButton section={item} onView={onView} isLoading={isLoading} selectedSectionId={selectedSectionId} />
);

// Column definitions moved outside component
const COLUMN_DEFINITIONS = [
  {
    id: 'id',
    header: 'Section ID',
    cell: (item) => <IdCell item={item} />,
    sortingField: 'Id',
  },
  {
    id: 'class',
    header: 'Class/Type',
    cell: (item) => <ClassCell item={item} />,
    sortingField: 'Class',
  },
  {
    id: 'pageIds',
    header: 'Page IDs',
    cell: (item) => <PageIdsCell item={item} />,
  },
  {
    id: 'actions',
    header: 'Actions',
    cell: (item, { onView, isLoading, selectedSectionId }) => (
      <ActionsCell item={item} onView={onView} isLoading={isLoading} selectedSectionId={selectedSectionId} />
    ),
  },
];

const SectionsPanel = ({ sections }) => {
  const [selectedSectionId, setSelectedSectionId] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [jsonUrl, setJsonUrl] = useState(null);
  const { currentCredentials } = useAppContext();

  const handleViewJson = async (section) => {
    setIsLoading(true);
    setSelectedSectionId(section.Id);
    try {
      const s3Url = section.OutputJSONUri;

      logger.info('Generating presigned URL for:', s3Url);

      // Use the existing generateS3PresignedUrl utility
      const url = await generateS3PresignedUrl(s3Url, currentCredentials);
      setJsonUrl(url);
    } catch (err) {
      logger.error('Error generating presigned URL:', err);
    } finally {
      setIsLoading(false);
    }
  };

  // Create column definitions with necessary context
  const columnDefinitions = COLUMN_DEFINITIONS.map((column) => ({
    ...column,
    cell: (item) =>
      column.cell(item, {
        onView: handleViewJson,
        isLoading,
        selectedSectionId,
      }),
  }));

  return (
    <SpaceBetween size="l">
      <Container header={<h2>Document Sections</h2>}>
        <Table
          columnDefinitions={columnDefinitions}
          items={sections || []}
          sortingDisabled
          variant="embedded"
          empty={
            <Box textAlign="center" color="inherit">
              <b>No sections</b>
              <Box padding={{ bottom: 's' }} variant="p" color="inherit">
                This document has no sections.
              </Box>
            </Box>
          }
        />
      </Container>

      {jsonUrl && (
        <Container
          header={
            <SpaceBetween size="m" direction="horizontal">
              <h3>Section {selectedSectionId} JSON Content</h3>
              <Button
                onClick={() => {
                  setJsonUrl(null);
                  setSelectedSectionId(null);
                }}
              >
                Close
              </Button>
            </SpaceBetween>
          }
        >
          <iframe
            src={jsonUrl}
            title="JSON Viewer"
            width="100%"
            height="400px"
            style={{
              border: '1px solid #eaeded',
              borderRadius: '4px',
            }}
          />
        </Container>
      )}
    </SpaceBetween>
  );
};

export default SectionsPanel;

================
File: components/sentiment-icon/SentimentIcon.jsx
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

import React from 'react';
import PropTypes from 'prop-types';
import { FiSmile, FiMeh, FiFrown } from 'react-icons/fi';

const style = {
  verticalAlign: 'middle',
};

export const SentimentIcon = ({ sentiment = 'NEUTRAL', size = '1.5em' }) => {
  if (sentiment === 'POSITIVE') {
    return <FiSmile style={style} color="green" size={size} title="positive" />;
  }

  if (sentiment === 'NEGATIVE') {
    return <FiFrown style={style} color="red" size={size} title="negative" />;
  }

  return <FiMeh style={style} color="grey" size={size} tille={sentiment.toLowerCase()} />;
};
SentimentIcon.defaultProps = {
  sentiment: 'NEUTRAL',
  size: '1.5em',
};
SentimentIcon.propTypes = {
  sentiment: PropTypes.oneOf(['POSITIVE', 'NEGATIVE', 'NEUTRAL', 'MIXED']),
  size: PropTypes.string,
};

const getSentimentColor = (sentiment) => {
  if (sentiment === 'POSITIVE') {
    return 'green';
  }
  if (sentiment === 'NEGATIVE') {
    return 'red';
  }
  return 'gray';
};

export const SentimentIndicator = ({ sentiment = 'NEUTRAL' }) => (
  <div>
    <span>
      <SentimentIcon size="1.25em" sentiment={sentiment} />
    </span>
    <span style={{ verticalAlign: 'middle', padding: '3px', color: getSentimentColor(sentiment) }}>
      {` ${sentiment.charAt(0)}${sentiment.slice(1).toLowerCase()} `}
    </span>
  </div>
);
SentimentIndicator.defaultProps = {
  sentiment: 'NEUTRAL',
};
SentimentIndicator.propTypes = {
  sentiment: PropTypes.oneOf(['POSITIVE', 'NEGATIVE', 'NEUTRAL', 'MIXED']),
};

================
File: components/sentiment-trend-icon/SentimentTrendIcon.jsx
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React from 'react';
import PropTypes from 'prop-types';
import { FiTrendingDown, FiTrendingUp } from 'react-icons/fi';
import { MdTrendingFlat } from 'react-icons/md';

const style = {
  verticalAlign: 'middle',
};

export const SentimentTrendIcon = ({ trend = 'FLAT', size = '1.5em' }) => {
  if (trend === 'UP') {
    return <FiTrendingUp style={style} color="green" size={size} title="up" />;
  }

  if (trend === 'DOWN') {
    return <FiTrendingDown style={style} color="red" size={size} title="down" />;
  }

  return <MdTrendingFlat style={style} color="grey" size={size} title="flat" />;
};
SentimentTrendIcon.defaultProps = {
  trend: 'FLAT',
  size: '1.5em',
};
SentimentTrendIcon.propTypes = {
  trend: PropTypes.oneOf(['UP', 'DOWN', 'FLAT']),
  size: PropTypes.string,
};

const getTrendColor = (trend) => {
  if (trend === 'UP') {
    return 'green';
  }
  if (trend === 'DOWN') {
    return 'red';
  }
  return 'gray';
};

export const SentimentTrendIndicator = ({ trend = 'FLAT' }) => (
  <div>
    <span>
      <SentimentTrendIcon size="1.25em" trend={trend} />
    </span>
    <span style={{ verticalAlign: 'middle', padding: '3px', color: getTrendColor(trend) }}>
      {` ${trend.charAt(0)}${trend.slice(1).toLowerCase()} `}
    </span>
  </div>
);
SentimentTrendIndicator.defaultProps = {
  trend: 'FLAT',
};
SentimentTrendIndicator.propTypes = {
  trend: PropTypes.oneOf(['UP', 'DOWN', 'FLAT']),
};

================
File: contexts/app.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { useContext, createContext } from 'react';

export const AppContext = createContext(null);

const useAppContext = () => useContext(AppContext);

export default useAppContext;

================
File: contexts/documents.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { useContext, createContext } from 'react';

export const DocumentsContext = createContext(null);

const useDocumentsContext = () => useContext(DocumentsContext);

export default useDocumentsContext;

================
File: contexts/settings.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { useContext, createContext } from 'react';

export const SettingsContext = createContext(null);

const useSettingsContext = () => useContext(SettingsContext);

export default useSettingsContext;

================
File: graphql/queries/getDocument.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import gql from 'graphql-tag';

export default gql`
  query Query($objectKey: ID!) {
    getDocument(ObjectKey: $objectKey) {
      ObjectKey
      ObjectStatus
      InitialEventTime
      QueuedTime
      WorkflowStartTime
      CompletionTime
      WorkflowExecutionArn
      WorkflowStatus
      PageCount
      Sections {
        Id
        PageIds
        Class
        OutputJSONUri
      }
      Pages {
        Id
        Class
        ImageUri
        TextUri
      }
      EvaluationReportUri
      ExpiresAfter
    }
  }
`;

================
File: graphql/queries/listDocuments.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import gql from 'graphql-tag';

export default gql`
  query Query($endDateTime: AWSDateTime, $startDateTime: AWSDateTime) {
    listDocuments(endDateTime: $endDateTime, startDateTime: $startDateTime) {
      Calls {
        ObjectKey
        PK
        SK
      }
      nextToken
    }
  }
`;

================
File: graphql/queries/listDocumentsDateHour.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import gql from 'graphql-tag';

export default gql`
  query Query($date: AWSDate, $hour: Int) {
    listDocumentsDateHour(date: $date, hour: $hour) {
      Documents {
        ObjectKey
        PK
        SK
      }
      nextToken
    }
  }
`;

================
File: graphql/queries/listDocumentsDateShard.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import gql from 'graphql-tag';

export default gql`
  query Query($date: AWSDate, $shard: Int) {
    listDocumentsDateShard(date: $date, shard: $shard) {
      Documents {
        ObjectKey
        PK
        SK
      }
      nextToken
    }
  }
`;

================
File: graphql/queries/onCreateDocument.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import gql from 'graphql-tag';

export default gql`
  subscription Subscription {
    onCreateDocument {
      ObjectKey
    }
  }
`;

================
File: graphql/queries/onUpdateDocument.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import gql from 'graphql-tag';

export default gql`
  subscription Subscription {
    onUpdateDocument {
      ObjectKey
      ObjectStatus
      InitialEventTime
      QueuedTime
      WorkflowStartTime
      CompletionTime
      WorkflowExecutionArn
      WorkflowStatus
      PageCount
      Sections {
        Id
        PageIds
        Class
        OutputJSONUri
      }
      Pages {
        Id
        Class
        ImageUri
        TextUri
      }
      EvaluationReportUri
      ExpiresAfter
    }
  }
`;

================
File: graphql/queries/queryKnowledgeBase.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import gql from 'graphql-tag';

export default gql`
  query Query($input: String!, $sessionId: String) {
    queryKnowledgeBase(input: $input, sessionId: $sessionId)
  }
`;

================
File: hooks/use-aws-config.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { useState, useEffect } from 'react';
import Amplify from 'aws-amplify';
import awsExports from '../aws-exports';

const useAwsConfig = () => {
  const [awsConfig, setAwsConfig] = useState();
  useEffect(() => {
    Amplify.configure(awsExports);
    setAwsConfig(awsExports);
  }, [awsExports]);
  return awsConfig;
};

export default useAwsConfig;

================
File: hooks/use-current-session-creds.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { useState, useEffect } from 'react';

import { Auth, Logger } from 'aws-amplify';
import { AuthState } from '@aws-amplify/ui-components';

const DEFAULT_CREDS_REFRESH_INTERVAL_IN_MS = 60 * 15 * 1000;

const logger = new Logger('useCurrentSessionCreds');

const useCurrentSessionCreds = ({ authState, credsIntervalInMs = DEFAULT_CREDS_REFRESH_INTERVAL_IN_MS }) => {
  const [currentSession, setCurrentSession] = useState();
  const [currentCredentials, setCurrentCredentials] = useState();
  let interval;

  const refreshCredentials = async () => {
    try {
      setCurrentSession(await Auth.currentSession());
      setCurrentCredentials(await Auth.currentUserCredentials());
      logger.debug('successfully refreshed credentials');
    } catch (error) {
      // XXX surface credential refresh error
      logger.error('failed to get credentials', error);
    }
  };
  const clearRefreshInterval = () => {
    if (interval) {
      clearInterval(interval);
      interval = null;
    }
  };

  useEffect(() => {
    if (authState === AuthState.SignedIn) {
      if (!interval) {
        refreshCredentials();
        interval = setInterval(refreshCredentials, credsIntervalInMs);
      } else {
        clearRefreshInterval();
        interval = setInterval(refreshCredentials, credsIntervalInMs);
      }
    } else {
      clearRefreshInterval();
    }
    if (authState === AuthState.SignedOut) {
      clearRefreshInterval();
      setCurrentSession();
      setCurrentCredentials();
    }

    return () => {
      clearRefreshInterval();
    };
  }, [authState, credsIntervalInMs]);

  return { currentSession, currentCredentials };
};

export default useCurrentSessionCreds;

================
File: hooks/use-graphql-api.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { useEffect, useState } from 'react';
import { API, Logger, graphqlOperation } from 'aws-amplify';

import useAppContext from '../contexts/app';

import listDocumentsDateShard from '../graphql/queries/listDocumentsDateShard';
import listDocumentsDateHour from '../graphql/queries/listDocumentsDateHour';
import getDocument from '../graphql/queries/getDocument';

import onCreateDocument from '../graphql/queries/onCreateDocument';
import onUpdateDocument from '../graphql/queries/onUpdateDocument';

import { DOCUMENT_LIST_SHARDS_PER_DAY } from '../components/document-list/documents-table-config';

const logger = new Logger('useGraphQlApi');

const useGraphQlApi = ({ initialPeriodsToLoad = DOCUMENT_LIST_SHARDS_PER_DAY * 2 } = {}) => {
  const [periodsToLoad, setPeriodsToLoad] = useState(initialPeriodsToLoad);
  const [isDocumentsListLoading, setIsDocumentsListLoading] = useState(false);
  const [documents, setDocuments] = useState([]);
  const { setErrorMessage } = useAppContext();

  const setDocumentsDeduped = (documentValues) => {
    setDocuments((currentDocuments) => {
      const documentValuesdocumentIds = documentValues.map((c) => c.ObjectKey);
      return [
        ...currentDocuments.filter((c) => !documentValuesdocumentIds.includes(c.ObjectKey)),
        ...documentValues.map((document) => ({
          ...document,
          ListPK: document.ListPK || currentDocuments.find((c) => c.ObjectKey === document.ObjectKey)?.ListPK,
          ListSK: document.ListSK || currentDocuments.find((c) => c.ObjectKey === document.ObjectKey)?.ListSK,
        })),
      ];
    });
  };

  const getDocumentDetailsFromIds = async (objectKeys) => {
    // prettier-ignore
    logger.debug('getDocumentDetailsFromIds', objectKeys);
    const getDocumentPromises = objectKeys.map((objectKey) =>
      API.graphql({ query: getDocument, variables: { objectKey } }),
    );
    const getDocumentResolutions = await Promise.allSettled(getDocumentPromises);
    const getDocumentRejected = getDocumentResolutions.filter((r) => r.status === 'rejected');
    if (getDocumentRejected.length) {
      setErrorMessage('failed to get document details - please try again later');
      logger.error('get document promises rejected', getDocumentRejected);
    }
    const documentValues = getDocumentResolutions
      .filter((r) => r.status === 'fulfilled')
      .map((r) => r.value?.data?.getDocument);

    return documentValues;
  };

  useEffect(() => {
    logger.debug('onCreateDocument subscription');
    const subscription = API.graphql(graphqlOperation(onCreateDocument)).subscribe({
      next: async ({ provider, value }) => {
        logger.debug('document list subscription update', { provider, value });
        const objectKey = value?.data?.onCreateDocument.ObjectKey || '';
        if (objectKey) {
          const documentValues = await getDocumentDetailsFromIds([objectKey]);
          setDocumentsDeduped(documentValues);
        }
      },
      error: (error) => {
        logger.error(error);
        setErrorMessage('document list network subscription failed - please reload the page');
      },
    });

    return () => subscription.unsubscribe();
  }, []);

  useEffect(() => {
    logger.debug('onUpdateDocument subscription');
    const subscription = API.graphql(graphqlOperation(onUpdateDocument)).subscribe({
      next: async ({ provider, value }) => {
        logger.debug('document update', { provider, value });
        const documentUpdateEvent = value?.data?.onUpdateDocument;
        if (documentUpdateEvent?.ObjectKey) {
          setDocumentsDeduped([documentUpdateEvent]);
        }
      },
      error: (error) => {
        logger.error(error);
        setErrorMessage('document update network request failed - please reload the page');
      },
    });

    return () => subscription.unsubscribe();
  }, []);

  const listDocumentIdsByDateShards = async ({ date, shards }) => {
    const listDocumentsDateShardPromises = shards.map((i) => {
      logger.debug('sending list document date shard', date, i);
      return API.graphql({ query: listDocumentsDateShard, variables: { date, shard: i } });
    });
    const listDocumentsDateShardResolutions = await Promise.allSettled(listDocumentsDateShardPromises);

    const listRejected = listDocumentsDateShardResolutions.filter((r) => r.status === 'rejected');
    if (listRejected.length) {
      setErrorMessage('failed to list documents - please try again later');
      logger.error('list document promises rejected', listRejected);
    }
    const documentData = listDocumentsDateShardResolutions
      .filter((r) => r.status === 'fulfilled')
      .map((r) => r.value?.data?.listDocumentsDateShard?.Documents || [])
      .reduce((pv, cv) => [...cv, ...pv], []);

    return documentData;
  };

  const listDocumentIdsByDateHours = async ({ date, hours }) => {
    const listDocumentsDateHourPromises = hours.map((i) => {
      logger.debug('sending list document date hour', date, i);
      return API.graphql({ query: listDocumentsDateHour, variables: { date, hour: i } });
    });
    const listDocumentsDateHourResolutions = await Promise.allSettled(listDocumentsDateHourPromises);

    const listRejected = listDocumentsDateHourResolutions.filter((r) => r.status === 'rejected');
    if (listRejected.length) {
      setErrorMessage('failed to list documents - please try again later');
      logger.error('list document promises rejected', listRejected);
    }

    const documentData = listDocumentsDateHourResolutions
      .filter((r) => r.status === 'fulfilled')
      .map((r) => r.value?.data?.listDocumentsDateHour?.Documents || [])
      .reduce((pv, cv) => [...cv, ...pv], []);

    return documentData;
  };

  const sendSetDocumentsForPeriod = async () => {
    // XXX this logic should be moved to the API
    try {
      const now = new Date();

      // array of arrays containing date / shard pairs relative to current UTC time
      // e.g. 2 periods to on load 2021-01-01T:20:00:00.000Z ->
      // [ [ '2021-01-01', 3 ], [ '2021-01-01', 4 ] ]
      const hoursInShard = 24 / DOCUMENT_LIST_SHARDS_PER_DAY;
      const dateShardPairs = [...Array(parseInt(periodsToLoad, 10)).keys()].map((p) => {
        const deltaInHours = p * hoursInShard;
        const relativeDate = new Date(now - deltaInHours * 3600 * 1000);

        const relativeDateString = relativeDate.toISOString().split('T')[0];
        const shard = Math.floor(relativeDate.getUTCHours() / hoursInShard);

        return [relativeDateString, shard];
      });

      // reduce array of date/shard pairs into object of shards by date
      // e.g. [ [ '2021-01-01', 3 ], [ '2021-01-01', 4 ] ] -> { '2021-01-01': [ 3, 4 ] }
      const dateShards = dateShardPairs.reduce((p, c) => ({ ...p, [c[0]]: [...(p[c[0]] || []), c[1]] }), {});
      logger.debug('document list date shards', dateShards);

      // parallelizes listDocuments and getDocumentDetails
      // alternatively we could implement it by sending multiple graphql queries in 1 request
      const documentDataDateShardPromises = Object.keys(dateShards).map(
        // pretttier-ignore
        async (d) => listDocumentIdsByDateShards({ date: d, shards: dateShards[d] }),
      );

      // get document Ids by hour on residual hours outside of the lower shard date/hour boundary
      // or just last n hours when periodsToLoad is less than 1 shard period
      let baseDate;
      let residualHours;
      if (periodsToLoad < 1) {
        baseDate = new Date(now);
        const numHours = parseInt(periodsToLoad * hoursInShard, 10);
        residualHours = [...Array(numHours).keys()].map((h) => baseDate.getUTCHours() - h);
      } else {
        baseDate = new Date(now - periodsToLoad * hoursInShard * 3600 * 1000);
        const residualBaseHour = baseDate.getUTCHours() % hoursInShard;
        residualHours = [...Array(hoursInShard - residualBaseHour).keys()].map((h) => baseDate.getUTCHours() + h);
      }
      const baseDateString = baseDate.toISOString().split('T')[0];

      const residualDateHours = { date: baseDateString, hours: residualHours };
      logger.debug('document list date hours', residualDateHours);

      const documentDataDateHourPromise = listDocumentIdsByDateHours(residualDateHours);

      const documentDataPromises = [...documentDataDateShardPromises, documentDataDateHourPromise];
      const documentDetailsPromises = documentDataPromises.map(async (documentDataPromise) => {
        const documentData = await documentDataPromise;
        const objectKeys = documentData.map((item) => item.ObjectKey);
        const documentDetails = await getDocumentDetailsFromIds(objectKeys);
        // Merge document details with PK and SK
        return documentDetails.map((detail) => {
          const matchingData = documentData.find((item) => item.ObjectKey === detail.ObjectKey);
          return { ...detail, ListPK: matchingData.PK, ListSK: matchingData.SK };
        });
      });

      const documentValuesPromises = documentDetailsPromises.map(async (documentValuesPromise) => {
        const documentValues = await documentValuesPromise;
        logger.debug('documentValues', documentValues);
        return documentValues;
      });

      const getDocumentsPromiseResolutions = await Promise.allSettled(documentValuesPromises);
      logger.debug('getDocumentsPromiseResolutions', getDocumentsPromiseResolutions);
      const documentValuesReduced = getDocumentsPromiseResolutions
        .filter((r) => r.status === 'fulfilled')
        .map((r) => r.value)
        .reduce((previous, current) => [...previous, ...current], []);
      logger.debug('documentValuesReduced', documentValuesReduced);
      setDocumentsDeduped(documentValuesReduced);
      setIsDocumentsListLoading(false);
      const getDocumentsRejected = getDocumentsPromiseResolutions.filter((r) => r.status === 'rejected');
      if (getDocumentsRejected.length) {
        setErrorMessage('failed to get document details - please try again later');
        logger.error('get document promises rejected', getDocumentsRejected);
      }
    } catch (error) {
      setIsDocumentsListLoading(false);
      setErrorMessage('failed to list Documents - please try again later');
      logger.error('error obtaining document list', error);
    }
  };

  useEffect(() => {
    if (isDocumentsListLoading) {
      logger.debug('document list is loading');
      // send in a timeout to avoid blocking rendering
      setTimeout(() => {
        setDocuments([]);
        sendSetDocumentsForPeriod();
      }, 1);
    }
  }, [isDocumentsListLoading]);

  useEffect(() => {
    logger.debug('list period changed', periodsToLoad);
    setIsDocumentsListLoading(true);
  }, [periodsToLoad]);

  return {
    documents,
    isDocumentsListLoading,
    getDocumentDetailsFromIds,
    setIsDocumentsListLoading,
    setPeriodsToLoad,
    periodsToLoad,
  };
};

export default useGraphQlApi;

================
File: hooks/use-notifications.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { useEffect, useState } from 'react';
import { Logger } from 'aws-amplify';

import useAppContext from '../contexts/app';

const logger = new Logger('useNotifications');

const dismissedInitialNotificationsStorageKey = 'dismissedInitialNotifications';
const initialNotifications = [
  {
    type: 'info',
    content: 'Welcome to GenAI IDP (GenAIDP)',
    dismissible: true,
    dismissLabel: 'Dismiss message',
    id: 'welcome-1',
  },
];

const useNotifications = () => {
  const { errorMessage, setErrorMessage } = useAppContext();

  const [notifications, setNotifications] = useState([]);

  useEffect(() => {
    // sets initial notifications and persists state of dismissed notifications in local storage

    const getDissmissedNotificationIdsFromStorage = () => {
      let dismissedInitialNotificationIds = [];
      try {
        const dismissedStored = JSON.parse(localStorage.getItem(dismissedInitialNotificationsStorageKey) || '[]');
        if (!Array.isArray(dismissedStored)) {
          logger.warn('invalid format of dismisssed notifications from local storage');
        } else {
          dismissedInitialNotificationIds = dismissedStored;
        }
      } catch {
        logger.warn('failed to parse dismisssed notifications from local storage');
        return [];
      }

      return dismissedInitialNotificationIds;
    };

    const dismissedInitialNotificationIds = getDissmissedNotificationIdsFromStorage();
    const initialNotificationsNotDismissed = initialNotifications.filter(
      (n) => !dismissedInitialNotificationIds.includes(n.id),
    );

    const notificationIds = notifications.map((n) => n.id);
    // prettier-ignore
    if (
      // all have been dismissed
      !initialNotificationsNotDismissed.length
      // all area already in the notifications state
      || initialNotificationsNotDismissed.every((n) => notificationIds.includes(n.id))
    ) {
      return;
    }

    // add dismiss handler to notifications
    const initialNotificationsToShow = initialNotificationsNotDismissed.map((n) => ({
      ...n,
      onDismiss: () => {
        setNotifications((current) => current.filter((i) => i.id !== n.id));
        const storedIds = getDissmissedNotificationIdsFromStorage();
        localStorage.setItem(dismissedInitialNotificationsStorageKey, JSON.stringify([...storedIds, n.id]));
      },
    }));

    setNotifications((current) => [...initialNotificationsToShow, ...current]);
  }, [notifications]);

  useEffect(() => {
    // adds error messages to notifications
    const id = performance.now();
    const maxSameError = 3;
    const maxSameErrorInMs = 2000;

    if (!errorMessage) {
      return;
    }

    // limit the number of same error
    const sameErrorMessage = notifications.filter((i) => i.content === errorMessage);
    if (sameErrorMessage.lenth > maxSameError) {
      return;
    }
    // limit the number of errors within a time range
    const sameErrorInMs = sameErrorMessage.filter((i) => id - i.id > maxSameErrorInMs);
    if (sameErrorInMs.length) {
      return;
    }

    logger.debug('setting error notification', errorMessage);

    const errorNotification = {
      type: 'error',
      content: errorMessage,
      dismissible: true,
      dismissLabel: 'Dismiss message',
      id,
      onDismiss: () => {
        setNotifications((current) => current.filter((i) => i.id !== id));
      },
    };
    setNotifications((current) => [...current, errorNotification]);
    setErrorMessage('');
  }, [errorMessage, notifications]);

  return notifications;
};

export default useNotifications;

================
File: hooks/use-parameter-store.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

import { useState, useEffect } from 'react';

import { SSMClient, GetParameterCommand } from '@aws-sdk/client-ssm';
// import { useState, useEffect } from 'react';
import awsExports from '../aws-exports';

const PARAMETER_NAME = process.env.REACT_APP_SETTINGS_PARAMETER;

const useParameterStore = (creds) => {
  const [settings, setSettings] = useState({});

  const refreshSettings = async (credentials) => {
    let idpSettings = {};

    if (credentials) {
      const ssmClient = new SSMClient({ credentials, region: awsExports.aws_project_region });
      const getParameterCmd = new GetParameterCommand({ Name: PARAMETER_NAME });
      const response = await ssmClient.send(getParameterCmd);
      if (response.Parameter?.Value) {
        idpSettings = JSON.parse(response.Parameter.Value);
        console.log(response.Parameter.Value);
      }
    }
    setSettings(idpSettings);
  };

  useEffect(async () => {
    refreshSettings(creds);
  }, []);

  return settings;
};

export default useParameterStore;

================
File: hooks/use-split-panel.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { useEffect, useState } from 'react';

const useSplitPanel = (selectedItems) => {
  const [splitPanelSize, setSplitPanelSize] = useState(300);
  const [splitPanelOpen, setSplitPanelOpen] = useState(false);
  const [hasManuallyClosedOnce, setHasManuallyClosedOnce] = useState(false);

  const onSplitPanelResize = ({ detail: { size } }) => {
    setSplitPanelSize(size);
  };

  const onSplitPanelToggle = ({ detail: { open } }) => {
    setSplitPanelOpen(open);

    if (!open) {
      setHasManuallyClosedOnce(true);
    }
  };

  useEffect(() => {
    if (selectedItems.length && !hasManuallyClosedOnce) {
      setSplitPanelOpen(true);
    }
  }, [selectedItems.length, hasManuallyClosedOnce]);

  return {
    splitPanelOpen,
    onSplitPanelToggle,
    splitPanelSize,
    onSplitPanelResize,
  };
};

export default useSplitPanel;

================
File: hooks/use-user-auth-state.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { useState, useEffect } from 'react';
import { onAuthUIStateChange } from '@aws-amplify/ui-components';
import { Logger } from 'aws-amplify';

const logger = new Logger('useUserAuthState');

const useUserAuthState = (awsconfig) => {
  const [authState, setAuthState] = useState();
  const [user, setUser] = useState();

  useEffect(() => {
    onAuthUIStateChange((nextAuthState, authData) => {
      logger.debug('auth state change nextAuthState:', nextAuthState);
      logger.debug('auth state change authData:', authData);
      setAuthState(nextAuthState);
      setUser(authData);
      if (authData) {
        // prettier-ignore
        localStorage.setItem(`${authData.pool.clientId}idtokenjwt`, authData.signInUserSession.idToken.jwtToken);
        // prettier-ignore
        localStorage.setItem(`${authData.pool.clientId}accesstokenjwt`, authData.signInUserSession.accessToken.jwtToken);
        // prettier-ignore
        localStorage.setItem(`${authData.pool.clientId}refreshtoken`, authData.signInUserSession.refreshToken.jwtToken);
      }
    });
  }, [awsconfig]);

  return { authState, user };
};

export default useUserAuthState;

================
File: routes/AuthRoutes.jsx
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React from 'react';
import PropTypes from 'prop-types';
import { Logger } from 'aws-amplify';
import { Redirect, Route, Switch } from 'react-router-dom';

import { AmplifySignOut } from '@aws-amplify/ui-react';

import { SettingsContext } from '../contexts/settings';
import useParameterStore from '../hooks/use-parameter-store';
import useAppContext from '../contexts/app';

import DocumentsRoutes from './DocumentsRoutes';
import DocumentsQueryRoutes from './DocumentsQueryRoutes';

import { DOCUMENTS_PATH, DEFAULT_PATH, LOGIN_PATH, LOGOUT_PATH, DOCUMENTS_KB_QUERY_PATH } from './constants';

const logger = new Logger('AuthRoutes');

const AuthRoutes = ({ redirectParam }) => {
  const { currentCredentials } = useAppContext();
  const settings = useParameterStore(currentCredentials);

  // eslint-disable-next-line react/jsx-no-constructed-context-values
  const settingsContextValue = {
    settings,
  };
  logger.debug('settingsContextValue', settingsContextValue);

  return (
    <SettingsContext.Provider value={settingsContextValue}>
      <Switch>
        <Route path={DOCUMENTS_PATH}>
          <DocumentsRoutes />
        </Route>
        <Route path={LOGIN_PATH}>
          <Redirect to={!redirectParam || redirectParam === LOGIN_PATH ? DEFAULT_PATH : `${redirectParam}`} />
        </Route>
        <Route path={LOGOUT_PATH}>
          <AmplifySignOut />
        </Route>
        <Route path={DOCUMENTS_KB_QUERY_PATH}>
          <DocumentsQueryRoutes />
        </Route>
        <Route>
          <Redirect to={DEFAULT_PATH} />
        </Route>
      </Switch>
    </SettingsContext.Provider>
  );
};

AuthRoutes.propTypes = {
  redirectParam: PropTypes.string.isRequired,
};

export default AuthRoutes;

================
File: routes/constants.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
export const LOGIN_PATH = '/login';
export const LOGOUT_PATH = '/logout';
export const DOCUMENTS_PATH = '/documents';
export const DEFAULT_PATH = DOCUMENTS_PATH;
export const REDIRECT_URL_PARAM = 'redirect';
export const DOCUMENTS_KB_QUERY_PATH = `${DOCUMENTS_PATH}/query`;

================
File: routes/DocumentsQueryRoutes.jsx
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React from 'react';
import { Route, Switch, useRouteMatch } from 'react-router-dom';
import { Logger } from 'aws-amplify';

import DocumentsQueryLayout from '../components/document-kb-query-layout';
import GenAIDPTopNavigation from '../components/genai-idp-top-navigation';

const logger = new Logger('DocumentsQueryRoutes');

const DocumentsQueryRoutes = () => {
  const { path } = useRouteMatch();
  logger.info('path ', path);

  return (
    <Switch>
      <Route path={path}>
        <div>
          <GenAIDPTopNavigation />
          <DocumentsQueryLayout />
        </div>
      </Route>
    </Switch>
  );
};

export default DocumentsQueryRoutes;

================
File: routes/DocumentsRoutes.jsx
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React from 'react';
import { Route, Switch, useRouteMatch } from 'react-router-dom';
import { Logger } from 'aws-amplify';

import GenAIDPLayout from '../components/genaidp-layout';
import GenAIDPTopNavigation from '../components/genai-idp-top-navigation';

const logger = new Logger('DocumentsRoutes');

const DocumentsRoutes = () => {
  const { path } = useRouteMatch();
  logger.info('path ', path);

  return (
    <Switch>
      <Route path={path}>
        <div>
          <GenAIDPTopNavigation />
          <GenAIDPLayout />
        </div>
      </Route>
    </Switch>
  );
};

export default DocumentsRoutes;

================
File: routes/Routes.jsx
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React, { useEffect, useState } from 'react';
import { useLocation } from 'react-router-dom';
import { Logger } from 'aws-amplify';
import { AuthState } from '@aws-amplify/ui-components';

import UnauthRoutes from './UnauthRoutes';

import useAppContext from '../contexts/app';
import AuthRoutes from './AuthRoutes';

import { REDIRECT_URL_PARAM } from './constants';

const logger = new Logger('Routes');

const Routes = () => {
  const { authState, user, currentCredentials } = useAppContext();
  const location = useLocation();
  const [urlSearchParams, setUrlSearchParams] = useState(new URLSearchParams({}));
  const [redirectParam, setRedirectParam] = useState('');

  useEffect(() => {
    if (!location?.search) {
      return;
    }
    const searchParams = new URLSearchParams(location.search);
    logger.debug('searchParams:', searchParams);
    setUrlSearchParams(searchParams);
  }, [location]);

  useEffect(() => {
    const redirect = urlSearchParams?.get(REDIRECT_URL_PARAM);
    if (!redirect) {
      return;
    }
    logger.debug('redirect:', redirect);
    setRedirectParam(redirect);
  }, [urlSearchParams]);

  return !(authState === AuthState.SignedIn && user && currentCredentials) ? (
    <UnauthRoutes location={location} />
  ) : (
    <AuthRoutes redirectParam={redirectParam} />
  );
};

export default Routes;

================
File: routes/UnauthRoutes.jsx
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React from 'react';
import PropTypes from 'prop-types';
import { Redirect, Route, Switch } from 'react-router-dom';

import { AmplifyAuthContainer, AmplifyAuthenticator, AmplifySignIn, AmplifySignUp } from '@aws-amplify/ui-react';

import { LOGIN_PATH, LOGOUT_PATH, REDIRECT_URL_PARAM } from './constants';

// this is set at build time depending on the AllowedSignUpEmailDomain CloudFormation parameter
const { REACT_APP_SHOULD_HIDE_SIGN_UP = 'true' } = process.env;

const UnauthRoutes = ({ location }) => (
  <Switch>
    <Route path={LOGIN_PATH}>
      <AmplifyAuthContainer>
        <AmplifyAuthenticator>
          <AmplifySignIn
            headerText="Welcome to GenAI Intelligent Document Processing!"
            hideSignUp={REACT_APP_SHOULD_HIDE_SIGN_UP}
            slot="sign-in"
          />
          <AmplifySignUp
            headerText="Welcome to GenAI Intelligent Document Processing!"
            slot="sign-up"
            h
            usernameAlias="email"
            formFields={[
              {
                type: 'email',
                inputProps: { required: true, autocomplete: 'email' },
              },
              { type: 'password' },
            ]}
          />
        </AmplifyAuthenticator>
      </AmplifyAuthContainer>
    </Route>
    <Route path={LOGOUT_PATH}>
      <Redirect to={LOGIN_PATH} />
    </Route>
    <Route>
      <Redirect
        to={{
          pathname: LOGIN_PATH,
          search: `?${REDIRECT_URL_PARAM}=${location.pathname}${location.search}`,
        }}
      />
    </Route>
  </Switch>
);

UnauthRoutes.propTypes = {
  location: PropTypes.shape({
    pathname: PropTypes.string,
    search: PropTypes.string,
  }).isRequired,
};

export default UnauthRoutes;

================
File: App.css
================
/*  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
    SPDX-License-Identifier: Apache-2.0 */

:root {
    --amplify-primary-color: #ababab;
    --amplify-primary-tint: #3f6060;
    --amplify-primary-shade: #2dba89;
    --amplify-background-color: #fafafa;
    --amplify-text-xxs: 0.75rem;
    --amplify-text-xs: 0.81rem;
    --amplify-text-sm: 1.2rem;
    --amplify-text-md: 1.5rem;
    --amplify-text-md-sub: 1.7rem;
    --amplify-text-lg: 1.5rem;
    --amplify-text-xl: 2rem;
    --amplify-text-xxl: 2.5rem;
}

================
File: App.jsx
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React, { useState } from 'react';
import { Amplify, Logger } from 'aws-amplify';
import { HashRouter } from 'react-router-dom';

import { AppContext } from './contexts/app';

import useUserAuthState from './hooks/use-user-auth-state';
import useAwsConfig from './hooks/use-aws-config';
import useCurrentSessionCreds from './hooks/use-current-session-creds';

import Routes from './routes/Routes';

import './App.css';

Amplify.Logger.LOG_LEVEL = process.env.NODE_ENV === 'development' ? 'DEBUG' : 'WARNING';
const logger = new Logger('App');

const App = () => {
  const awsConfig = useAwsConfig();
  const { authState, user } = useUserAuthState(awsConfig);
  const { currentSession, currentCredentials } = useCurrentSessionCreds({ authState });
  const [errorMessage, setErrorMessage] = useState();
  const [navigationOpen, setNavigationOpen] = useState(true);

  // eslint-disable-next-line react/jsx-no-constructed-context-values
  const appContextValue = {
    authState,
    awsConfig,
    errorMessage,
    currentCredentials,
    currentSession,
    setErrorMessage,
    user,
    navigationOpen,
    setNavigationOpen,
  };
  logger.debug('appContextValue', appContextValue);

  return (
    <div className="App">
      <AppContext.Provider value={appContextValue}>
        <HashRouter>
          <Routes />
        </HashRouter>
      </AppContext.Provider>
    </div>
  );
};

export default App;

================
File: App.test.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders app div element', () => {
  render(<App />);
  const divElement = screen.getByText(
    // eslint-disable-next-line prettier/prettier
    (content, element) => element.tagName.toLowerCase() === 'div' && element.className.includes('App'),
  );
  expect(divElement).toBeInTheDocument();
});

================
File: aws-exports.js
================
/* eslint-disable */
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// The values in this file are generated in CodeBuild
// You can also create a .env.local file during development
// https://create-react-app.dev/docs/adding-custom-environment-variables/

const {
  REACT_APP_USER_POOL_ID,
  REACT_APP_USER_POOL_CLIENT_ID,
  REACT_APP_IDENTITY_POOL_ID,
  REACT_APP_APPSYNC_GRAPHQL_URL,
  REACT_APP_AWS_REGION,
 } = process.env;

const awsmobile = {
    "aws_project_region": REACT_APP_AWS_REGION,
    "aws_cognito_identity_pool_id": REACT_APP_IDENTITY_POOL_ID,
    "aws_cognito_region": REACT_APP_AWS_REGION,
    "aws_user_pools_id": REACT_APP_USER_POOL_ID,
    "aws_user_pools_web_client_id": REACT_APP_USER_POOL_CLIENT_ID,
    "oauth": {},
    "aws_cognito_login_mechanisms": [
        "PREFERRED_USERNAME"
    ],
    "aws_cognito_signup_attributes": [
        "EMAIL"
    ],
    "aws_cognito_mfa_configuration": "OFF",
    "aws_cognito_mfa_types": [
        "SMS"
    ],
    "aws_cognito_password_protection_settings": {
        "passwordPolicyMinLength": 8,
        "passwordPolicyCharacters": []
    },
    "aws_cognito_verification_mechanisms": [
        "EMAIL"
    ],
    "aws_appsync_graphqlEndpoint": REACT_APP_APPSYNC_GRAPHQL_URL,
    "aws_appsync_region": REACT_APP_AWS_REGION,
    "aws_appsync_authenticationType": "AMAZON_COGNITO_USER_POOLS"
}

export default awsmobile;

================
File: index.css
================
/* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
   SPDX-License-Identifier: Apache-2.0 */

================
File: index.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';

import App from './App';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root'),
);

================
File: setupTests.js
================
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';
