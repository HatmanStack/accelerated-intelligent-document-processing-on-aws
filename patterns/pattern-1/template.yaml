# Copyright Â© Amazon.com and Affiliates: This deliverable is considered Developed Content as defined in the AWS Service Terms and the SOW between the parties.

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS GenAI IDP Accelerator - resources for IDP Pattern 1

Parameters:

  StackName:
    Type: String

  InputBucket:
    Type: String

  OutputBucket:
    Type: String

  CustomerManagedEncryptionKeyArn:
    Type: String

  LogRetentionDays:
    Type: Number
  
  ExecutionTimeThresholdMs:
    Type: Number
    Default: 30000

  UDOPModelArtifactPath:
    Type: String
    AllowedPattern: "^(|s3://.*)$"

  ExtractionModel:
    Type: String
    Default: 'us.anthropic.claude-3-5-sonnet-20241022-v2:0'
    AllowedValues:
      - 'us.anthropic.claude-3-5-sonnet-20241022-v2:0'
      - 'us.amazon.nova-pro-v1:0'
    Description: Bedrock Model ID to use for Extraction

Resources:

  SAGEMAKERCLASSIFIERSTACK:
    Type: AWS::CloudFormation::Stack
    Properties:
      # yamllint disable rule:line-length
      TemplateURL: ./sagemaker_classifier_endpoint.yaml
      Parameters:
        StackName: !Ref StackName
        UDOPModelArtifactPath: !Ref UDOPModelArtifactPath
        S3Bucket: !Ref OutputBucket
        CustomerManagedEncryptionKeyArn: !Ref CustomerManagedEncryptionKeyArn

  OCRFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/ocr_function/
      Handler: index.handler
      Runtime: python3.11
      Timeout: 900
      MemorySize: 4096
      Environment:
        Variables:
          METRIC_NAMESPACE: !Ref StackName
          MAX_WORKERS: 20
      LoggingConfig:
        LogGroup: !Ref OCRFunctionLogGroup
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3CrudPolicy:
            BucketName: !Ref OutputBucket
        - S3ReadPolicy:
            BucketName: !Ref InputBucket
        - Statement:
          - Effect: Allow
            Action: cloudwatch:PutMetricData
            Resource: '*'
          - Effect: Allow
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: !Ref CustomerManagedEncryptionKeyArn
          - Effect: Allow
            Action: textract:DetectDocumentText
            Resource: '*'
  
  OCRFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/${AWS::StackName}/lambda/OCRFunction"
      RetentionInDays: !Ref LogRetentionDays

  ClassificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/classification_function/
      Handler: index.handler
      Runtime: python3.11
      Timeout: 900
      MemorySize: 4096
      Environment:
        Variables:
          METRIC_NAMESPACE: !Ref StackName
          MAX_WORKERS: 20
          SAGEMAKER_ENDPOINT_NAME: !GetAtt SAGEMAKERCLASSIFIERSTACK.Outputs.EndpointName
      LoggingConfig:
        LogGroup: !Ref ClassificationFunctionLogGroup
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3CrudPolicy:
            BucketName: !Ref OutputBucket
        - S3ReadPolicy:
            BucketName: !Ref InputBucket
        - Statement:
          - Effect: Allow
            Action: cloudwatch:PutMetricData
            Resource: '*'
          - Effect: Allow
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: !Ref CustomerManagedEncryptionKeyArn
          - Effect: Allow
            Action: sagemaker:InvokeEndpoint
            Resource: !GetAtt SAGEMAKERCLASSIFIERSTACK.Outputs.EndpointArn
  
  ClassificationFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/${AWS::StackName}/lambda/ClassificationFunction"
      RetentionInDays: !Ref LogRetentionDays
  
  ExtractionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/extraction_function/
      Handler: index.handler
      Runtime: python3.11
      Timeout: 900
      MemorySize: 512
      Environment:
        Variables:
          EXTRACTION_MODEL_ID: !Ref ExtractionModel
          METRIC_NAMESPACE: !Ref StackName
      LoggingConfig:
        LogGroup: !Ref ExtractionFunctionLogGroup
      Policies:
      - AWSLambdaBasicExecutionRole
      - S3CrudPolicy:
          BucketName: !Ref OutputBucket
      - S3ReadPolicy:
          BucketName: !Ref InputBucket
      - Statement:
        - Effect: Allow
          Action: cloudwatch:PutMetricData
          Resource: '*'
        - Effect: Allow
          Action:
            - kms:Encrypt
            - kms:Decrypt
            - kms:ReEncrypt*
            - kms:GenerateDataKey*
            - kms:DescribeKey
          Resource: !Ref CustomerManagedEncryptionKeyArn
        - Effect: Allow
          Action: bedrock:InvokeModel
          Resource: '*'

  ExtractionFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/${AWS::StackName}/lambda/ExtractionFunction"
      RetentionInDays: !Ref LogRetentionDays

  ProcessResultsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/processresults_function/
      Handler: index.handler
      Runtime: python3.11
      Timeout: 900
      MemorySize: 4096
      Environment:
        Variables:
          METRIC_NAMESPACE: !Ref StackName
      LoggingConfig:
        LogGroup: !Ref ProcessResultsFunctionLogGroup
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3ReadPolicy:
            BucketName: !Ref InputBucket
        - S3CrudPolicy:
            BucketName: !Ref OutputBucket
        - Statement:
          - Effect: Allow
            Action: cloudwatch:PutMetricData
            Resource: '*'
          - Effect: Allow
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: !Ref CustomerManagedEncryptionKeyArn

  
  ProcessResultsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/${AWS::StackName}/lambda/ProcessResultsFunction"
      RetentionInDays: !Ref LogRetentionDays

  DocumentProcessingStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub "${StackName}-DocumentProcessingWorkflow"
      DefinitionUri: statemachine/workflow.asl.json
      DefinitionSubstitutions:
        OCRFunctionArn: !GetAtt OCRFunction.Arn
        ClassificationFunctionArn: !GetAtt ClassificationFunction.Arn
        ExtractionFunctionArn: !GetAtt ExtractionFunction.Arn
        ProcessResultsLambdaArn: !GetAtt ProcessResultsFunction.Arn
        OutputBucket: !Ref OutputBucket
      Logging:
        Level: ALL
        IncludeExecutionData: true
        Destinations:
          - CloudWatchLogsLogGroup: !GetAtt StateMachineLogGroup.Arn
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref OCRFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref ClassificationFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref ExtractionFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref ProcessResultsFunction
        - CloudWatchLogsFullAccess

  StateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/vendedlogs/states/${AWS::StackName}/workflow"  # required prefix
      RetentionInDays: !Ref LogRetentionDays

  Dashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub "${AWS::StackName}-${AWS::Region}-Pattern1-Subset"
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [{"expression": "m1/PERIOD(m1)*60", "label": "Documents per Minute"}],
                  ["${AWS::StackName}", "InputDocuments", {"id": "m1", "stat": "Sum", "visible": false}]
                ],
                "region": "${AWS::Region}",
                "title": "Input Documents (per Minute)",
                "view": "timeSeries",
                "period": 60,
                "yAxis": {
                  "left": {
                    "label": "Count per Minute"
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 8,
              "y": 0,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [{"expression": "m1/PERIOD(m1)*60", "label": "Pages per Minute"}],
                  ["${AWS::StackName}", "InputDocumentPages", {"id": "m1", "stat": "Sum", "visible": false}]
                ],
                "region": "${AWS::Region}",
                "title": "Input Document Pages (per Minute)",
                "view": "timeSeries",
                "period": 60,
                "yAxis": {
                  "left": {
                    "label": "Count per Minute"
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 16,
              "y": 0,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [],
                "region": "${AWS::Region}",
                "title": "Blank",
                "view": "timeSeries",
                "period": 60,
                "yAxis": {
                  "left": {
                    "label": "N/A"
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [{"expression": "m1/PERIOD(m1)*60", "label": "Tokens per Minute"}],
                  ["${AWS::StackName}", "InputTokens", {"id": "m1", "stat": "Sum", "visible": false}]
                ],
                "region": "${AWS::Region}",
                "title": "Input Tokens (per Minute)",
                "view": "timeSeries",
                "period": 60,
                "yAxis": {
                  "left": {
                    "label": "Count per Minute"
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 8,
              "y": 6,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [{"expression": "m1/PERIOD(m1)*60", "label": "Tokens per Minute"}],
                  ["${AWS::StackName}", "OutputTokens", {"id": "m1", "stat": "Sum", "visible": false}]
                ],
                "region": "${AWS::Region}",
                "title": "Output Tokens (per Minute)",
                "view": "timeSeries",
                "period": 60,
                "yAxis": {
                  "left": {
                    "label": "Count per Minute"
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 16,
              "y": 6,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [{"expression": "m1/PERIOD(m1)*60", "label": "Tokens per Minute"}],
                  ["${AWS::StackName}", "TotalTokens", {"id": "m1", "stat": "Sum", "visible": false}]
                ],
                "region": "${AWS::Region}",
                "title": "Total Tokens (per Minute)",
                "view": "timeSeries",
                "period": 60,
                "yAxis": {
                  "left": {
                    "label": "Count per Minute"
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 12,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [{"expression": "m1/PERIOD(m1)*60", "label": "Total per Minute"}],
                  [{"expression": "m2/PERIOD(m2)*60", "label": "Succeeded per Minute"}],
                  [{"expression": "m3/PERIOD(m3)*60", "label": "Failed per Minute"}],
                  ["${AWS::StackName}", "BedrockRequestsTotal", {"id": "m1", "stat": "Sum", "visible": false}],
                  [".", "BedrockRequestsSucceeded", {"id": "m2", "stat": "Sum", "visible": false}],
                  [".", "BedrockRequestsFailed", {"id": "m3", "stat": "Sum", "visible": false}]
                ],
                "region": "${AWS::Region}",
                "title": "Bedrock Request Status (per Minute)",
                "view": "timeSeries",
                "period": 60,
                "yAxis": {
                  "left": {
                    "label": "Count per Minute"
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 8,
              "y": 12,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  [{"expression": "m1/PERIOD(m1)*60", "label": "Throttles per Minute"}],
                  [{"expression": "m2/PERIOD(m2)*60", "label": "Retry Success per Minute"}],
                  [{"expression": "m3/PERIOD(m3)*60", "label": "Max Retries Exceeded per Minute"}],
                  ["${AWS::StackName}", "BedrockThrottles", {"id": "m1", "stat": "Sum", "visible": false}],
                  [".", "BedrockRetrySuccess", {"id": "m2", "stat": "Sum", "visible": false}],
                  [".", "BedrockMaxRetriesExceeded", {"id": "m3", "stat": "Sum", "visible": false}]
                ],
                "region": "${AWS::Region}",
                "title": "Bedrock Retries (per Minute)",
                "view": "timeSeries",
                "period": 60,
                "yAxis": {
                  "left": {
                    "label": "Count per Minute"
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 16,
              "y": 12,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["${AWS::StackName}", "BedrockRequestLatency", {"stat": "Average"}],
                  [".", "BedrockRequestLatency", {"stat": "p90"}],
                  [".", "BedrockRequestLatency", {"stat": "Maximum"}],
                  [".", "BedrockTotalLatency", {"stat": "Average"}],
                  [".", "BedrockTotalLatency", {"stat": "p90"}],
                  [".", "BedrockTotalLatency", {"stat": "Maximum"}]
                ],
                "region": "${AWS::Region}",
                "title": "Bedrock Latency - per request, and total (including backoff/retries)",
                "period": 300,
                "view": "timeSeries",
                "stacked": false,
                "annotations": {
                  "horizontal": [{
                    "value": ${ExecutionTimeThresholdMs},
                    "label": "Threshold (${ExecutionTimeThresholdMs}ms)",
                    "color": "#ff0000"
                  }]
                }
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 18,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Duration", "FunctionName", "${OCRFunction}"]
                ],
                "region": "${AWS::Region}",
                "title": "OCR Function Duration",
                "period": 300,
                "annotations": {
                  "horizontal": [{
                    "value": ${ExecutionTimeThresholdMs},
                    "label": "Threshold (${ExecutionTimeThresholdMs}ms)",
                    "color": "#ff0000"
                  }]
                },
                "stat": "Average",
                "view": "timeSeries"
              }
            },
            {
              "type": "metric",
              "x": 8,
              "y": 18,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Duration", "FunctionName", "${ClassificationFunction}"]
                ],
                "region": "${AWS::Region}",
                "title": "Classification Function Duration",
                "period": 300,
                "annotations": {
                  "horizontal": [{
                    "value": ${ExecutionTimeThresholdMs},
                    "label": "Threshold (${ExecutionTimeThresholdMs}ms)",
                    "color": "#ff0000"
                  }]
                },
                "stat": "Average",
                "view": "timeSeries"
              }
            },
            {
              "type": "metric",
              "x": 16,
              "y": 18,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Duration", "FunctionName", "${ExtractionFunction}"]
                ],
                "region": "${AWS::Region}",
                "title": "Extraction Function Duration",
                "period": 300,
                "annotations": {
                  "horizontal": [{
                    "value": ${ExecutionTimeThresholdMs},
                    "label": "Threshold (${ExecutionTimeThresholdMs}ms)",
                    "color": "#ff0000"
                  }]
                },
                "stat": "Average",
                "view": "timeSeries"
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 24,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${OCRFunctionLogGroup}' | filter @type = \"REPORT\" | fields @timestamp, @logStream, @billedDuration, @maxMemoryUsed/1024/1024 as memoryUsedMB | filter @billedDuration > ${ExecutionTimeThresholdMs} | sort by @billedDuration desc | limit 20",
                "region": "${AWS::Region}",
                "title": "OCR Lambda Long Running Invocations",
                "view": "table"
              }
            },
            {
              "type": "log",
              "x": 12,
              "y": 24,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${OCRFunctionLogGroup}' | fields @timestamp, @logStream, @message | filter @message like /ERROR/ or @message like /Task timed out/ | parse @message /RequestId: (?<requestId>[^ ]*)/ | sort @timestamp desc | limit 20",
                "region": "${AWS::Region}",
                "title": "OCR Lambda Errors",
                "view": "table"
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 30,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${ClassificationFunctionLogGroup}' | filter @type = \"REPORT\" | fields @timestamp, @logStream, @billedDuration, @maxMemoryUsed/1024/1024 as memoryUsedMB | filter @billedDuration > ${ExecutionTimeThresholdMs} | sort by @billedDuration desc | limit 20",
                "region": "${AWS::Region}",
                "title": "Classification Lambda Long Running Invocations",
                "view": "table"
              }
            },
            {
              "type": "log",
              "x": 12,
              "y": 30,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${ClassificationFunctionLogGroup}' | fields @timestamp, @logStream, @message | filter @message like /ERROR/ or @message like /Task timed out/ | parse @message /RequestId: (?<requestId>[^ ]*)/ | sort @timestamp desc | limit 20",
                "region": "${AWS::Region}",
                "title": "Classification Lambda Errors",
                "view": "table"
              }
            },
            {
              "type": "log",
              "x": 0,
              "y": 36,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${ExtractionFunctionLogGroup}' | filter @type = \"REPORT\" | fields @timestamp, @logStream, @billedDuration, @maxMemoryUsed/1024/1024 as memoryUsedMB | filter @billedDuration > ${ExecutionTimeThresholdMs} | sort by @billedDuration desc | limit 20",
                "region": "${AWS::Region}",
                "title": "Extraction Lambda Long Running Invocations",
                "view": "table"
              }
            },
            {
              "type": "log",
              "x": 12,
              "y": 36,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '${ExtractionFunctionLogGroup}' | fields @timestamp, @logStream, @message | filter @message like /ERROR/ or @message like /Task timed out/ | parse @message /RequestId: (?<requestId>[^ ]*)/ | sort @timestamp desc | limit 20",
                "region": "${AWS::Region}",
                "title": "Extraction Lambda Errors",
                "view": "table"
              }
            }

          ]
        }

Outputs:

  # Outputs required by main template

  StateMachineName:
    Description: Step Functions State machine Name
    Value: !GetAtt DocumentProcessingStateMachine.Name

  StateMachineArn:
    Description: Step Functions State machine ARN
    Value: !GetAtt DocumentProcessingStateMachine.Arn
  
  StateMachineLogGroup:
    Description: Step Functions State machine LogGroup
    Value: !Ref StateMachineLogGroup

  DashboardName:
    Description: Name of the Pattern 1 CloudWatch Dashboard
    Value: !Ref Dashboard

  DashboardArn:
    Description: ARN of the Pattern 1 CloudWatch Dashboard
    Value: !Sub "arn:aws:cloudwatch::${AWS::AccountId}:dashboard/${Dashboard}"

